
SmartLockF411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fec  08007fec  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff4  08007ff4  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08007ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200002fc  080082f8  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080082f8  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef4a  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284b  00000000  00000000  0002f276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00031ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00032728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bef  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eef9  00000000  00000000  0004aeb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc5c  00000000  00000000  00059db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6a0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d34  00000000  00000000  000e6a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002fc 	.word	0x200002fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d94 	.word	0x08007d94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000300 	.word	0x20000300
 80001dc:	08007d94 	.word	0x08007d94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <processBluetoothData>:
#include "ethernet_module.h"

char* login;
char* password;

void processBluetoothData(SPI_HandleTypeDef *huart1,  uint8_t *RxBuf) {
 8000594:	b580      	push	{r7, lr}
 8000596:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800059a:	af00      	add	r7, sp, #0
 800059c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005a0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005aa:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005ae:	6019      	str	r1, [r3, #0]
	strtok(RxBuf, " ");
 80005b0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005b4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005b8:	4970      	ldr	r1, [pc, #448]	; (800077c <processBluetoothData+0x1e8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	f006 fae2 	bl	8006b84 <strtok>
	login = strtok(NULL, " ");
 80005c0:	496e      	ldr	r1, [pc, #440]	; (800077c <processBluetoothData+0x1e8>)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f006 fade 	bl	8006b84 <strtok>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a6d      	ldr	r2, [pc, #436]	; (8000780 <processBluetoothData+0x1ec>)
 80005cc:	6013      	str	r3, [r2, #0]
	password = strtok(NULL, " \n");
 80005ce:	496d      	ldr	r1, [pc, #436]	; (8000784 <processBluetoothData+0x1f0>)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f006 fad7 	bl	8006b84 <strtok>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a6b      	ldr	r2, [pc, #428]	; (8000788 <processBluetoothData+0x1f4>)
 80005da:	6013      	str	r3, [r2, #0]

	switch(RxBuf[0])
 80005dc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005e0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b73      	cmp	r3, #115	; 0x73
 80005ea:	f000 8086 	beq.w	80006fa <processBluetoothData+0x166>
 80005ee:	2b73      	cmp	r3, #115	; 0x73
 80005f0:	f300 80bd 	bgt.w	800076e <processBluetoothData+0x1da>
 80005f4:	2b63      	cmp	r3, #99	; 0x63
 80005f6:	d041      	beq.n	800067c <processBluetoothData+0xe8>
 80005f8:	2b6f      	cmp	r3, #111	; 0x6f
 80005fa:	f040 80b8 	bne.w	800076e <processBluetoothData+0x1da>
	    {
	        case 'o': {
	        	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	4862      	ldr	r0, [pc, #392]	; (800078c <processBluetoothData+0x1f8>)
 8000604:	f001 fe9a 	bl	800233c <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d02b      	beq.n	8000666 <processBluetoothData+0xd2>
					if(W5500_Auth(login, password, RxBuf[0])) {
 800060e:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <processBluetoothData+0x1ec>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	4b5d      	ldr	r3, [pc, #372]	; (8000788 <processBluetoothData+0x1f4>)
 8000614:	6819      	ldr	r1, [r3, #0]
 8000616:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800061a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	f000 f97c 	bl	8000920 <W5500_Auth>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d010      	beq.n	8000650 <processBluetoothData+0xbc>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	4855      	ldr	r0, [pc, #340]	; (800078c <processBluetoothData+0x1f8>)
 8000636:	f001 fe99 	bl	800236c <HAL_GPIO_WritePin>
						HAL_UART_Transmit(huart1, "Opened", strlen("Opened"), 10);
 800063a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800063e:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 8000642:	230a      	movs	r3, #10
 8000644:	2206      	movs	r2, #6
 8000646:	4952      	ldr	r1, [pc, #328]	; (8000790 <processBluetoothData+0x1fc>)
 8000648:	6800      	ldr	r0, [r0, #0]
 800064a:	f003 f91a 	bl	8003882 <HAL_UART_Transmit>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
					}
				} else {
					HAL_UART_Transmit(huart1, "Opened", strlen("Opened"), 10);
				}
	            break;
 800064e:	e08f      	b.n	8000770 <processBluetoothData+0x1dc>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
 8000650:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000654:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 8000658:	230a      	movs	r3, #10
 800065a:	220a      	movs	r2, #10
 800065c:	494d      	ldr	r1, [pc, #308]	; (8000794 <processBluetoothData+0x200>)
 800065e:	6800      	ldr	r0, [r0, #0]
 8000660:	f003 f90f 	bl	8003882 <HAL_UART_Transmit>
	            break;
 8000664:	e084      	b.n	8000770 <processBluetoothData+0x1dc>
					HAL_UART_Transmit(huart1, "Opened", strlen("Opened"), 10);
 8000666:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800066a:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 800066e:	230a      	movs	r3, #10
 8000670:	2206      	movs	r2, #6
 8000672:	4947      	ldr	r1, [pc, #284]	; (8000790 <processBluetoothData+0x1fc>)
 8000674:	6800      	ldr	r0, [r0, #0]
 8000676:	f003 f904 	bl	8003882 <HAL_UART_Transmit>
	            break;
 800067a:	e079      	b.n	8000770 <processBluetoothData+0x1dc>
	        }
	        case 'c': {
	    		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4842      	ldr	r0, [pc, #264]	; (800078c <processBluetoothData+0x1f8>)
 8000682:	f001 fe5b 	bl	800233c <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d12b      	bne.n	80006e4 <processBluetoothData+0x150>
	    			if(W5500_Auth(login, password, RxBuf[0])) {
 800068c:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <processBluetoothData+0x1ec>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <processBluetoothData+0x1f4>)
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000698:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	f000 f93d 	bl	8000920 <W5500_Auth>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d010      	beq.n	80006ce <processBluetoothData+0x13a>
		    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	4836      	ldr	r0, [pc, #216]	; (800078c <processBluetoothData+0x1f8>)
 80006b4:	f001 fe5a 	bl	800236c <HAL_GPIO_WritePin>
		    			HAL_UART_Transmit(huart1, "Closed", strlen("Closed"), 10);
 80006b8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80006bc:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 80006c0:	230a      	movs	r3, #10
 80006c2:	2206      	movs	r2, #6
 80006c4:	4934      	ldr	r1, [pc, #208]	; (8000798 <processBluetoothData+0x204>)
 80006c6:	6800      	ldr	r0, [r0, #0]
 80006c8:	f003 f8db 	bl	8003882 <HAL_UART_Transmit>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
					}
	    		} else {
	    			HAL_UART_Transmit(huart1, "Closed", strlen("Closed"), 10);
	    		}
	            break;
 80006cc:	e050      	b.n	8000770 <processBluetoothData+0x1dc>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
 80006ce:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80006d2:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 80006d6:	230a      	movs	r3, #10
 80006d8:	220a      	movs	r2, #10
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <processBluetoothData+0x200>)
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	f003 f8d0 	bl	8003882 <HAL_UART_Transmit>
	            break;
 80006e2:	e045      	b.n	8000770 <processBluetoothData+0x1dc>
	    			HAL_UART_Transmit(huart1, "Closed", strlen("Closed"), 10);
 80006e4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80006e8:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 80006ec:	230a      	movs	r3, #10
 80006ee:	2206      	movs	r2, #6
 80006f0:	4929      	ldr	r1, [pc, #164]	; (8000798 <processBluetoothData+0x204>)
 80006f2:	6800      	ldr	r0, [r0, #0]
 80006f4:	f003 f8c5 	bl	8003882 <HAL_UART_Transmit>
	            break;
 80006f8:	e03a      	b.n	8000770 <processBluetoothData+0x1dc>
	        }
	        case 's': {
	        	if(W5500_Auth(login, password, "")) {
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <processBluetoothData+0x1ec>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a22      	ldr	r2, [pc, #136]	; (8000788 <processBluetoothData+0x1f4>)
 8000700:	6811      	ldr	r1, [r2, #0]
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <processBluetoothData+0x208>)
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f90b 	bl	8000920 <W5500_Auth>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d023      	beq.n	8000758 <processBluetoothData+0x1c4>
	        		char stat[1024] = {0};
 8000710:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000714:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	3304      	adds	r3, #4
 800071e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f006 f8d7 	bl	80068d8 <memset>
	        		W5500_GetStat(stat);
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fa16 	bl	8000b60 <W5500_GetStat>
	        		HAL_UART_Transmit(huart1, stat, strlen(stat), 10);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fd51 	bl	80001e0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800074a:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 800074e:	230a      	movs	r3, #10
 8000750:	6800      	ldr	r0, [r0, #0]
 8000752:	f003 f896 	bl	8003882 <HAL_UART_Transmit>
	        	} else {
					HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
				}
	            break;
 8000756:	e00b      	b.n	8000770 <processBluetoothData+0x1dc>
					HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
 8000758:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800075c:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 8000760:	230a      	movs	r3, #10
 8000762:	220a      	movs	r2, #10
 8000764:	490b      	ldr	r1, [pc, #44]	; (8000794 <processBluetoothData+0x200>)
 8000766:	6800      	ldr	r0, [r0, #0]
 8000768:	f003 f88b 	bl	8003882 <HAL_UART_Transmit>
	            break;
 800076c:	e000      	b.n	8000770 <processBluetoothData+0x1dc>
	        }
	        default: {
	        	break;
 800076e:	bf00      	nop
	        }
	    }
}
 8000770:	bf00      	nop
 8000772:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	08007dac 	.word	0x08007dac
 8000780:	20000318 	.word	0x20000318
 8000784:	08007db0 	.word	0x08007db0
 8000788:	2000031c 	.word	0x2000031c
 800078c:	40020800 	.word	0x40020800
 8000790:	08007db4 	.word	0x08007db4
 8000794:	08007dbc 	.word	0x08007dbc
 8000798:	08007dc8 	.word	0x08007dc8
 800079c:	08007dd0 	.word	0x08007dd0

080007a0 <W5500_Reset>:
        .dhcp = NETINFO_STATIC
};

static uint8_t serverIp[] = { 192, 168, 88, 100 };

void W5500_Reset() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2108      	movs	r1, #8
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <W5500_Reset+0x28>)
 80007aa:	f001 fddf 	bl	800236c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 ff08 	bl	80015c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2108      	movs	r1, #8
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <W5500_Reset+0x28>)
 80007ba:	f001 fdd7 	bl	800236c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f000 ff00 	bl	80015c4 <HAL_Delay>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020000 	.word	0x40020000

080007cc <W5500_Select>:

void W5500_Select(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <W5500_Select+0x14>)
 80007d6:	f001 fdc9 	bl	800236c <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020000 	.word	0x40020000

080007e4 <W5500_Unselect>:

void W5500_Unselect(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <W5500_Unselect+0x14>)
 80007ee:	f001 fdbd 	bl	800236c <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40020000 	.word	0x40020000

080007fc <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(hspi, buff, len, HAL_MAX_DELAY);
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <W5500_ReadBuff+0x24>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f002 fc05 	bl	8003022 <HAL_SPI_Receive>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000320 	.word	0x20000320

08000824 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(hspi, buff, len, HAL_MAX_DELAY);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <W5500_WriteBuff+0x24>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	887a      	ldrh	r2, [r7, #2]
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f002 fab5 	bl	8002daa <HAL_SPI_Transmit>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000320 	.word	0x20000320

0800084c <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffd0 	bl	80007fc <W5500_ReadBuff>
	return byte;
 800085c:	79fb      	ldrb	r3, [r7, #7]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffd5 	bl	8000824 <W5500_WriteBuff>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <W5500_Init>:

void W5500_Init(SPI_HandleTypeDef *hspi1) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	hspi = hspi1;
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <W5500_Init+0x78>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]


	W5500_Unselect();
 8000892:	f7ff ffa7 	bl	80007e4 <W5500_Unselect>
	W5500_Reset();
 8000896:	f7ff ff83 	bl	80007a0 <W5500_Reset>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800089a:	4919      	ldr	r1, [pc, #100]	; (8000900 <W5500_Init+0x7c>)
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <W5500_Init+0x80>)
 800089e:	f005 fb7d 	bl	8005f9c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80008a2:	4919      	ldr	r1, [pc, #100]	; (8000908 <W5500_Init+0x84>)
 80008a4:	4819      	ldr	r0, [pc, #100]	; (800090c <W5500_Init+0x88>)
 80008a6:	f005 fb9f 	bl	8005fe8 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80008aa:	4919      	ldr	r1, [pc, #100]	; (8000910 <W5500_Init+0x8c>)
 80008ac:	4819      	ldr	r0, [pc, #100]	; (8000914 <W5500_Init+0x90>)
 80008ae:	f005 fbc7 	bl	8006040 <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <W5500_Init+0x94>)
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fd12 	bl	80062f4 <wizchip_init>

	uint8_t phyLink = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
	do {
		ctlwizchip(CW_GET_PHYLINK, (void*) &phyLink);
 80008d4:	f107 030f 	add.w	r3, r7, #15
 80008d8:	4619      	mov	r1, r3
 80008da:	200f      	movs	r0, #15
 80008dc:	f005 fbdc 	bl	8006098 <ctlwizchip>
		HAL_Delay(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f000 fe6f 	bl	80015c4 <HAL_Delay>
	} while (phyLink == PHY_LINK_OFF);
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f3      	beq.n	80008d4 <W5500_Init+0x50>

	wizchip_setnetinfo(&gWIZNETINFO);
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <W5500_Init+0x98>)
 80008ee:	f005 ff6f 	bl	80067d0 <wizchip_setnetinfo>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000320 	.word	0x20000320
 8000900:	080007e5 	.word	0x080007e5
 8000904:	080007cd 	.word	0x080007cd
 8000908:	08000867 	.word	0x08000867
 800090c:	0800084d 	.word	0x0800084d
 8000910:	08000825 	.word	0x08000825
 8000914:	080007fd 	.word	0x080007fd
 8000918:	08007dd4 	.word	0x08007dd4
 800091c:	20000000 	.word	0x20000000

08000920 <W5500_Auth>:

int W5500_Auth(char* login, char* password, char* action) {
 8000920:	b580      	push	{r7, lr}
 8000922:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8000926:	af00      	add	r7, sp, #0
 8000928:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800092c:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8000930:	6018      	str	r0, [r3, #0]
 8000932:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000936:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800093a:	6019      	str	r1, [r3, #0]
 800093c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000940:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8000944:	601a      	str	r2, [r3, #0]
	//открытие TCP сокета
	uint8_t code = socket(CLIENT_SOCKET, Sn_MR_TCP, W5500_PORT, 0);
 8000946:	2300      	movs	r3, #0
 8000948:	f642 2287 	movw	r2, #10887	; 0x2a87
 800094c:	2101      	movs	r1, #1
 800094e:	2000      	movs	r0, #0
 8000950:	f004 fc08 	bl	8005164 <socket>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
	if (code != CLIENT_SOCKET)
 800095a:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <W5500_Auth+0x46>
		return 0;
 8000962:	2300      	movs	r3, #0
 8000964:	e0ee      	b.n	8000b44 <W5500_Auth+0x224>
	//открытие соединения
	code = connect(CLIENT_SOCKET, serverIp, SERVER_PORT);
 8000966:	f641 7292 	movw	r2, #8082	; 0x1f92
 800096a:	4979      	ldr	r1, [pc, #484]	; (8000b50 <W5500_Auth+0x230>)
 800096c:	2000      	movs	r0, #0
 800096e:	f004 fd7d 	bl	800546c <connect>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
	if (code != SOCK_OK) {
 8000978:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 800097c:	2b01      	cmp	r3, #1
 800097e:	d004      	beq.n	800098a <W5500_Auth+0x6a>
		close(CLIENT_SOCKET);
 8000980:	2000      	movs	r0, #0
 8000982:	f004 fd05 	bl	8005390 <close>
		return 0;
 8000986:	2300      	movs	r3, #0
 8000988:	e0dc      	b.n	8000b44 <W5500_Auth+0x224>
	}

	char openKey[5];
	rand_string(openKey, 5);
 800098a:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800098e:	2105      	movs	r1, #5
 8000990:	4618      	mov	r0, r3
 8000992:	f004 fb9d 	bl	80050d0 <rand_string>
	char stringToHash[9];
	sprintf(stringToHash, "%s%s", password, openKey);
 8000996:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800099a:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800099e:	f5a2 6291 	sub.w	r2, r2, #1160	; 0x488
 80009a2:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	496a      	ldr	r1, [pc, #424]	; (8000b54 <W5500_Auth+0x234>)
 80009aa:	f006 f8cb 	bl	8006b44 <siprintf>
	uint8_t *hashString = md5String(stringToHash);
 80009ae:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 fb50 	bl	8005058 <md5String>
 80009b8:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
	char hashHex[33];
	for(unsigned int i = 0; i < 16; ++i){
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80009c2:	e014      	b.n	80009ee <W5500_Auth+0xce>
		sprintf(hashHex + i * 2, "%02x", hashString[i]);
 80009c4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80009ce:	18d0      	adds	r0, r2, r3
 80009d0:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80009d4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	495e      	ldr	r1, [pc, #376]	; (8000b58 <W5500_Auth+0x238>)
 80009e0:	f006 f8b0 	bl	8006b44 <siprintf>
	for(unsigned int i = 0; i < 16; ++i){
 80009e4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009e8:	3301      	adds	r3, #1
 80009ea:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80009ee:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d9e6      	bls.n	80009c4 <W5500_Auth+0xa4>
	}
	//отправка запроса на сервер
	char req[32];
	sprintf(req, "a %s %s", login, openKey);
 80009f6:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80009fa:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80009fe:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8000a02:	f207 4014 	addw	r0, r7, #1044	; 0x414
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	4954      	ldr	r1, [pc, #336]	; (8000b5c <W5500_Auth+0x23c>)
 8000a0a:	f006 f89b 	bl	8006b44 <siprintf>

	uint16_t len = sizeof(req) - 1;
 8000a0e:	231f      	movs	r3, #31
 8000a10:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
	uint8_t *pbuff = (uint8_t*) &req;
 8000a14:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000a18:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	while (len > 0) {
 8000a1c:	e01a      	b.n	8000a54 <W5500_Auth+0x134>
		int32_t nbytes = send(CLIENT_SOCKET, pbuff, len);
 8000a1e:	f8b7 348a 	ldrh.w	r3, [r7, #1162]	; 0x48a
 8000a22:	461a      	mov	r2, r3
 8000a24:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f004 fdfb 	bl	8005624 <send>
 8000a2e:	f8c7 046c 	str.w	r0, [r7, #1132]	; 0x46c
		if (nbytes <= 0) {
 8000a32:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dc04      	bgt.n	8000a44 <W5500_Auth+0x124>
			close(CLIENT_SOCKET);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f004 fca8 	bl	8005390 <close>
			return 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	e07f      	b.n	8000b44 <W5500_Auth+0x224>
		}
		len -= nbytes;
 8000a44:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f8b7 248a 	ldrh.w	r2, [r7, #1162]	; 0x48a
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
	while (len > 0) {
 8000a54:	f8b7 348a 	ldrh.w	r3, [r7, #1162]	; 0x48a
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1e0      	bne.n	8000a1e <W5500_Auth+0xfe>
	}

	char buff[1024] = {0};
 8000a5c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000a60:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 ff31 	bl	80068d8 <memset>
	len = sizeof(buff);
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
	//получение ответа от сервера
	while (1) {
		int32_t nbytes = recv(CLIENT_SOCKET, (uint8_t*) &buff, sizeof(buff));
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a86:	4619      	mov	r1, r3
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f004 fec5 	bl	8005818 <recv>
 8000a8e:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
		if (nbytes == SOCKERR_SOCKSTATUS)
 8000a92:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8000a96:	f113 0f07 	cmn.w	r3, #7
 8000a9a:	d00c      	beq.n	8000ab6 <W5500_Auth+0x196>
			break;
		len -= nbytes;
 8000a9c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	f8b7 248a 	ldrh.w	r2, [r7, #1162]	; 0x48a
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
		if (len <= 0)
 8000aac:	f8b7 348a 	ldrh.w	r3, [r7, #1162]	; 0x48a
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <W5500_Auth+0x19a>
	while (1) {
 8000ab4:	e7e3      	b.n	8000a7e <W5500_Auth+0x15e>
			break;
 8000ab6:	bf00      	nop
 8000ab8:	e000      	b.n	8000abc <W5500_Auth+0x19c>
			break;
 8000aba:	bf00      	nop
	}

	int result = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
	for(int i = 0; i < 32; i++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000ac8:	e018      	b.n	8000afc <W5500_Auth+0x1dc>
		if(buff[i] != hashHex[i]) {
 8000aca:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000ace:	f2a3 427c 	subw	r2, r3, #1148	; 0x47c
 8000ad2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	f207 4134 	addw	r1, r7, #1076	; 0x434
 8000ade:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ae2:	440b      	add	r3, r1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d003      	beq.n	8000af2 <W5500_Auth+0x1d2>
			result = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
			break;
 8000af0:	e008      	b.n	8000b04 <W5500_Auth+0x1e4>
	for(int i = 0; i < 32; i++) {
 8000af2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000af6:	3301      	adds	r3, #1
 8000af8:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000afc:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	dde2      	ble.n	8000aca <W5500_Auth+0x1aa>
		}
	}
	if(result && *action != '\0') {
 8000b04:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d016      	beq.n	8000b3a <W5500_Auth+0x21a>
 8000b0c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000b10:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00e      	beq.n	8000b3a <W5500_Auth+0x21a>
		*pbuff = action;
 8000b1c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000b20:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8000b2c:	701a      	strb	r2, [r3, #0]
		send(CLIENT_SOCKET, pbuff, sizeof(uint8_t));
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8000b34:	2000      	movs	r0, #0
 8000b36:	f004 fd75 	bl	8005624 <send>
	}

	//закрытие соединения
	close(CLIENT_SOCKET);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f004 fc28 	bl	8005390 <close>
	return result;
 8000b40:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000018 	.word	0x20000018
 8000b54:	08007ddc 	.word	0x08007ddc
 8000b58:	08007de4 	.word	0x08007de4
 8000b5c:	08007dec 	.word	0x08007dec

08000b60 <W5500_GetStat>:

void W5500_GetStat(char* buf) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000b6c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b70:	6018      	str	r0, [r3, #0]
	//открытие TCP сокета
	uint8_t code = socket(CLIENT_SOCKET, Sn_MR_TCP, W5500_PORT, 0);
 8000b72:	2300      	movs	r3, #0
 8000b74:	f642 2287 	movw	r2, #10887	; 0x2a87
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f004 faf2 	bl	8005164 <socket>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if (code != CLIENT_SOCKET)
 8000b86:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 808d 	bne.w	8000caa <W5500_GetStat+0x14a>
		return 0;
	//открытие соединения
	code = connect(CLIENT_SOCKET, serverIp, SERVER_PORT);
 8000b90:	f641 7292 	movw	r2, #8082	; 0x1f92
 8000b94:	4947      	ldr	r1, [pc, #284]	; (8000cb4 <W5500_GetStat+0x154>)
 8000b96:	2000      	movs	r0, #0
 8000b98:	f004 fc68 	bl	800546c <connect>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if (code != SOCK_OK) {
 8000ba2:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d003      	beq.n	8000bb2 <W5500_GetStat+0x52>
		close(CLIENT_SOCKET);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f004 fbf0 	bl	8005390 <close>
		return 0;
 8000bb0:	e07c      	b.n	8000cac <W5500_GetStat+0x14c>
	}

	char req[] = { "s" };
 8000bb2:	2373      	movs	r3, #115	; 0x73
 8000bb4:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
	uint16_t len = sizeof(req) - 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
	uint8_t *pbuff = (uint8_t*) &req;
 8000bbe:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000bc2:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	while (len > 0) {
 8000bc6:	e019      	b.n	8000bfc <W5500_GetStat+0x9c>
		int32_t nbytes = send(CLIENT_SOCKET, pbuff, len);
 8000bc8:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f004 fd26 	bl	8005624 <send>
 8000bd8:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
		if (nbytes <= 0) {
 8000bdc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dc03      	bgt.n	8000bec <W5500_GetStat+0x8c>
			close(CLIENT_SOCKET);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f004 fbd3 	bl	8005390 <close>
			return 0;
 8000bea:	e05f      	b.n	8000cac <W5500_GetStat+0x14c>
		}
		len -= nbytes;
 8000bec:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
	while (len > 0) {
 8000bfc:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1e1      	bne.n	8000bc8 <W5500_GetStat+0x68>
	}

	char buff[1024] = {0};
 8000c04:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000c08:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	3304      	adds	r3, #4
 8000c12:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f005 fe5d 	bl	80068d8 <memset>
	len = sizeof(buff);
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
	//получение ответа от сервера
	while (1) {
		int32_t nbytes = recv(CLIENT_SOCKET, (uint8_t*) &buff, sizeof(buff));
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2e:	4619      	mov	r1, r3
 8000c30:	2000      	movs	r0, #0
 8000c32:	f004 fdf1 	bl	8005818 <recv>
 8000c36:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
		if (nbytes == SOCKERR_SOCKSTATUS)
 8000c3a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c3e:	f113 0f07 	cmn.w	r3, #7
 8000c42:	d00c      	beq.n	8000c5e <W5500_GetStat+0xfe>
			break;
		len -= nbytes;
 8000c44:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
		if (len <= 0)
 8000c54:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <W5500_GetStat+0x102>
	while (1) {
 8000c5c:	e7e3      	b.n	8000c26 <W5500_GetStat+0xc6>
			break;
 8000c5e:	bf00      	nop
 8000c60:	e000      	b.n	8000c64 <W5500_GetStat+0x104>
			break;
 8000c62:	bf00      	nop
	}

	//закрытие соединения
	close(CLIENT_SOCKET);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f004 fb93 	bl	8005390 <close>
	for(int i = 0; i < 1024; ++i)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8000c70:	e015      	b.n	8000c9e <W5500_GetStat+0x13e>
		buf[i] = buff[i];
 8000c72:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000c76:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000c7a:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000c86:	f2a2 411c 	subw	r1, r2, #1052	; 0x41c
 8000c8a:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8000c8e:	440a      	add	r2, r1
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; ++i)
 8000c94:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8000c9e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca6:	dbe4      	blt.n	8000c72 <W5500_GetStat+0x112>
 8000ca8:	e000      	b.n	8000cac <W5500_GetStat+0x14c>
		return 0;
 8000caa:	bf00      	nop
}
 8000cac:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000018 	.word	0x20000018

08000cb8 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_UARTEx_RxEventCallback+0x40>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d110      	bne.n	8000cf0 <HAL_UARTEx_RxEventCallback+0x38>
	{
		processBluetoothData(&huart1, RxBuf);
 8000cce:	490b      	ldr	r1, [pc, #44]	; (8000cfc <HAL_UARTEx_RxEventCallback+0x44>)
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_UARTEx_RxEventCallback+0x48>)
 8000cd2:	f7ff fc5f 	bl	8000594 <processBluetoothData>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8000cd6:	2240      	movs	r2, #64	; 0x40
 8000cd8:	4908      	ldr	r1, [pc, #32]	; (8000cfc <HAL_UARTEx_RxEventCallback+0x44>)
 8000cda:	4809      	ldr	r0, [pc, #36]	; (8000d00 <HAL_UARTEx_RxEventCallback+0x48>)
 8000cdc:	f002 fe63 	bl	80039a6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0208 	bic.w	r2, r2, #8
 8000cee:	601a      	str	r2, [r3, #0]
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	20000420 	.word	0x20000420
 8000d00:	2000037c 	.word	0x2000037c
 8000d04:	200003c0 	.word	0x200003c0

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fbe8 	bl	80014e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f822 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f908 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d18:	f000 f8e6 	bl	8000ee8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d1c:	f000 f8ba 	bl	8000e94 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000d20:	f000 f882 	bl	8000e28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  W5500_Init(&hspi1);
 8000d24:	4808      	ldr	r0, [pc, #32]	; (8000d48 <main+0x40>)
 8000d26:	f7ff fdad 	bl	8000884 <W5500_Init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 8000d2a:	2240      	movs	r2, #64	; 0x40
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <main+0x44>)
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <main+0x48>)
 8000d30:	f002 fe39 	bl	80039a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <main+0x4c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <main+0x4c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0208 	bic.w	r2, r2, #8
 8000d42:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <main+0x3c>
 8000d46:	bf00      	nop
 8000d48:	20000324 	.word	0x20000324
 8000d4c:	20000420 	.word	0x20000420
 8000d50:	2000037c 	.word	0x2000037c
 8000d54:	200003c0 	.word	0x200003c0

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2230      	movs	r2, #48	; 0x30
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f005 fdb6 	bl	80068d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <SystemClock_Config+0xc8>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <SystemClock_Config+0xc8>)
 8000d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemClock_Config+0xc8>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <SystemClock_Config+0xcc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <SystemClock_Config+0xcc>)
 8000da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <SystemClock_Config+0xcc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dcc:	23c0      	movs	r3, #192	; 0xc0
 8000dce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fb03 	bl	80023e8 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000de8:	f000 f930 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	2103      	movs	r1, #3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fd65 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e14:	f000 f91a 	bl	800104c <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3750      	adds	r7, #80	; 0x50
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e2e:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <MX_SPI1_Init+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e5c:	2208      	movs	r2, #8
 8000e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_SPI1_Init+0x64>)
 8000e7a:	f001 ff0d 	bl	8002c98 <HAL_SPI_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e84:	f000 f8e2 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000324 	.word	0x20000324
 8000e90:	40013000 	.word	0x40013000

08000e94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <MX_USART1_UART_Init+0x50>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000ea0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	f002 fc8c 	bl	80037e8 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ed6:	f000 f8b9 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000037c 	.word	0x2000037c
 8000ee4:	40011000 	.word	0x40011000

08000ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_DMA_Init+0x3c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2044      	movs	r0, #68	; 0x44
 8000f10:	f000 fc57 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000f14:	2044      	movs	r0, #68	; 0x44
 8000f16:	f000 fc70 	bl	80017fa <HAL_NVIC_EnableIRQ>

}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b3e      	ldr	r3, [pc, #248]	; (800103c <MX_GPIO_Init+0x114>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a3d      	ldr	r2, [pc, #244]	; (800103c <MX_GPIO_Init+0x114>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <MX_GPIO_Init+0x114>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <MX_GPIO_Init+0x114>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a36      	ldr	r2, [pc, #216]	; (800103c <MX_GPIO_Init+0x114>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <MX_GPIO_Init+0x114>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <MX_GPIO_Init+0x114>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a2f      	ldr	r2, [pc, #188]	; (800103c <MX_GPIO_Init+0x114>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <MX_GPIO_Init+0x114>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f98:	4829      	ldr	r0, [pc, #164]	; (8001040 <MX_GPIO_Init+0x118>)
 8000f9a:	f001 f9e7 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2118      	movs	r1, #24
 8000fa2:	4828      	ldr	r0, [pc, #160]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000fa4:	f001 f9e2 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2138      	movs	r1, #56	; 0x38
 8000fac:	4826      	ldr	r0, [pc, #152]	; (8001048 <MX_GPIO_Init+0x120>)
 8000fae:	f001 f9dd 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <MX_GPIO_Init+0x118>)
 8000fcc:	f001 f832 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000fd0:	2318      	movs	r3, #24
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <MX_GPIO_Init+0x11c>)
 8000fe8:	f001 f824 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fec:	2338      	movs	r3, #56	; 0x38
 8000fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_GPIO_Init+0x120>)
 8001004:	f001 f816 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001008:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800100c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <MX_GPIO_Init+0x120>)
 8001020:	f001 f808 	bl	8002034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2017      	movs	r0, #23
 800102a:	f000 fbca 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800102e:	2017      	movs	r0, #23
 8001030:	f000 fbe3 	bl	80017fa <HAL_NVIC_EnableIRQ>

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40020800 	.word	0x40020800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_MspInit+0x4c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x4c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_SPI_MspInit+0x84>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12b      	bne.n	8001122 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001102:	23e0      	movs	r3, #224	; 0xe0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_SPI_MspInit+0x8c>)
 800111e:	f000 ff89 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40013000 	.word	0x40013000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a34      	ldr	r2, [pc, #208]	; (8001228 <HAL_UART_MspInit+0xf0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d162      	bne.n	8001220 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <HAL_UART_MspInit+0xf4>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_UART_MspInit+0xf4>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_UART_MspInit+0xf4>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <HAL_UART_MspInit+0xf4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a2b      	ldr	r2, [pc, #172]	; (800122c <HAL_UART_MspInit+0xf4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_UART_MspInit+0xf4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001192:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a4:	2307      	movs	r3, #7
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4820      	ldr	r0, [pc, #128]	; (8001230 <HAL_UART_MspInit+0xf8>)
 80011b0:	f000 ff40 	bl	8002034 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_UART_MspInit+0x100>)
 80011b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011f4:	480f      	ldr	r0, [pc, #60]	; (8001234 <HAL_UART_MspInit+0xfc>)
 80011f6:	f000 fb1b 	bl	8001830 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001200:	f7ff ff24 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <HAL_UART_MspInit+0xfc>)
 8001208:	639a      	str	r2, [r3, #56]	; 0x38
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_UART_MspInit+0xfc>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2025      	movs	r0, #37	; 0x25
 8001216:	f000 fad4 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121a:	2025      	movs	r0, #37	; 0x25
 800121c:	f000 faed 	bl	80017fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40011000 	.word	0x40011000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000
 8001234:	200003c0 	.word	0x200003c0
 8001238:	40026488 	.word	0x40026488

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f97c 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001294:	2040      	movs	r0, #64	; 0x40
 8001296:	f001 f883 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800129a:	2080      	movs	r0, #128	; 0x80
 800129c:	f001 f880 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012a4:	f001 f87c 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80012a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ac:	f001 f878 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USART1_IRQHandler+0x10>)
 80012ba:	f002 fbd9 	bl	8003a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000037c 	.word	0x2000037c

080012c8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <DMA2_Stream5_IRQHandler+0x10>)
 80012ce:	f000 fc47 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200003c0 	.word	0x200003c0

080012dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	return 1;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_kill>:

int _kill(int pid, int sig)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012f6:	f005 faab 	bl	8006850 <__errno>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2216      	movs	r2, #22
 80012fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_exit>:

void _exit (int status)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ffe7 	bl	80012ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800131e:	e7fe      	b.n	800131e <_exit+0x12>

08001320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001332:	f3af 8000 	nop.w
 8001336:	4601      	mov	r1, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf0      	blt.n	8001332 <_read+0x12>
	}

return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <_write+0x12>
	}
	return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ba:	605a      	str	r2, [r3, #4]
	return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f005 fa10 	bl	8006850 <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	; (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20020000 	.word	0x20020000
 800145c:	00000400 	.word	0x00000400
 8001460:	20000460 	.word	0x20000460
 8001464:	20000498 	.word	0x20000498

08001468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b6:	f7ff ffd7 	bl	8001468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f005 f9cf 	bl	800685c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff fc23 	bl	8000d08 <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 80014d0:	08007ffc 	.word	0x08007ffc
  ldr r2, =_sbss
 80014d4:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 80014d8:	20000498 	.word	0x20000498

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>
	...

080014e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_Init+0x40>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_Init+0x40>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x40>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x40>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f94f 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fda0 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023c00 	.word	0x40023c00

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f967 	bl	8001816 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f92f 	bl	80017c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000001c 	.word	0x2000001c
 800157c:	20000024 	.word	0x20000024
 8001580:	20000020 	.word	0x20000020

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000024 	.word	0x20000024
 80015a8:	20000464 	.word	0x20000464

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000464 	.word	0x20000464

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000024 	.word	0x20000024

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	; (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	; (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f7ff ff8e 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff29 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d4:	f7ff ff3e 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff ff8e 	bl	8001700 <NVIC_EncodePriority>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff5d 	bl	80016ac <__NVIC_SetPriority>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff31 	bl	8001670 <__NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffa2 	bl	8001768 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff feb6 	bl	80015ac <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e099      	b.n	8001980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2202      	movs	r2, #2
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800186c:	e00f      	b.n	800188e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186e:	f7ff fe9d 	bl	80015ac <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b05      	cmp	r3, #5
 800187a:	d908      	bls.n	800188e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2220      	movs	r2, #32
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2203      	movs	r2, #3
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e078      	b.n	8001980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e8      	bne.n	800186e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_DMA_Init+0x158>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d107      	bne.n	80018f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	4313      	orrs	r3, r2
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f023 0307 	bic.w	r3, r3, #7
 800190e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	2b04      	cmp	r3, #4
 8001920:	d117      	bne.n	8001952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00e      	beq.n	8001952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fb01 	bl	8001f3c <DMA_CheckFifoParam>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800194e:	2301      	movs	r3, #1
 8001950:	e016      	b.n	8001980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fab8 	bl	8001ed0 <DMA_CalcBaseAndBitshift>
 8001960:	4603      	mov	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	223f      	movs	r2, #63	; 0x3f
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	f010803f 	.word	0xf010803f

0800198c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_DMA_Start_IT+0x26>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e040      	b.n	8001a34 <HAL_DMA_Start_IT+0xa8>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d12f      	bne.n	8001a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2202      	movs	r2, #2
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 fa4a 	bl	8001e74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	409a      	lsls	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0216 	orr.w	r2, r2, #22
 80019fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0208 	orr.w	r2, r2, #8
 8001a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e005      	b.n	8001a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a4a:	f7ff fdaf 	bl	80015ac <HAL_GetTick>
 8001a4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d008      	beq.n	8001a6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e052      	b.n	8001b14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0216 	bic.w	r2, r2, #22
 8001a7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <HAL_DMA_Abort+0x62>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0208 	bic.w	r2, r2, #8
 8001aac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0201 	bic.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abe:	e013      	b.n	8001ae8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac0:	f7ff fd74 	bl	80015ac <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d90c      	bls.n	8001ae8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e015      	b.n	8001b14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1e4      	bne.n	8001ac0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	223f      	movs	r2, #63	; 0x3f
 8001afc:	409a      	lsls	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00c      	b.n	8001b54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	; (8001da8 <HAL_DMA_IRQHandler+0x248>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a8e      	ldr	r2, [pc, #568]	; (8001dac <HAL_DMA_IRQHandler+0x24c>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0204 	bic.w	r2, r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb8:	2208      	movs	r2, #8
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	f043 0201 	orr.w	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d012      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	2201      	movs	r2, #1
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f043 0202 	orr.w	r2, r3, #2
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2204      	movs	r2, #4
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d00b      	beq.n	8001c38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	2204      	movs	r2, #4
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	f043 0204 	orr.w	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d043      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03c      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d018      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d108      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d024      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
 8001c8e:	e01f      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01b      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	e016      	b.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0208 	bic.w	r2, r2, #8
 8001cbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 808f 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8087 	beq.w	8001e00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d136      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0216 	bic.w	r2, r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_DMA_IRQHandler+0x1da>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0208 	bic.w	r2, r2, #8
 8001d48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	223f      	movs	r2, #63	; 0x3f
 8001d50:	409a      	lsls	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d07e      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
        }
        return;
 8001d76:	e079      	b.n	8001e6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10d      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
 8001da4:	e02c      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
 8001da6:	bf00      	nop
 8001da8:	2000001c 	.word	0x2000001c
 8001dac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e01e      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10f      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0210 	bic.w	r2, r2, #16
 8001dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d032      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d022      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2205      	movs	r2, #5
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d307      	bcc.n	8001e48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f2      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x2cc>
 8001e46:	e000      	b.n	8001e4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e6c:	bf00      	nop
    }
  }
}
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d108      	bne.n	8001eb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eb2:	e007      	b.n	8001ec4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	60da      	str	r2, [r3, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3b10      	subs	r3, #16
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <DMA_CalcBaseAndBitshift+0x64>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <DMA_CalcBaseAndBitshift+0x68>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d909      	bls.n	8001f12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f06:	f023 0303 	bic.w	r3, r3, #3
 8001f0a:	1d1a      	adds	r2, r3, #4
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f10:	e007      	b.n	8001f22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	aaaaaaab 	.word	0xaaaaaaab
 8001f38:	08007e40 	.word	0x08007e40

08001f3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11f      	bne.n	8001f96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d856      	bhi.n	800200a <DMA_CheckFifoParam+0xce>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <DMA_CheckFifoParam+0x28>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f87 	.word	0x08001f87
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	0800200b 	.word	0x0800200b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d046      	beq.n	800200e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f84:	e043      	b.n	800200e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f8e:	d140      	bne.n	8002012 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f94:	e03d      	b.n	8002012 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f9e:	d121      	bne.n	8001fe4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d837      	bhi.n	8002016 <DMA_CheckFifoParam+0xda>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <DMA_CheckFifoParam+0x70>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fc3 	.word	0x08001fc3
 8001fb4:	08001fbd 	.word	0x08001fbd
 8001fb8:	08001fd5 	.word	0x08001fd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e030      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d025      	beq.n	800201a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd2:	e022      	b.n	800201a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fdc:	d11f      	bne.n	800201e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fe2:	e01c      	b.n	800201e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d903      	bls.n	8001ff2 <DMA_CheckFifoParam+0xb6>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d003      	beq.n	8001ff8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ff0:	e018      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff6:	e015      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00e      	beq.n	8002022 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
      break;
 8002008:	e00b      	b.n	8002022 <DMA_CheckFifoParam+0xe6>
      break;
 800200a:	bf00      	nop
 800200c:	e00a      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
 8002010:	e008      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e006      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002016:	bf00      	nop
 8002018:	e004      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e002      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;   
 800201e:	bf00      	nop
 8002020:	e000      	b.n	8002024 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
    }
  } 
  
  return status; 
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e159      	b.n	8002304 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8148 	bne.w	80022fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d005      	beq.n	8002086 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002082:	2b02      	cmp	r3, #2
 8002084:	d130      	bne.n	80020e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020bc:	2201      	movs	r2, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	091b      	lsrs	r3, r3, #4
 80020d2:	f003 0201 	and.w	r2, r3, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d017      	beq.n	8002124 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d123      	bne.n	8002178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3208      	adds	r2, #8
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a2 	beq.w	80022fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <HAL_GPIO_Init+0x2e8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d6:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_GPIO_Init+0x2ec>)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a49      	ldr	r2, [pc, #292]	; (8002324 <HAL_GPIO_Init+0x2f0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x202>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a48      	ldr	r2, [pc, #288]	; (8002328 <HAL_GPIO_Init+0x2f4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x1fe>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a47      	ldr	r2, [pc, #284]	; (800232c <HAL_GPIO_Init+0x2f8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x1fa>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a46      	ldr	r2, [pc, #280]	; (8002330 <HAL_GPIO_Init+0x2fc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x1f6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a45      	ldr	r2, [pc, #276]	; (8002334 <HAL_GPIO_Init+0x300>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x1f2>
 8002222:	2304      	movs	r3, #4
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x204>
 8002226:	2307      	movs	r3, #7
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x204>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x204>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x204>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x204>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002248:	4935      	ldr	r1, [pc, #212]	; (8002320 <HAL_GPIO_Init+0x2ec>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_GPIO_Init+0x304>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <HAL_GPIO_Init+0x304>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002280:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <HAL_GPIO_Init+0x304>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022aa:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ce:	4a1a      	ldr	r2, [pc, #104]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <HAL_GPIO_Init+0x304>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f aea2 	bls.w	8002050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40013800 	.word	0x40013800
 8002324:	40020000 	.word	0x40020000
 8002328:	40020400 	.word	0x40020400
 800232c:	40020800 	.word	0x40020800
 8002330:	40020c00 	.word	0x40020c00
 8002334:	40021000 	.word	0x40021000
 8002338:	40013c00 	.word	0x40013c00

0800233c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e001      	b.n	800235e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002388:	e003      	b.n	8002392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238a:	887b      	ldrh	r3, [r7, #2]
 800238c:	041a      	lsls	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f806 	bl	80023d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e267      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d075      	beq.n	80024f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002406:	4b88      	ldr	r3, [pc, #544]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b04      	cmp	r3, #4
 8002410:	d00c      	beq.n	800242c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002412:	4b85      	ldr	r3, [pc, #532]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241a:	2b08      	cmp	r3, #8
 800241c:	d112      	bne.n	8002444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b82      	ldr	r3, [pc, #520]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800242a:	d10b      	bne.n	8002444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	4b7e      	ldr	r3, [pc, #504]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d05b      	beq.n	80024f0 <HAL_RCC_OscConfig+0x108>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d157      	bne.n	80024f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e242      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d106      	bne.n	800245c <HAL_RCC_OscConfig+0x74>
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xb0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x98>
 8002466:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6f      	ldr	r2, [pc, #444]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xb0>
 8002480:	4b69      	ldr	r3, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a68      	ldr	r2, [pc, #416]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a65      	ldr	r2, [pc, #404]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff f884 	bl	80015ac <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff f880 	bl	80015ac <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e207      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xc0>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff f870 	bl	80015ac <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff f86c 	bl	80015ac <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1f3      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b51      	ldr	r3, [pc, #324]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0xe8>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d063      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fe:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002516:	4b44      	ldr	r3, [pc, #272]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x152>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1c7      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4937      	ldr	r1, [pc, #220]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b34      	ldr	r3, [pc, #208]	; (800262c <HAL_RCC_OscConfig+0x244>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7ff f825 	bl	80015ac <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff f821 	bl	80015ac <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1a8      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4925      	ldr	r1, [pc, #148]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_OscConfig+0x244>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff f804 	bl	80015ac <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7ff f800 	bl	80015ac <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e187      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d036      	beq.n	8002640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d016      	beq.n	8002608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_RCC_OscConfig+0x248>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe ffe4 	bl	80015ac <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e8:	f7fe ffe0 	bl	80015ac <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e167      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x240>)
 80025fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x200>
 8002606:	e01b      	b.n	8002640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_OscConfig+0x248>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7fe ffcd 	bl	80015ac <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	e00e      	b.n	8002634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002616:	f7fe ffc9 	bl	80015ac <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d907      	bls.n	8002634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e150      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
 8002628:	40023800 	.word	0x40023800
 800262c:	42470000 	.word	0x42470000
 8002630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002634:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ea      	bne.n	8002616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8097 	beq.w	800277c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b81      	ldr	r3, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b77      	ldr	r3, [pc, #476]	; (800285c <HAL_RCC_OscConfig+0x474>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b74      	ldr	r3, [pc, #464]	; (800285c <HAL_RCC_OscConfig+0x474>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a73      	ldr	r2, [pc, #460]	; (800285c <HAL_RCC_OscConfig+0x474>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe ff89 	bl	80015ac <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7fe ff85 	bl	80015ac <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e10c      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_OscConfig+0x474>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x2ea>
 80026c4:	4b64      	ldr	r3, [pc, #400]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a63      	ldr	r2, [pc, #396]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	e01c      	b.n	800270c <HAL_RCC_OscConfig+0x324>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x30c>
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	4a5e      	ldr	r2, [pc, #376]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	6713      	str	r3, [r2, #112]	; 0x70
 80026e6:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5b      	ldr	r2, [pc, #364]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0x324>
 80026f4:	4b58      	ldr	r3, [pc, #352]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	4b55      	ldr	r3, [pc, #340]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 0304 	bic.w	r3, r3, #4
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe ff4a 	bl	80015ac <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe ff46 	bl	80015ac <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0cb      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0ee      	beq.n	800271c <HAL_RCC_OscConfig+0x334>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002740:	f7fe ff34 	bl	80015ac <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe ff30 	bl	80015ac <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0b5      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ee      	bne.n	8002748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a38      	ldr	r2, [pc, #224]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a1 	beq.w	80028c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002786:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b08      	cmp	r3, #8
 8002790:	d05c      	beq.n	800284c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d141      	bne.n	800281e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x478>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe ff04 	bl	80015ac <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe ff00 	bl	80015ac <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e087      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	019b      	lsls	r3, r3, #6
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	3b01      	subs	r3, #1
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	491b      	ldr	r1, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x478>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fed9 	bl	80015ac <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fed5 	bl	80015ac <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e05c      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x416>
 800281c:	e054      	b.n	80028c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_RCC_OscConfig+0x478>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fec2 	bl	80015ac <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe febe 	bl	80015ac <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e045      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x470>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x444>
 800284a:	e03d      	b.n	80028c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e038      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
 8002858:	40023800 	.word	0x40023800
 800285c:	40007000 	.word	0x40007000
 8002860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x4ec>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d028      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d121      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d11a      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800289a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800

080028d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0cc      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d90c      	bls.n	8002914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0b8      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800292c:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002944:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800294e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	494d      	ldr	r1, [pc, #308]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d044      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b47      	ldr	r3, [pc, #284]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d119      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d003      	beq.n	8002996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	2b03      	cmp	r3, #3
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002996:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e067      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4934      	ldr	r1, [pc, #208]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c8:	f7fe fdf0 	bl	80015ac <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fe fdec 	bl	80015ac <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e04f      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d20c      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4916      	ldr	r1, [pc, #88]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a5e:	f000 f821 	bl	8002aa4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	490a      	ldr	r1, [pc, #40]	; (8002a98 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	5ccb      	ldrb	r3, [r1, r3]
 8002a72:	fa22 f303 	lsr.w	r3, r2, r3
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fd50 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00
 8002a94:	40023800 	.word	0x40023800
 8002a98:	08007e28 	.word	0x08007e28
 8002a9c:	2000001c 	.word	0x2000001c
 8002aa0:	20000020 	.word	0x20000020

08002aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa8:	b090      	sub	sp, #64	; 0x40
 8002aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	f200 80a1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad6:	e09b      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ada:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002adc:	e09b      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ade:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ae2:	e098      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aee:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afa:	4b4a      	ldr	r3, [pc, #296]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	2200      	movs	r2, #0
 8002b02:	623b      	str	r3, [r7, #32]
 8002b04:	627a      	str	r2, [r7, #36]	; 0x24
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b10:	fb03 f201 	mul.w	r2, r3, r1
 8002b14:	2300      	movs	r3, #0
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a43      	ldr	r2, [pc, #268]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b24:	460a      	mov	r2, r1
 8002b26:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2a:	4413      	add	r3, r2
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	2200      	movs	r2, #0
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	61fa      	str	r2, [r7, #28]
 8002b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b3e:	f7fd fba7 	bl	8000290 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4613      	mov	r3, r2
 8002b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4a:	e053      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	2200      	movs	r2, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	617a      	str	r2, [r7, #20]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b5e:	f04f 0b00 	mov.w	fp, #0
 8002b62:	4652      	mov	r2, sl
 8002b64:	465b      	mov	r3, fp
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	0159      	lsls	r1, r3, #5
 8002b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b74:	0150      	lsls	r0, r2, #5
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b96:	ebb2 0408 	subs.w	r4, r2, r8
 8002b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	00eb      	lsls	r3, r5, #3
 8002ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bac:	00e2      	lsls	r2, r4, #3
 8002bae:	4614      	mov	r4, r2
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	eb14 030a 	adds.w	r3, r4, sl
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	eb45 030b 	adc.w	r3, r5, fp
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	2200      	movs	r2, #0
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be8:	f7fd fb52 	bl	8000290 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3740      	adds	r7, #64	; 0x40
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	017d7840 	.word	0x017d7840

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2000001c 	.word	0x2000001c

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c4c:	f7ff fff0 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0a9b      	lsrs	r3, r3, #10
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08007e38 	.word	0x08007e38

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c74:	f7ff ffdc 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0b5b      	lsrs	r3, r3, #13
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08007e38 	.word	0x08007e38

08002c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e07b      	b.n	8002da2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cba:	d009      	beq.n	8002cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
 8002cc2:	e005      	b.n	8002cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe f9dc 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	ea42 0103 	orr.w	r1, r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0104 	and.w	r1, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f003 0210 	and.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b088      	sub	sp, #32
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_SPI_Transmit+0x22>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e126      	b.n	800301a <HAL_SPI_Transmit+0x270>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dd4:	f7fe fbea 	bl	80015ac <HAL_GetTick>
 8002dd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dee:	e10b      	b.n	8003008 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_SPI_Transmit+0x52>
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e00:	e102      	b.n	8003008 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2203      	movs	r2, #3
 8002e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e48:	d10f      	bne.n	8002e6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	d007      	beq.n	8002e88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e90:	d14b      	bne.n	8002f2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_Transmit+0xf6>
 8002e9a:	8afb      	ldrh	r3, [r7, #22]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d13e      	bne.n	8002f1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ec4:	e02b      	b.n	8002f1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d112      	bne.n	8002efa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	1c9a      	adds	r2, r3, #2
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ef8:	e011      	b.n	8002f1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efa:	f7fe fb57 	bl	80015ac <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d803      	bhi.n	8002f12 <HAL_SPI_Transmit+0x168>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d102      	bne.n	8002f18 <HAL_SPI_Transmit+0x16e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f1c:	e074      	b.n	8003008 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ce      	bne.n	8002ec6 <HAL_SPI_Transmit+0x11c>
 8002f28:	e04c      	b.n	8002fc4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_Transmit+0x18e>
 8002f32:	8afb      	ldrh	r3, [r7, #22]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d140      	bne.n	8002fba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f5e:	e02c      	b.n	8002fba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d113      	bne.n	8002f96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	7812      	ldrb	r2, [r2, #0]
 8002f7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f94:	e011      	b.n	8002fba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f96:	f7fe fb09 	bl	80015ac <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d803      	bhi.n	8002fae <HAL_SPI_Transmit+0x204>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d102      	bne.n	8002fb4 <HAL_SPI_Transmit+0x20a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fb8:	e026      	b.n	8003008 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1cd      	bne.n	8002f60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fbcb 	bl	8003764 <SPI_EndRxTxTransaction>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e000      	b.n	8003008 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003006:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003018:	7ffb      	ldrb	r3, [r7, #31]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b088      	sub	sp, #32
 8003026:	af02      	add	r7, sp, #8
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	603b      	str	r3, [r7, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800303e:	d112      	bne.n	8003066 <HAL_SPI_Receive+0x44>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10e      	bne.n	8003066 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2204      	movs	r2, #4
 800304c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f8f1 	bl	8003244 <HAL_SPI_TransmitReceive>
 8003062:	4603      	mov	r3, r0
 8003064:	e0ea      	b.n	800323c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_SPI_Receive+0x52>
 8003070:	2302      	movs	r3, #2
 8003072:	e0e3      	b.n	800323c <HAL_SPI_Receive+0x21a>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307c:	f7fe fa96 	bl	80015ac <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003092:	e0ca      	b.n	800322a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_SPI_Receive+0x7e>
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030a4:	e0c1      	b.n	800322a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2204      	movs	r2, #4
 80030aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ec:	d10f      	bne.n	800310e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d007      	beq.n	800312c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d162      	bne.n	80031fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003134:	e02e      	b.n	8003194 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d115      	bne.n	8003170 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f103 020c 	add.w	r2, r3, #12
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800316e:	e011      	b.n	8003194 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003170:	f7fe fa1c 	bl	80015ac <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d803      	bhi.n	8003188 <HAL_SPI_Receive+0x166>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d102      	bne.n	800318e <HAL_SPI_Receive+0x16c>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003192:	e04a      	b.n	800322a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1cb      	bne.n	8003136 <HAL_SPI_Receive+0x114>
 800319e:	e031      	b.n	8003204 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d113      	bne.n	80031d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	b292      	uxth	r2, r2
 80031ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031d4:	e011      	b.n	80031fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d6:	f7fe f9e9 	bl	80015ac <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d803      	bhi.n	80031ee <HAL_SPI_Receive+0x1cc>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d102      	bne.n	80031f4 <HAL_SPI_Receive+0x1d2>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031f8:	e017      	b.n	800322a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1cd      	bne.n	80031a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	6839      	ldr	r1, [r7, #0]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fa45 	bl	8003698 <SPI_EndRxTransaction>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
 8003226:	e000      	b.n	800322a <HAL_SPI_Receive+0x208>
  }

error :
 8003228:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800323a:	7dfb      	ldrb	r3, [r7, #23]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003252:	2301      	movs	r3, #1
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_SPI_TransmitReceive+0x26>
 8003266:	2302      	movs	r3, #2
 8003268:	e18a      	b.n	8003580 <HAL_SPI_TransmitReceive+0x33c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003272:	f7fe f99b 	bl	80015ac <HAL_GetTick>
 8003276:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800328c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00f      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x70>
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329a:	d107      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x68>
 80032a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d003      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032b2:	e15b      	b.n	800356c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x82>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x82>
 80032c0:	887b      	ldrh	r3, [r7, #2]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032cc:	e14e      	b.n	800356c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2205      	movs	r2, #5
 80032de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	887a      	ldrh	r2, [r7, #2]
 80032f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	887a      	ldrh	r2, [r7, #2]
 800330a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d007      	beq.n	8003336 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333e:	d178      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_TransmitReceive+0x10a>
 8003348:	8b7b      	ldrh	r3, [r7, #26]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d166      	bne.n	800341c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	1c9a      	adds	r2, r3, #2
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003372:	e053      	b.n	800341c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d11b      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x176>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d016      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x176>
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d113      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	1c9a      	adds	r2, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d119      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x1b8>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	b292      	uxth	r2, r2
 80033de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	1c9a      	adds	r2, r3, #2
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033f8:	2301      	movs	r3, #1
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033fc:	f7fe f8d6 	bl	80015ac <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003408:	429a      	cmp	r2, r3
 800340a:	d807      	bhi.n	800341c <HAL_SPI_TransmitReceive+0x1d8>
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d003      	beq.n	800341c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800341a:	e0a7      	b.n	800356c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1a6      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x130>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1a1      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x130>
 8003430:	e07c      	b.n	800352c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_TransmitReceive+0x1fc>
 800343a:	8b7b      	ldrh	r3, [r7, #26]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d16b      	bne.n	8003518 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	330c      	adds	r3, #12
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003466:	e057      	b.n	8003518 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d11c      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x26c>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d017      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x26c>
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003482:	2b01      	cmp	r3, #1
 8003484:	d114      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	7812      	ldrb	r2, [r2, #0]
 8003492:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d119      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x2ae>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d014      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034ee:	2301      	movs	r3, #1
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034f2:	f7fe f85b 	bl	80015ac <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034fe:	429a      	cmp	r2, r3
 8003500:	d803      	bhi.n	800350a <HAL_SPI_TransmitReceive+0x2c6>
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d102      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x2cc>
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003516:	e029      	b.n	800356c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1a2      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x224>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d19d      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f917 	bl	8003764 <SPI_EndRxTxTransaction>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003548:	e010      	b.n	800356c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	e000      	b.n	800356c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800356a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800357c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003580:	4618      	mov	r0, r3
 8003582:	3730      	adds	r7, #48	; 0x30
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003598:	f7fe f808 	bl	80015ac <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	4413      	add	r3, r2
 80035a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035a8:	f7fe f800 	bl	80015ac <HAL_GetTick>
 80035ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035ae:	4b39      	ldr	r3, [pc, #228]	; (8003694 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	015b      	lsls	r3, r3, #5
 80035b4:	0d1b      	lsrs	r3, r3, #20
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035be:	e054      	b.n	800366a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d050      	beq.n	800366a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035c8:	f7fd fff0 	bl	80015ac <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d902      	bls.n	80035de <SPI_WaitFlagStateUntilTimeout+0x56>
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d13d      	bne.n	800365a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f6:	d111      	bne.n	800361c <SPI_WaitFlagStateUntilTimeout+0x94>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003600:	d004      	beq.n	800360c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360a:	d107      	bne.n	800361c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003624:	d10f      	bne.n	8003646 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e017      	b.n	800368a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3b01      	subs	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d19b      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000001c 	.word	0x2000001c

08003698 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ac:	d111      	bne.n	80036d2 <SPI_EndRxTransaction+0x3a>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b6:	d004      	beq.n	80036c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d107      	bne.n	80036d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036da:	d12a      	bne.n	8003732 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e4:	d012      	beq.n	800370c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff ff49 	bl	8003588 <SPI_WaitFlagStateUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02d      	beq.n	8003758 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e026      	b.n	800375a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	2101      	movs	r1, #1
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7ff ff36 	bl	8003588 <SPI_WaitFlagStateUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d01a      	beq.n	8003758 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e013      	b.n	800375a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2200      	movs	r2, #0
 800373a:	2101      	movs	r1, #1
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff ff23 	bl	8003588 <SPI_WaitFlagStateUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e000      	b.n	800375a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <SPI_EndRxTxTransaction+0x7c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <SPI_EndRxTxTransaction+0x80>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	0d5b      	lsrs	r3, r3, #21
 800377c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800378e:	d112      	bne.n	80037b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff fef4 	bl	8003588 <SPI_WaitFlagStateUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d016      	beq.n	80037d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e00f      	b.n	80037d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	3b01      	subs	r3, #1
 80037c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d0f2      	beq.n	80037b6 <SPI_EndRxTxTransaction+0x52>
 80037d0:	e000      	b.n	80037d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80037d2:	bf00      	nop
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	2000001c 	.word	0x2000001c
 80037e4:	165e9f81 	.word	0x165e9f81

080037e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e03f      	b.n	800387a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fc92 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800382a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 ff9b 	bl	8004768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08a      	sub	sp, #40	; 0x28
 8003886:	af02      	add	r7, sp, #8
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d17c      	bne.n	800399c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_UART_Transmit+0x2c>
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e075      	b.n	800399e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_UART_Transmit+0x3e>
 80038bc:	2302      	movs	r3, #2
 80038be:	e06e      	b.n	800399e <HAL_UART_Transmit+0x11c>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2221      	movs	r2, #33	; 0x21
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038d6:	f7fd fe69 	bl	80015ac <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f0:	d108      	bne.n	8003904 <HAL_UART_Transmit+0x82>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d104      	bne.n	8003904 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e003      	b.n	800390c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003914:	e02a      	b.n	800396c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	2180      	movs	r1, #128	; 0x80
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fc53 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e036      	b.n	800399e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3302      	adds	r3, #2
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e007      	b.n	800395e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3301      	adds	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1cf      	bne.n	8003916 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fc23 	bl	80041cc <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e006      	b.n	800399e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08c      	sub	sp, #48	; 0x30
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	4613      	mov	r3, r2
 80039b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d152      	bne.n	8003a66 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e04b      	b.n	8003a68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80039da:	2302      	movs	r3, #2
 80039dc:	e044      	b.n	8003a68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80039ec:	88fb      	ldrh	r3, [r7, #6]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fc58 	bl	80042a8 <UART_Start_Receive_DMA>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80039fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d12c      	bne.n	8003a60 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d125      	bne.n	8003a5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	617b      	str	r3, [r7, #20]
   return(result);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f043 0310 	orr.w	r3, r3, #16
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a44:	627a      	str	r2, [r7, #36]	; 0x24
 8003a46:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003a58:	e002      	b.n	8003a60 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a64:	e000      	b.n	8003a68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3730      	adds	r7, #48	; 0x30
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b0ba      	sub	sp, #232	; 0xe8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x66>
 8003ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fd8f 	bl	80045f2 <UART_Receive_IT>
      return;
 8003ad4:	e256      	b.n	8003f84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80de 	beq.w	8003c9c <HAL_UART_IRQHandler+0x22c>
 8003ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80d1 	beq.w	8003c9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_UART_IRQHandler+0xae>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_UART_IRQHandler+0xd2>
 8003b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0202 	orr.w	r2, r3, #2
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_UART_IRQHandler+0xf6>
 8003b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d011      	beq.n	8003b96 <HAL_UART_IRQHandler+0x126>
 8003b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d105      	bne.n	8003b8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 81ed 	beq.w	8003f7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_UART_IRQHandler+0x14e>
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fd1a 	bl	80045f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <HAL_UART_IRQHandler+0x17a>
 8003be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d04f      	beq.n	8003c8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fc22 	bl	8004434 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d141      	bne.n	8003c82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1d9      	bne.n	8003bfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d013      	beq.n	8003c7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	4a7d      	ldr	r2, [pc, #500]	; (8003e4c <HAL_UART_IRQHandler+0x3dc>)
 8003c58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fd ff5c 	bl	8001b1c <HAL_DMA_Abort_IT>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c74:	4610      	mov	r0, r2
 8003c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	e00e      	b.n	8003c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9a4 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	e00a      	b.n	8003c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9a0 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	e006      	b.n	8003c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f99c 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c96:	e170      	b.n	8003f7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	bf00      	nop
    return;
 8003c9a:	e16e      	b.n	8003f7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f040 814a 	bne.w	8003f3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8143 	beq.w	8003f3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 813c 	beq.w	8003f3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	f040 80b4 	bne.w	8003e50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8140 	beq.w	8003f7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d06:	429a      	cmp	r2, r3
 8003d08:	f080 8139 	bcs.w	8003f7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	f000 8088 	beq.w	8003e32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1d9      	bne.n	8003d22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e1      	bne.n	8003d6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3314      	adds	r3, #20
 8003db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3314      	adds	r3, #20
 8003dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e3      	bne.n	8003daa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e02:	f023 0310 	bic.w	r3, r3, #16
 8003e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e14:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e3      	bne.n	8003df0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fd fe05 	bl	8001a3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fc ff38 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e48:	e099      	b.n	8003f7e <HAL_UART_IRQHandler+0x50e>
 8003e4a:	bf00      	nop
 8003e4c:	080044fb 	.word	0x080044fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 808b 	beq.w	8003f82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8086 	beq.w	8003f82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e3      	bne.n	8003e76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0310 	bic.w	r3, r3, #16
 8003f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f18:	61fa      	str	r2, [r7, #28]
 8003f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	69b9      	ldr	r1, [r7, #24]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	617b      	str	r3, [r7, #20]
   return(result);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e3      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fc fec0 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f38:	e023      	b.n	8003f82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_UART_IRQHandler+0x4ea>
 8003f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fae5 	bl	8004522 <UART_Transmit_IT>
    return;
 8003f58:	e014      	b.n	8003f84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00e      	beq.n	8003f84 <HAL_UART_IRQHandler+0x514>
 8003f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fb25 	bl	80045c2 <UART_EndTransmit_IT>
    return;
 8003f78:	e004      	b.n	8003f84 <HAL_UART_IRQHandler+0x514>
    return;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_UART_IRQHandler+0x514>
      return;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_UART_IRQHandler+0x514>
      return;
 8003f82:	bf00      	nop
  }
}
 8003f84:	37e8      	adds	r7, #232	; 0xe8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop

08003f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b09c      	sub	sp, #112	; 0x70
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d172      	bne.n	80040de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	330c      	adds	r3, #12
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004014:	66bb      	str	r3, [r7, #104]	; 0x68
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800401e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004020:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e5      	bne.n	8003ffe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3314      	adds	r3, #20
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	667b      	str	r3, [r7, #100]	; 0x64
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004052:	647a      	str	r2, [r7, #68]	; 0x44
 8004054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	623b      	str	r3, [r7, #32]
   return(result);
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407c:	663b      	str	r3, [r7, #96]	; 0x60
 800407e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3314      	adds	r3, #20
 8004084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004086:	633a      	str	r2, [r7, #48]	; 0x30
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800408c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e5      	bne.n	8004066 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d119      	bne.n	80040de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 0310 	bic.w	r3, r3, #16
 80040c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ca:	61fa      	str	r2, [r7, #28]
 80040cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	617b      	str	r3, [r7, #20]
   return(result);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d106      	bne.n	80040f4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040ea:	4619      	mov	r1, r3
 80040ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040ee:	f7fc fde3 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040f2:	e002      	b.n	80040fa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80040f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040f6:	f7ff ff53 	bl	8003fa0 <HAL_UART_RxCpltCallback>
}
 80040fa:	bf00      	nop
 80040fc:	3770      	adds	r7, #112	; 0x70
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	d108      	bne.n	800412a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	4619      	mov	r1, r3
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7fc fdc8 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004128:	e002      	b.n	8004130 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff42 	bl	8003fb4 <HAL_UART_RxHalfCpltCallback>
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b21      	cmp	r3, #33	; 0x21
 800416a:	d108      	bne.n	800417e <UART_DMAError+0x46>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2200      	movs	r2, #0
 8004176:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004178:	68b8      	ldr	r0, [r7, #8]
 800417a:	f000 f933 	bl	80043e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b22      	cmp	r3, #34	; 0x22
 800419e:	d108      	bne.n	80041b2 <UART_DMAError+0x7a>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2200      	movs	r2, #0
 80041aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80041ac:	68b8      	ldr	r0, [r7, #8]
 80041ae:	f000 f941 	bl	8004434 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0210 	orr.w	r2, r3, #16
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041be:	68b8      	ldr	r0, [r7, #8]
 80041c0:	f7ff ff02 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b090      	sub	sp, #64	; 0x40
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041dc:	e050      	b.n	8004280 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d04c      	beq.n	8004280 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <UART_WaitOnFlagUntilTimeout+0x30>
 80041ec:	f7fd f9de 	bl	80015ac <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d241      	bcs.n	8004280 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800421c:	637a      	str	r2, [r7, #52]	; 0x34
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	613b      	str	r3, [r7, #16]
   return(result);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	63bb      	str	r3, [r7, #56]	; 0x38
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004250:	623a      	str	r2, [r7, #32]
 8004252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	6a3a      	ldr	r2, [r7, #32]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	61bb      	str	r3, [r7, #24]
   return(result);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e00f      	b.n	80042a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	429a      	cmp	r2, r3
 800429c:	d09f      	beq.n	80041de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3740      	adds	r7, #64	; 0x40
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b098      	sub	sp, #96	; 0x60
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2222      	movs	r2, #34	; 0x22
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	4a40      	ldr	r2, [pc, #256]	; (80043d8 <UART_Start_Receive_DMA+0x130>)
 80042d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	4a3f      	ldr	r2, [pc, #252]	; (80043dc <UART_Start_Receive_DMA+0x134>)
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	4a3e      	ldr	r2, [pc, #248]	; (80043e0 <UART_Start_Receive_DMA+0x138>)
 80042e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	2200      	movs	r2, #0
 80042ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80042f0:	f107 0308 	add.w	r3, r7, #8
 80042f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3304      	adds	r3, #4
 8004300:	4619      	mov	r1, r3
 8004302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	f7fd fb40 	bl	800198c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d019      	beq.n	8004366 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	65bb      	str	r3, [r7, #88]	; 0x58
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004352:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	657b      	str	r3, [r7, #84]	; 0x54
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3314      	adds	r3, #20
 8004384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004386:	63ba      	str	r2, [r7, #56]	; 0x38
 8004388:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800438c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e5      	bne.n	8004366 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	617b      	str	r3, [r7, #20]
   return(result);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b0:	653b      	str	r3, [r7, #80]	; 0x50
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3314      	adds	r3, #20
 80043b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043ba:	627a      	str	r2, [r7, #36]	; 0x24
 80043bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6a39      	ldr	r1, [r7, #32]
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e5      	bne.n	800439a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3760      	adds	r7, #96	; 0x60
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	08003fdd 	.word	0x08003fdd
 80043dc:	08004103 	.word	0x08004103
 80043e0:	08004139 	.word	0x08004139

080043e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	61ba      	str	r2, [r7, #24]
 800440e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	613b      	str	r3, [r7, #16]
   return(result);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004428:	bf00      	nop
 800442a:	3724      	adds	r7, #36	; 0x24
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b095      	sub	sp, #84	; 0x54
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	330c      	adds	r3, #12
 800445a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800445c:	643a      	str	r2, [r7, #64]	; 0x40
 800445e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	64bb      	str	r3, [r7, #72]	; 0x48
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e5      	bne.n	8004470 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d119      	bne.n	80044e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	e853 3f00 	ldrex	r3, [r3]
 80044ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0310 	bic.w	r3, r3, #16
 80044c2:	647b      	str	r3, [r7, #68]	; 0x44
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044cc:	61ba      	str	r2, [r7, #24]
 80044ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6979      	ldr	r1, [r7, #20]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	613b      	str	r3, [r7, #16]
   return(result);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e5      	bne.n	80044ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044ee:	bf00      	nop
 80044f0:	3754      	adds	r7, #84	; 0x54
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff fd57 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b21      	cmp	r3, #33	; 0x21
 8004534:	d13e      	bne.n	80045b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453e:	d114      	bne.n	800456a <UART_Transmit_IT+0x48>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d110      	bne.n	800456a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800455c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	1c9a      	adds	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	621a      	str	r2, [r3, #32]
 8004568:	e008      	b.n	800457c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	1c59      	adds	r1, r3, #1
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6211      	str	r1, [r2, #32]
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4619      	mov	r1, r3
 800458a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10f      	bne.n	80045b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800459e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fcd2 	bl	8003f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b08c      	sub	sp, #48	; 0x30
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b22      	cmp	r3, #34	; 0x22
 8004604:	f040 80ab 	bne.w	800475e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004610:	d117      	bne.n	8004642 <UART_Receive_IT+0x50>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d113      	bne.n	8004642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	b29a      	uxth	r2, r3
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	1c9a      	adds	r2, r3, #2
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
 8004640:	e026      	b.n	8004690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004654:	d007      	beq.n	8004666 <UART_Receive_IT+0x74>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <UART_Receive_IT+0x82>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e008      	b.n	8004686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004680:	b2da      	uxtb	r2, r3
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4619      	mov	r1, r3
 800469e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d15a      	bne.n	800475a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0220 	bic.w	r2, r2, #32
 80046b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d135      	bne.n	8004750 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	613b      	str	r3, [r7, #16]
   return(result);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f023 0310 	bic.w	r3, r3, #16
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470a:	623a      	str	r2, [r7, #32]
 800470c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	69f9      	ldr	r1, [r7, #28]
 8004710:	6a3a      	ldr	r2, [r7, #32]
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	61bb      	str	r3, [r7, #24]
   return(result);
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e5      	bne.n	80046ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b10      	cmp	r3, #16
 800472a:	d10a      	bne.n	8004742 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fc fab5 	bl	8000cb8 <HAL_UARTEx_RxEventCallback>
 800474e:	e002      	b.n	8004756 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fc25 	bl	8003fa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e002      	b.n	8004760 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
  }
}
 8004760:	4618      	mov	r0, r3
 8004762:	3730      	adds	r7, #48	; 0x30
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800476c:	b0c0      	sub	sp, #256	; 0x100
 800476e:	af00      	add	r7, sp, #0
 8004770:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	ea40 0301 	orr.w	r3, r0, r1
 8004790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	431a      	orrs	r2, r3
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047c0:	f021 010c 	bic.w	r1, r1, #12
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047ce:	430b      	orrs	r3, r1
 80047d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	6999      	ldr	r1, [r3, #24]
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	ea40 0301 	orr.w	r3, r0, r1
 80047ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b8f      	ldr	r3, [pc, #572]	; (8004a34 <UART_SetConfig+0x2cc>)
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d005      	beq.n	8004808 <UART_SetConfig+0xa0>
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b8d      	ldr	r3, [pc, #564]	; (8004a38 <UART_SetConfig+0x2d0>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d104      	bne.n	8004812 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7fe fa32 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 800480c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004810:	e003      	b.n	800481a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004812:	f7fe fa19 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8004816:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	f040 810c 	bne.w	8004a40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482c:	2200      	movs	r2, #0
 800482e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004832:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004836:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800483a:	4622      	mov	r2, r4
 800483c:	462b      	mov	r3, r5
 800483e:	1891      	adds	r1, r2, r2
 8004840:	65b9      	str	r1, [r7, #88]	; 0x58
 8004842:	415b      	adcs	r3, r3
 8004844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004846:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800484a:	4621      	mov	r1, r4
 800484c:	eb12 0801 	adds.w	r8, r2, r1
 8004850:	4629      	mov	r1, r5
 8004852:	eb43 0901 	adc.w	r9, r3, r1
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800486a:	4690      	mov	r8, r2
 800486c:	4699      	mov	r9, r3
 800486e:	4623      	mov	r3, r4
 8004870:	eb18 0303 	adds.w	r3, r8, r3
 8004874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004878:	462b      	mov	r3, r5
 800487a:	eb49 0303 	adc.w	r3, r9, r3
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800488e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004892:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004896:	460b      	mov	r3, r1
 8004898:	18db      	adds	r3, r3, r3
 800489a:	653b      	str	r3, [r7, #80]	; 0x50
 800489c:	4613      	mov	r3, r2
 800489e:	eb42 0303 	adc.w	r3, r2, r3
 80048a2:	657b      	str	r3, [r7, #84]	; 0x54
 80048a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048ac:	f7fb fcf0 	bl	8000290 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <UART_SetConfig+0x2d4>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	011c      	lsls	r4, r3, #4
 80048be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048d0:	4642      	mov	r2, r8
 80048d2:	464b      	mov	r3, r9
 80048d4:	1891      	adds	r1, r2, r2
 80048d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80048d8:	415b      	adcs	r3, r3
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048e0:	4641      	mov	r1, r8
 80048e2:	eb12 0a01 	adds.w	sl, r2, r1
 80048e6:	4649      	mov	r1, r9
 80048e8:	eb43 0b01 	adc.w	fp, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004900:	4692      	mov	sl, r2
 8004902:	469b      	mov	fp, r3
 8004904:	4643      	mov	r3, r8
 8004906:	eb1a 0303 	adds.w	r3, sl, r3
 800490a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800490e:	464b      	mov	r3, r9
 8004910:	eb4b 0303 	adc.w	r3, fp, r3
 8004914:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004924:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004928:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800492c:	460b      	mov	r3, r1
 800492e:	18db      	adds	r3, r3, r3
 8004930:	643b      	str	r3, [r7, #64]	; 0x40
 8004932:	4613      	mov	r3, r2
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	647b      	str	r3, [r7, #68]	; 0x44
 800493a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800493e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004942:	f7fb fca5 	bl	8000290 <__aeabi_uldivmod>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4611      	mov	r1, r2
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <UART_SetConfig+0x2d4>)
 800494e:	fba3 2301 	umull	r2, r3, r3, r1
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2264      	movs	r2, #100	; 0x64
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	1acb      	subs	r3, r1, r3
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004964:	fba3 2302 	umull	r2, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004970:	441c      	add	r4, r3
 8004972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800497c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004980:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004984:	4642      	mov	r2, r8
 8004986:	464b      	mov	r3, r9
 8004988:	1891      	adds	r1, r2, r2
 800498a:	63b9      	str	r1, [r7, #56]	; 0x38
 800498c:	415b      	adcs	r3, r3
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004990:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004994:	4641      	mov	r1, r8
 8004996:	1851      	adds	r1, r2, r1
 8004998:	6339      	str	r1, [r7, #48]	; 0x30
 800499a:	4649      	mov	r1, r9
 800499c:	414b      	adcs	r3, r1
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049ac:	4659      	mov	r1, fp
 80049ae:	00cb      	lsls	r3, r1, #3
 80049b0:	4651      	mov	r1, sl
 80049b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b6:	4651      	mov	r1, sl
 80049b8:	00ca      	lsls	r2, r1, #3
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	4603      	mov	r3, r0
 80049c0:	4642      	mov	r2, r8
 80049c2:	189b      	adds	r3, r3, r2
 80049c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049c8:	464b      	mov	r3, r9
 80049ca:	460a      	mov	r2, r1
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049e8:	460b      	mov	r3, r1
 80049ea:	18db      	adds	r3, r3, r3
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ee:	4613      	mov	r3, r2
 80049f0:	eb42 0303 	adc.w	r3, r2, r3
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049fe:	f7fb fc47 	bl	8000290 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004a08:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2164      	movs	r1, #100	; 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <UART_SetConfig+0x2d4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 0207 	and.w	r2, r3, #7
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4422      	add	r2, r4
 8004a2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a30:	e105      	b.n	8004c3e <UART_SetConfig+0x4d6>
 8004a32:	bf00      	nop
 8004a34:	40011000 	.word	0x40011000
 8004a38:	40011400 	.word	0x40011400
 8004a3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a52:	4642      	mov	r2, r8
 8004a54:	464b      	mov	r3, r9
 8004a56:	1891      	adds	r1, r2, r2
 8004a58:	6239      	str	r1, [r7, #32]
 8004a5a:	415b      	adcs	r3, r3
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a62:	4641      	mov	r1, r8
 8004a64:	1854      	adds	r4, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb43 0501 	adc.w	r5, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	00eb      	lsls	r3, r5, #3
 8004a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7a:	00e2      	lsls	r2, r4, #3
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	461d      	mov	r5, r3
 8004a80:	4643      	mov	r3, r8
 8004a82:	18e3      	adds	r3, r4, r3
 8004a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a88:	464b      	mov	r3, r9
 8004a8a:	eb45 0303 	adc.w	r3, r5, r3
 8004a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aae:	4629      	mov	r1, r5
 8004ab0:	008b      	lsls	r3, r1, #2
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab8:	4621      	mov	r1, r4
 8004aba:	008a      	lsls	r2, r1, #2
 8004abc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ac0:	f7fb fbe6 	bl	8000290 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b60      	ldr	r3, [pc, #384]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011c      	lsls	r4, r3, #4
 8004ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004adc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ae0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	61b9      	str	r1, [r7, #24]
 8004aec:	415b      	adcs	r3, r3
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af4:	4641      	mov	r1, r8
 8004af6:	1851      	adds	r1, r2, r1
 8004af8:	6139      	str	r1, [r7, #16]
 8004afa:	4649      	mov	r1, r9
 8004afc:	414b      	adcs	r3, r1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	00cb      	lsls	r3, r1, #3
 8004b10:	4651      	mov	r1, sl
 8004b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b16:	4651      	mov	r1, sl
 8004b18:	00ca      	lsls	r2, r1, #3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4642      	mov	r2, r8
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b28:	464b      	mov	r3, r9
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	eb42 0303 	adc.w	r3, r2, r3
 8004b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	008b      	lsls	r3, r1, #2
 8004b50:	4641      	mov	r1, r8
 8004b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b56:	4641      	mov	r1, r8
 8004b58:	008a      	lsls	r2, r1, #2
 8004b5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b5e:	f7fb fb97 	bl	8000290 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004b68:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	2164      	movs	r1, #100	; 0x64
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	3332      	adds	r3, #50	; 0x32
 8004b7a:	4a34      	ldr	r2, [pc, #208]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b86:	441c      	add	r4, r3
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b90:	677a      	str	r2, [r7, #116]	; 0x74
 8004b92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	1851      	adds	r1, r2, r1
 8004baa:	6039      	str	r1, [r7, #0]
 8004bac:	4649      	mov	r1, r9
 8004bae:	414b      	adcs	r3, r1
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bbe:	4659      	mov	r1, fp
 8004bc0:	00cb      	lsls	r3, r1, #3
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bc8:	4651      	mov	r1, sl
 8004bca:	00ca      	lsls	r2, r1, #3
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	189b      	adds	r3, r3, r2
 8004bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd8:	464b      	mov	r3, r9
 8004bda:	460a      	mov	r2, r1
 8004bdc:	eb42 0303 	adc.w	r3, r2, r3
 8004be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	663b      	str	r3, [r7, #96]	; 0x60
 8004bec:	667a      	str	r2, [r7, #100]	; 0x64
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	008b      	lsls	r3, r1, #2
 8004bfe:	4641      	mov	r1, r8
 8004c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c04:	4641      	mov	r1, r8
 8004c06:	008a      	lsls	r2, r1, #2
 8004c08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c0c:	f7fb fb40 	bl	8000290 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004c16:	fba3 1302 	umull	r1, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	2164      	movs	r1, #100	; 0x64
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	3332      	adds	r3, #50	; 0x32
 8004c28:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <UART_SetConfig+0x4e4>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	f003 020f 	and.w	r2, r3, #15
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4422      	add	r2, r4
 8004c3c:	609a      	str	r2, [r3, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c44:	46bd      	mov	sp, r7
 8004c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4a:	bf00      	nop
 8004c4c:	51eb851f 	.word	0x51eb851f

08004c50 <md5Init>:
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	ctx->size = (uint64_t)0;
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9c1 2300 	strd	r2, r3, [r1]

	ctx->buffer[0] = (uint32_t)A;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <md5Init+0x3c>)
 8004c6a:	609a      	str	r2, [r3, #8]
	ctx->buffer[1] = (uint32_t)B;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <md5Init+0x40>)
 8004c70:	60da      	str	r2, [r3, #12]
	ctx->buffer[2] = (uint32_t)C;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <md5Init+0x44>)
 8004c76:	611a      	str	r2, [r3, #16]
	ctx->buffer[3] = (uint32_t)D;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <md5Init+0x48>)
 8004c7c:	615a      	str	r2, [r3, #20]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	67452301 	.word	0x67452301
 8004c90:	efcdab89 	.word	0xefcdab89
 8004c94:	98badcfe 	.word	0x98badcfe
 8004c98:	10325476 	.word	0x10325476

08004c9c <md5Update>:
 * Add some amount of input to the context
 *
 * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
 * and save the result in the buffer. Also updates the overall size.
 */
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
 8004c9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ca0:	b098      	sub	sp, #96	; 0x60
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
	uint32_t input[16];
	unsigned int offset = ctx->size % 64;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
	ctx->size += (uint64_t)input_len;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	eb12 0804 	adds.w	r8, r2, r4
 8004cca:	eb43 0905 	adc.w	r9, r3, r5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	e9c3 8900 	strd	r8, r9, [r3]

	// Copy each byte in input_buffer into the next space in our context input
	for(unsigned int i = 0; i < input_len; ++i){
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cd8:	e048      	b.n	8004d6c <md5Update+0xd0>
		ctx->input[offset++] = (uint8_t)*(input_buffer + i);
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cde:	441a      	add	r2, r3
 8004ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004ce6:	7811      	ldrb	r1, [r2, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	460a      	mov	r2, r1
 8004cee:	761a      	strb	r2, [r3, #24]

		// If we've filled our context input, copy it into our local array input
		// then reset the offset to 0 and fill in a new buffer.
		// Every time we fill out a chunk, we run it through the algorithm
		// to enable some back and forth between cpu and i/o
		if(offset % 64 == 0){
 8004cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d135      	bne.n	8004d66 <md5Update+0xca>
			for(unsigned int j = 0; j < 16; ++j){
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8004cfe:	e025      	b.n	8004d4c <md5Update+0xb0>
				// Convert to little-endian
				// The local variable `input` our 512-bit chunk separated into 32-bit words
				// we can use in calculations
				input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8004d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	3303      	adds	r3, #3
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	7e1b      	ldrb	r3, [r3, #24]
 8004d0c:	061a      	lsls	r2, r3, #24
						   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8004d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3302      	adds	r3, #2
 8004d14:	68f9      	ldr	r1, [r7, #12]
 8004d16:	440b      	add	r3, r1
 8004d18:	7e1b      	ldrb	r3, [r3, #24]
 8004d1a:	041b      	lsls	r3, r3, #16
				input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8004d1c:	431a      	orrs	r2, r3
						   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8004d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	3301      	adds	r3, #1
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	440b      	add	r3, r1
 8004d28:	7e1b      	ldrb	r3, [r3, #24]
 8004d2a:	021b      	lsls	r3, r3, #8
						   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8004d2c:	4313      	orrs	r3, r2
						   (uint32_t)(ctx->input[(j * 4)]);
 8004d2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d30:	0092      	lsls	r2, r2, #2
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	440a      	add	r2, r1
 8004d36:	7e12      	ldrb	r2, [r2, #24]
						   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8004d38:	431a      	orrs	r2, r3
				input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8004d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3360      	adds	r3, #96	; 0x60
 8004d40:	443b      	add	r3, r7
 8004d42:	f843 2c4c 	str.w	r2, [r3, #-76]
			for(unsigned int j = 0; j < 16; ++j){
 8004d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d48:	3301      	adds	r3, #1
 8004d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4e:	2b0f      	cmp	r3, #15
 8004d50:	d9d6      	bls.n	8004d00 <md5Update+0x64>
			}
			md5Step(ctx->buffer, input);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3308      	adds	r3, #8
 8004d56:	f107 0214 	add.w	r2, r7, #20
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 f8d1 	bl	8004f04 <md5Step>
			offset = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(unsigned int i = 0; i < input_len; ++i){
 8004d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d68:	3301      	adds	r3, #1
 8004d6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d3b2      	bcc.n	8004cda <md5Update+0x3e>
		}
	}
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3760      	adds	r7, #96	; 0x60
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004d80 <md5Finalize>:

/*
 * Pad the current input to get to 448 bytes, append the size in bits to the very end,
 * and save the result of the final iteration into digest.
 */
void md5Finalize(MD5Context *ctx){
 8004d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d84:	b096      	sub	sp, #88	; 0x58
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
	uint32_t input[16];
	unsigned int offset = ctx->size % 64;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	4613      	mov	r3, r2
 8004d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d96:	64fb      	str	r3, [r7, #76]	; 0x4c
	unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
 8004d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9a:	2b37      	cmp	r3, #55	; 0x37
 8004d9c:	d803      	bhi.n	8004da6 <md5Finalize+0x26>
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004da4:	e002      	b.n	8004dac <md5Finalize+0x2c>
 8004da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8004dac:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill in the padding andndo the changes to size that resulted from the update
	md5Update(ctx, PADDING, padding_length);
 8004dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db0:	4953      	ldr	r1, [pc, #332]	; (8004f00 <md5Finalize+0x180>)
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff72 	bl	8004c9c <md5Update>
	ctx->size -= (uint64_t)padding_length;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	ebb2 0804 	subs.w	r8, r2, r4
 8004dca:	eb63 0905 	sbc.w	r9, r3, r5
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	e9c3 8900 	strd	r8, r9, [r3]

	// Do a final update (internal to this function)
	// Last two 32-bit words are the two halves of the size (converted from bytes to bits)
	for(unsigned int j = 0; j < 14; ++j){
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd8:	e025      	b.n	8004e26 <md5Finalize+0xa6>
		input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8004dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	3303      	adds	r3, #3
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4413      	add	r3, r2
 8004de4:	7e1b      	ldrb	r3, [r3, #24]
 8004de6:	061a      	lsls	r2, r3, #24
		           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8004de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	3302      	adds	r3, #2
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	440b      	add	r3, r1
 8004df2:	7e1b      	ldrb	r3, [r3, #24]
 8004df4:	041b      	lsls	r3, r3, #16
		input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8004df6:	431a      	orrs	r2, r3
		           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8004df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	440b      	add	r3, r1
 8004e02:	7e1b      	ldrb	r3, [r3, #24]
 8004e04:	021b      	lsls	r3, r3, #8
		           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8004e06:	4313      	orrs	r3, r2
		           (uint32_t)(ctx->input[(j * 4)]);
 8004e08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e0a:	0092      	lsls	r2, r2, #2
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	440a      	add	r2, r1
 8004e10:	7e12      	ldrb	r2, [r2, #24]
		           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8004e12:	431a      	orrs	r2, r3
		input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8004e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	3358      	adds	r3, #88	; 0x58
 8004e1a:	443b      	add	r3, r7
 8004e1c:	f843 2c50 	str.w	r2, [r3, #-80]
	for(unsigned int j = 0; j < 14; ++j){
 8004e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e22:	3301      	adds	r3, #1
 8004e24:	657b      	str	r3, [r7, #84]	; 0x54
 8004e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e28:	2b0d      	cmp	r3, #13
 8004e2a:	d9d6      	bls.n	8004dda <md5Finalize+0x5a>
	}
	input[14] = (uint32_t)(ctx->size * 8);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	643b      	str	r3, [r7, #64]	; 0x40
	input[15] = (uint32_t)((ctx->size * 8) >> 32);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	00cb      	lsls	r3, r1, #3
 8004e48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004e4c:	00c2      	lsls	r2, r0, #3
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	0018      	movs	r0, r3
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	647b      	str	r3, [r7, #68]	; 0x44

	md5Step(ctx->buffer, input);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3308      	adds	r3, #8
 8004e62:	f107 0208 	add.w	r2, r7, #8
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f84b 	bl	8004f04 <md5Step>

	// Move the result into digest (convert from little-endian)
	for(unsigned int i = 0; i < 4; ++i){
 8004e6e:	2300      	movs	r3, #0
 8004e70:	653b      	str	r3, [r7, #80]	; 0x50
 8004e72:	e03c      	b.n	8004eee <md5Finalize+0x16e>
		ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e78:	3202      	adds	r2, #2
 8004e7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	b2d1      	uxtb	r1, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	460a      	mov	r2, r1
 8004e8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e92:	3202      	adds	r2, #2
 8004e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e98:	0a1a      	lsrs	r2, r3, #8
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b2d1      	uxtb	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eb0:	3202      	adds	r2, #2
 8004eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb6:	0c1a      	lsrs	r2, r3, #16
 8004eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	b2d1      	uxtb	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ece:	3202      	adds	r2, #2
 8004ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed4:	0e1a      	lsrs	r2, r3, #24
 8004ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	3303      	adds	r3, #3
 8004edc:	b2d1      	uxtb	r1, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	for(unsigned int i = 0; i < 4; ++i){
 8004ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eea:	3301      	adds	r3, #1
 8004eec:	653b      	str	r3, [r7, #80]	; 0x50
 8004eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d9bf      	bls.n	8004e74 <md5Finalize+0xf4>
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	3758      	adds	r7, #88	; 0x58
 8004efa:	46bd      	mov	sp, r7
 8004efc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f00:	20000228 	.word	0x20000228

08004f04 <md5Step>:

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
	uint32_t AA = buffer[0];
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t BB = buffer[1];
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	623b      	str	r3, [r7, #32]
	uint32_t CC = buffer[2];
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	61fb      	str	r3, [r7, #28]
	uint32_t DD = buffer[3];
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	61bb      	str	r3, [r7, #24]

	uint32_t E;

	unsigned int j;

	for(unsigned int i = 0; i < 64; ++i){
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e06b      	b.n	8005004 <md5Step+0x100>
		switch(i / 16){
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d024      	beq.n	8004f7e <md5Step+0x7a>
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d831      	bhi.n	8004f9c <md5Step+0x98>
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <md5Step+0x3e>
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d00c      	beq.n	8004f5a <md5Step+0x56>
 8004f40:	e02c      	b.n	8004f9c <md5Step+0x98>
			case 0:
				E = F(BB, CC, DD);
 8004f42:	6a3a      	ldr	r2, [r7, #32]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	401a      	ands	r2, r3
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	43d9      	mvns	r1, r3
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	400b      	ands	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
				j = i;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	613b      	str	r3, [r7, #16]
				break;
 8004f58:	e02f      	b.n	8004fba <md5Step+0xb6>
			case 1:
				E = G(BB, CC, DD);
 8004f5a:	6a3a      	ldr	r2, [r7, #32]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	401a      	ands	r2, r3
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	43d9      	mvns	r1, r3
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	400b      	ands	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
				j = ((i * 5) + 1) % 16;
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	3301      	adds	r3, #1
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	613b      	str	r3, [r7, #16]
				break;
 8004f7c:	e01d      	b.n	8004fba <md5Step+0xb6>
			case 2:
				E = H(BB, CC, DD);
 8004f7e:	6a3a      	ldr	r2, [r7, #32]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4053      	eors	r3, r2
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4053      	eors	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
				j = ((i * 3) + 5) % 16;
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	3305      	adds	r3, #5
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	613b      	str	r3, [r7, #16]
				break;
 8004f9a:	e00e      	b.n	8004fba <md5Step+0xb6>
			default:
				E = I(BB, CC, DD);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	4053      	eors	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
				j = (i * 7) % 16;
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	613b      	str	r3, [r7, #16]
				break;
 8004fb8:	bf00      	nop
		}

		uint32_t temp = DD;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	60bb      	str	r3, [r7, #8]
		DD = CC;
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	61bb      	str	r3, [r7, #24]
		CC = BB;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	61fb      	str	r3, [r7, #28]
		BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	441a      	add	r2, r3
 8004fcc:	4920      	ldr	r1, [pc, #128]	; (8005050 <md5Step+0x14c>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fd4:	441a      	add	r2, r3
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	440b      	add	r3, r1
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	441a      	add	r2, r3
 8004fe2:	491c      	ldr	r1, [pc, #112]	; (8005054 <md5Step+0x150>)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f000 f85e 	bl	80050ae <rotateLeft>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	623b      	str	r3, [r7, #32]
		AA = temp;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
	for(unsigned int i = 0; i < 64; ++i){
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3301      	adds	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b3f      	cmp	r3, #63	; 0x3f
 8005008:	d990      	bls.n	8004f2c <md5Step+0x28>
	}

	buffer[0] += AA;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	441a      	add	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
	buffer[1] += BB;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3304      	adds	r3, #4
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	440a      	add	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
	buffer[2] += CC;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3308      	adds	r3, #8
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3308      	adds	r3, #8
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	440a      	add	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
	buffer[3] += DD;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	330c      	adds	r3, #12
 800503a:	6819      	ldr	r1, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	330c      	adds	r3, #12
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	440a      	add	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	3728      	adds	r7, #40	; 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000128 	.word	0x20000128
 8005054:	20000028 	.word	0x20000028

08005058 <md5String>:

/*
 * Functions that will return a pointer to the hash of the provided input
 */
uint8_t* md5String(char *input){
 8005058:	b5b0      	push	{r4, r5, r7, lr}
 800505a:	b09e      	sub	sp, #120	; 0x78
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	MD5Context ctx;
	md5Init(&ctx);
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fdf3 	bl	8004c50 <md5Init>
	md5Update(&ctx, (uint8_t *)input, strlen(input));
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fb f8b8 	bl	80001e0 <strlen>
 8005070:	4602      	mov	r2, r0
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fe0f 	bl	8004c9c <md5Update>
	md5Finalize(&ctx);
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fe7c 	bl	8004d80 <md5Finalize>

	uint8_t *result = malloc(16);
 8005088:	2010      	movs	r0, #16
 800508a:	f001 fc0f 	bl	80068ac <malloc>
 800508e:	4603      	mov	r3, r0
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
	memcpy(result, ctx.digest, 16);
 8005092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005094:	461d      	mov	r5, r3
 8005096:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800509a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800509c:	6028      	str	r0, [r5, #0]
 800509e:	6069      	str	r1, [r5, #4]
 80050a0:	60aa      	str	r2, [r5, #8]
 80050a2:	60eb      	str	r3, [r5, #12]
	return result;
 80050a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3778      	adds	r7, #120	; 0x78
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bdb0      	pop	{r4, r5, r7, pc}

080050ae <rotateLeft>:
}

/*
 * Rotates a 32-bit word left by n bits
 */
uint32_t rotateLeft(uint32_t x, uint32_t n){
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
	return (x << n) | (x >> (32 - n));
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f1c3 0320 	rsb	r3, r3, #32
 80050c0:	fa62 f303 	ror.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <rand_string>:


char *rand_string(char *str, size_t size)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	b092      	sub	sp, #72	; 0x48
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXZ";
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <rand_string+0x8c>)
 80050dc:	f107 040c 	add.w	r4, r7, #12
 80050e0:	461d      	mov	r5, r3
 80050e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050ee:	682b      	ldr	r3, [r5, #0]
 80050f0:	6023      	str	r3, [r4, #0]
    if (size) {
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d02b      	beq.n	8005150 <rand_string+0x80>
        --size;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	603b      	str	r3, [r7, #0]
        for (size_t n = 0; n < size; n++) {
 80050fe:	2300      	movs	r3, #0
 8005100:	647b      	str	r3, [r7, #68]	; 0x44
 8005102:	e01c      	b.n	800513e <rand_string+0x6e>
            int key = rand() % (int) (sizeof charset - 1);
 8005104:	f001 fcd0 	bl	8006aa8 <rand>
 8005108:	4602      	mov	r2, r0
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <rand_string+0x90>)
 800510c:	fb83 1302 	smull	r1, r3, r3, r2
 8005110:	4413      	add	r3, r2
 8005112:	1159      	asrs	r1, r3, #5
 8005114:	17d3      	asrs	r3, r2, #31
 8005116:	1ac9      	subs	r1, r1, r3
 8005118:	460b      	mov	r3, r1
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	440b      	add	r3, r1
 800511e:	0119      	lsls	r1, r3, #4
 8005120:	440b      	add	r3, r1
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	643b      	str	r3, [r7, #64]	; 0x40
            str[n] = charset[key];
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512a:	4413      	add	r3, r2
 800512c:	f107 010c 	add.w	r1, r7, #12
 8005130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005132:	440a      	add	r2, r1
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	701a      	strb	r2, [r3, #0]
        for (size_t n = 0; n < size; n++) {
 8005138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513a:	3301      	adds	r3, #1
 800513c:	647b      	str	r3, [r7, #68]	; 0x44
 800513e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3de      	bcc.n	8005104 <rand_string+0x34>
        }
        str[size] = '\0';
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	4413      	add	r3, r2
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
    }
    return str;
 8005150:	687b      	ldr	r3, [r7, #4]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3748      	adds	r7, #72	; 0x48
 8005156:	46bd      	mov	sp, r7
 8005158:	bdb0      	pop	{r4, r5, r7, pc}
 800515a:	bf00      	nop
 800515c:	08007df4 	.word	0x08007df4
 8005160:	a0a0a0a1 	.word	0xa0a0a0a1

08005164 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	461a      	mov	r2, r3
 8005172:	4623      	mov	r3, r4
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	4603      	mov	r3, r0
 8005178:	71bb      	strb	r3, [r7, #6]
 800517a:	460b      	mov	r3, r1
 800517c:	80bb      	strh	r3, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d902      	bls.n	800518e <socket+0x2a>
 8005188:	f04f 33ff 	mov.w	r3, #4294967295
 800518c:	e0f2      	b.n	8005374 <socket+0x210>
	switch(protocol)
 800518e:	79bb      	ldrb	r3, [r7, #6]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d005      	beq.n	80051a0 <socket+0x3c>
 8005194:	2b00      	cmp	r3, #0
 8005196:	dd11      	ble.n	80051bc <socket+0x58>
 8005198:	3b02      	subs	r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d80e      	bhi.n	80051bc <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800519e:	e011      	b.n	80051c4 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80051a0:	f107 030c 	add.w	r3, r7, #12
 80051a4:	2204      	movs	r2, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80051ac:	f000 fc84 	bl	8005ab8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d105      	bne.n	80051c2 <socket+0x5e>
 80051b6:	f06f 0302 	mvn.w	r3, #2
 80051ba:	e0db      	b.n	8005374 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80051bc:	f06f 0304 	mvn.w	r3, #4
 80051c0:	e0d8      	b.n	8005374 <socket+0x210>
	    break;
 80051c2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <socket+0x70>
 80051ce:	f06f 0305 	mvn.w	r3, #5
 80051d2:	e0cf      	b.n	8005374 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d025      	beq.n	8005226 <socket+0xc2>
	{
   	switch(protocol)
 80051da:	79bb      	ldrb	r3, [r7, #6]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d002      	beq.n	80051e6 <socket+0x82>
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d008      	beq.n	80051f6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80051e4:	e024      	b.n	8005230 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d11c      	bne.n	800522a <socket+0xc6>
 80051f0:	f06f 0305 	mvn.w	r3, #5
 80051f4:	e0be      	b.n	8005374 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d006      	beq.n	800520e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	db02      	blt.n	800520e <socket+0xaa>
 8005208:	f06f 0305 	mvn.w	r3, #5
 800520c:	e0b2      	b.n	8005374 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	db06      	blt.n	800522e <socket+0xca>
 8005220:	f06f 0305 	mvn.w	r3, #5
 8005224:	e0a6      	b.n	8005374 <socket+0x210>
   	}
   }
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <socket+0xcc>
   	      break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <socket+0xcc>
   	      break;
 800522e:	bf00      	nop
	close(sn);
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f8ac 	bl	8005390 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	3301      	adds	r3, #1
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4618      	mov	r0, r3
 8005242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005246:	f023 030f 	bic.w	r3, r3, #15
 800524a:	b25a      	sxtb	r2, r3
 800524c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005250:	4313      	orrs	r3, r2
 8005252:	b25b      	sxtb	r3, r3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4619      	mov	r1, r3
 8005258:	f000 fbe0 	bl	8005a1c <WIZCHIP_WRITE>
    #endif
	if(!port)
 800525c:	88bb      	ldrh	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d110      	bne.n	8005284 <socket+0x120>
	{
	   port = sock_any_port++;
 8005262:	4b46      	ldr	r3, [pc, #280]	; (800537c <socket+0x218>)
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	b291      	uxth	r1, r2
 800526a:	4a44      	ldr	r2, [pc, #272]	; (800537c <socket+0x218>)
 800526c:	8011      	strh	r1, [r2, #0]
 800526e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005270:	4b42      	ldr	r3, [pc, #264]	; (800537c <socket+0x218>)
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8005278:	4293      	cmp	r3, r2
 800527a:	d103      	bne.n	8005284 <socket+0x120>
 800527c:	4b3f      	ldr	r3, [pc, #252]	; (800537c <socket+0x218>)
 800527e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005282:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	3301      	adds	r3, #1
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005290:	461a      	mov	r2, r3
 8005292:	88bb      	ldrh	r3, [r7, #4]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	b29b      	uxth	r3, r3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f000 fbbd 	bl	8005a1c <WIZCHIP_WRITE>
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	3301      	adds	r3, #1
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	461a      	mov	r2, r3
 80052b0:	88bb      	ldrh	r3, [r7, #4]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f000 fbb0 	bl	8005a1c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	3301      	adds	r3, #1
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80052c8:	2101      	movs	r1, #1
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fba6 	bl	8005a1c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80052d0:	bf00      	nop
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	3301      	adds	r3, #1
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fb50 	bl	8005984 <WIZCHIP_READ>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f3      	bne.n	80052d2 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2201      	movs	r2, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	b21b      	sxth	r3, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	b21a      	sxth	r2, r3
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <socket+0x21c>)
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	4013      	ands	r3, r2
 8005300:	b21b      	sxth	r3, r3
 8005302:	b29a      	uxth	r2, r3
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <socket+0x21c>)
 8005306:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	f003 0201 	and.w	r2, r3, #1
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	b21a      	sxth	r2, r3
 8005316:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <socket+0x21c>)
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b21b      	sxth	r3, r3
 800531c:	4313      	orrs	r3, r2
 800531e:	b21b      	sxth	r3, r3
 8005320:	b29a      	uxth	r2, r3
 8005322:	4b17      	ldr	r3, [pc, #92]	; (8005380 <socket+0x21c>)
 8005324:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	2201      	movs	r2, #1
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	b21b      	sxth	r3, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	b21a      	sxth	r2, r3
 8005334:	4b13      	ldr	r3, [pc, #76]	; (8005384 <socket+0x220>)
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b21b      	sxth	r3, r3
 800533a:	4013      	ands	r3, r2
 800533c:	b21b      	sxth	r3, r3
 800533e:	b29a      	uxth	r2, r3
 8005340:	4b10      	ldr	r3, [pc, #64]	; (8005384 <socket+0x220>)
 8005342:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	4a10      	ldr	r2, [pc, #64]	; (8005388 <socket+0x224>)
 8005348:	2100      	movs	r1, #0
 800534a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	4a0e      	ldr	r2, [pc, #56]	; (800538c <socket+0x228>)
 8005352:	2100      	movs	r1, #0
 8005354:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005356:	bf00      	nop
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	3301      	adds	r3, #1
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fb0d 	bl	8005984 <WIZCHIP_READ>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f3      	beq.n	8005358 <socket+0x1f4>
   return (int8_t)sn;
 8005370:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	20000268 	.word	0x20000268
 8005380:	20000468 	.word	0x20000468
 8005384:	2000046a 	.word	0x2000046a
 8005388:	2000046c 	.word	0x2000046c
 800538c:	2000047c 	.word	0x2000047c

08005390 <close>:

int8_t close(uint8_t sn)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d902      	bls.n	80053a6 <close+0x16>
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	e055      	b.n	8005452 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	3301      	adds	r3, #1
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053b2:	2110      	movs	r1, #16
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fb31 	bl	8005a1c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80053ba:	bf00      	nop
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	3301      	adds	r3, #1
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fadb 	bl	8005984 <WIZCHIP_READ>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f3      	bne.n	80053bc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	3301      	adds	r3, #1
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80053e0:	211f      	movs	r1, #31
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fb1a 	bl	8005a1c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	2201      	movs	r2, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	b21b      	sxth	r3, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	b21a      	sxth	r2, r3
 80053f6:	4b19      	ldr	r3, [pc, #100]	; (800545c <close+0xcc>)
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b21b      	sxth	r3, r3
 80053fc:	4013      	ands	r3, r2
 80053fe:	b21b      	sxth	r3, r3
 8005400:	b29a      	uxth	r2, r3
 8005402:	4b16      	ldr	r3, [pc, #88]	; (800545c <close+0xcc>)
 8005404:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2201      	movs	r2, #1
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	b21b      	sxth	r3, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	b21a      	sxth	r2, r3
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <close+0xd0>)
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b21b      	sxth	r3, r3
 800541a:	4013      	ands	r3, r2
 800541c:	b21b      	sxth	r3, r3
 800541e:	b29a      	uxth	r2, r3
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <close+0xd0>)
 8005422:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	4a0f      	ldr	r2, [pc, #60]	; (8005464 <close+0xd4>)
 8005428:	2100      	movs	r1, #0
 800542a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	4a0d      	ldr	r2, [pc, #52]	; (8005468 <close+0xd8>)
 8005432:	2100      	movs	r1, #0
 8005434:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005436:	bf00      	nop
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	3301      	adds	r3, #1
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fa9d 	bl	8005984 <WIZCHIP_READ>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f3      	bne.n	8005438 <close+0xa8>
	return SOCK_OK;
 8005450:	2301      	movs	r3, #1
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000468 	.word	0x20000468
 8005460:	2000046a 	.word	0x2000046a
 8005464:	2000046c 	.word	0x2000046c
 8005468:	2000047c 	.word	0x2000047c

0800546c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	6039      	str	r1, [r7, #0]
 8005476:	71fb      	strb	r3, [r7, #7]
 8005478:	4613      	mov	r3, r2
 800547a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	2b08      	cmp	r3, #8
 8005480:	d902      	bls.n	8005488 <connect+0x1c>
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	e0c6      	b.n	8005616 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	3301      	adds	r3, #1
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fa77 	bl	8005984 <WIZCHIP_READ>
 8005496:	4603      	mov	r3, r0
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	2b01      	cmp	r3, #1
 800549e:	d002      	beq.n	80054a6 <connect+0x3a>
 80054a0:	f06f 0304 	mvn.w	r3, #4
 80054a4:	e0b7      	b.n	8005616 <connect+0x1aa>
   CHECK_SOCKINIT();
 80054a6:	79fb      	ldrb	r3, [r7, #7]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	3301      	adds	r3, #1
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fa66 	bl	8005984 <WIZCHIP_READ>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b13      	cmp	r3, #19
 80054bc:	d002      	beq.n	80054c4 <connect+0x58>
 80054be:	f06f 0302 	mvn.w	r3, #2
 80054c2:	e0a8      	b.n	8005616 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	3201      	adds	r2, #1
 80054d2:	7812      	ldrb	r2, [r2, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	3202      	adds	r2, #2
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	4413      	add	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	3203      	adds	r2, #3
 80054ee:	7812      	ldrb	r2, [r2, #0]
 80054f0:	4413      	add	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d002      	beq.n	8005502 <connect+0x96>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <connect+0x9c>
 8005502:	f06f 030b 	mvn.w	r3, #11
 8005506:	e086      	b.n	8005616 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8005508:	88bb      	ldrh	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <connect+0xa8>
 800550e:	f06f 030a 	mvn.w	r3, #10
 8005512:	e080      	b.n	8005616 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	3301      	adds	r3, #1
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005520:	2204      	movs	r2, #4
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fb27 	bl	8005b78 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	3301      	adds	r3, #1
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005536:	461a      	mov	r2, r3
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	b29b      	uxth	r3, r3
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 fa6a 	bl	8005a1c <WIZCHIP_WRITE>
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	3301      	adds	r3, #1
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005554:	461a      	mov	r2, r3
 8005556:	88bb      	ldrh	r3, [r7, #4]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f000 fa5d 	bl	8005a1c <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	3301      	adds	r3, #1
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800556e:	2104      	movs	r1, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fa53 	bl	8005a1c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005576:	bf00      	nop
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	3301      	adds	r3, #1
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f9fd 	bl	8005984 <WIZCHIP_READ>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f3      	bne.n	8005578 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005590:	4b23      	ldr	r3, [pc, #140]	; (8005620 <connect+0x1b4>)
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	fa42 f303 	asr.w	r3, r2, r3
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02b      	beq.n	80055fc <connect+0x190>
 80055a4:	2300      	movs	r3, #0
 80055a6:	e036      	b.n	8005616 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	3301      	adds	r3, #1
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f9e5 	bl	8005984 <WIZCHIP_READ>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00c      	beq.n	80055de <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	3301      	adds	r3, #1
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80055d0:	2108      	movs	r1, #8
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fa22 	bl	8005a1c <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80055d8:	f06f 030c 	mvn.w	r3, #12
 80055dc:	e01b      	b.n	8005616 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	3301      	adds	r3, #1
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f9ca 	bl	8005984 <WIZCHIP_READ>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80055f6:	f06f 0303 	mvn.w	r3, #3
 80055fa:	e00c      	b.n	8005616 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	3301      	adds	r3, #1
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005608:	4618      	mov	r0, r3
 800560a:	f000 f9bb 	bl	8005984 <WIZCHIP_READ>
 800560e:	4603      	mov	r3, r0
 8005610:	2b17      	cmp	r3, #23
 8005612:	d1c9      	bne.n	80055a8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8005614:	2301      	movs	r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000468 	.word	0x20000468

08005624 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	71fb      	strb	r3, [r7, #7]
 8005630:	4613      	mov	r3, r2
 8005632:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005638:	2300      	movs	r3, #0
 800563a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800563c:	79fb      	ldrb	r3, [r7, #7]
 800563e:	2b08      	cmp	r3, #8
 8005640:	d902      	bls.n	8005648 <send+0x24>
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	e0de      	b.n	8005806 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	3301      	adds	r3, #1
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f997 	bl	8005984 <WIZCHIP_READ>
 8005656:	4603      	mov	r3, r0
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	2b01      	cmp	r3, #1
 800565e:	d002      	beq.n	8005666 <send+0x42>
 8005660:	f06f 0304 	mvn.w	r3, #4
 8005664:	e0cf      	b.n	8005806 <send+0x1e2>
   CHECK_SOCKDATA();
 8005666:	88bb      	ldrh	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <send+0x4e>
 800566c:	f06f 030d 	mvn.w	r3, #13
 8005670:	e0c9      	b.n	8005806 <send+0x1e2>
   tmp = getSn_SR(sn);
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	3301      	adds	r3, #1
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800567e:	4618      	mov	r0, r3
 8005680:	f000 f980 	bl	8005984 <WIZCHIP_READ>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b17      	cmp	r3, #23
 800568c:	d005      	beq.n	800569a <send+0x76>
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b1c      	cmp	r3, #28
 8005692:	d002      	beq.n	800569a <send+0x76>
 8005694:	f06f 0306 	mvn.w	r3, #6
 8005698:	e0b5      	b.n	8005806 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800569a:	4b5d      	ldr	r3, [pc, #372]	; (8005810 <send+0x1ec>)
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	79fb      	ldrb	r3, [r7, #7]
 80056a2:	fa42 f303 	asr.w	r3, r2, r3
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d039      	beq.n	8005722 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	3301      	adds	r3, #1
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f962 	bl	8005984 <WIZCHIP_READ>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d019      	beq.n	8005706 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	3301      	adds	r3, #1
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80056de:	2110      	movs	r1, #16
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 f99b 	bl	8005a1c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	2201      	movs	r2, #1
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	b21a      	sxth	r2, r3
 80056f4:	4b46      	ldr	r3, [pc, #280]	; (8005810 <send+0x1ec>)
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b21b      	sxth	r3, r3
 80056fa:	4013      	ands	r3, r2
 80056fc:	b21b      	sxth	r3, r3
 80056fe:	b29a      	uxth	r2, r3
 8005700:	4b43      	ldr	r3, [pc, #268]	; (8005810 <send+0x1ec>)
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	e00d      	b.n	8005722 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d006      	beq.n	800571e <send+0xfa>
      {
         close(sn);
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fe3c 	bl	8005390 <close>
         return SOCKERR_TIMEOUT;
 8005718:	f06f 030c 	mvn.w	r3, #12
 800571c:	e073      	b.n	8005806 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800571e:	2300      	movs	r3, #0
 8005720:	e071      	b.n	8005806 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	3301      	adds	r3, #1
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f928 	bl	8005984 <WIZCHIP_READ>
 8005734:	4603      	mov	r3, r0
 8005736:	b29b      	uxth	r3, r3
 8005738:	029b      	lsls	r3, r3, #10
 800573a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800573c:	88ba      	ldrh	r2, [r7, #4]
 800573e:	89bb      	ldrh	r3, [r7, #12]
 8005740:	429a      	cmp	r2, r3
 8005742:	d901      	bls.n	8005748 <send+0x124>
 8005744:	89bb      	ldrh	r3, [r7, #12]
 8005746:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fa74 	bl	8005c38 <getSn_TX_FSR>
 8005750:	4603      	mov	r3, r0
 8005752:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	3301      	adds	r3, #1
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005760:	4618      	mov	r0, r3
 8005762:	f000 f90f 	bl	8005984 <WIZCHIP_READ>
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b17      	cmp	r3, #23
 800576e:	d009      	beq.n	8005784 <send+0x160>
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b1c      	cmp	r3, #28
 8005774:	d006      	beq.n	8005784 <send+0x160>
      {
         close(sn);
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fe09 	bl	8005390 <close>
         return SOCKERR_SOCKSTATUS;
 800577e:	f06f 0306 	mvn.w	r3, #6
 8005782:	e040      	b.n	8005806 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005784:	4b23      	ldr	r3, [pc, #140]	; (8005814 <send+0x1f0>)
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	fa42 f303 	asr.w	r3, r2, r3
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <send+0x180>
 8005798:	88ba      	ldrh	r2, [r7, #4]
 800579a:	89bb      	ldrh	r3, [r7, #12]
 800579c:	429a      	cmp	r2, r3
 800579e:	d901      	bls.n	80057a4 <send+0x180>
 80057a0:	2300      	movs	r3, #0
 80057a2:	e030      	b.n	8005806 <send+0x1e2>
      if(len <= freesize) break;
 80057a4:	88ba      	ldrh	r2, [r7, #4]
 80057a6:	89bb      	ldrh	r3, [r7, #12]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d900      	bls.n	80057ae <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80057ac:	e7cc      	b.n	8005748 <send+0x124>
      if(len <= freesize) break;
 80057ae:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80057b0:	88ba      	ldrh	r2, [r7, #4]
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fad4 	bl	8005d64 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	3301      	adds	r3, #1
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057c8:	2120      	movs	r1, #32
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f926 	bl	8005a1c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80057d0:	bf00      	nop
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	3301      	adds	r3, #1
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 f8d0 	bl	8005984 <WIZCHIP_READ>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f3      	bne.n	80057d2 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	2201      	movs	r2, #1
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	b21a      	sxth	r2, r3
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <send+0x1ec>)
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b21b      	sxth	r3, r3
 80057fa:	4313      	orrs	r3, r2
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	b29a      	uxth	r2, r3
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <send+0x1ec>)
 8005802:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005804:	88bb      	ldrh	r3, [r7, #4]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	2000046a 	.word	0x2000046a
 8005814:	20000468 	.word	0x20000468

08005818 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	71fb      	strb	r3, [r7, #7]
 8005824:	4613      	mov	r3, r2
 8005826:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	2b08      	cmp	r3, #8
 8005834:	d902      	bls.n	800583c <recv+0x24>
 8005836:	f04f 33ff 	mov.w	r3, #4294967295
 800583a:	e09c      	b.n	8005976 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	3301      	adds	r3, #1
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f89d 	bl	8005984 <WIZCHIP_READ>
 800584a:	4603      	mov	r3, r0
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	2b01      	cmp	r3, #1
 8005852:	d002      	beq.n	800585a <recv+0x42>
 8005854:	f06f 0304 	mvn.w	r3, #4
 8005858:	e08d      	b.n	8005976 <recv+0x15e>
   CHECK_SOCKDATA();
 800585a:	88bb      	ldrh	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <recv+0x4e>
 8005860:	f06f 030d 	mvn.w	r3, #13
 8005864:	e087      	b.n	8005976 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	3301      	adds	r3, #1
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f886 	bl	8005984 <WIZCHIP_READ>
 8005878:	4603      	mov	r3, r0
 800587a:	b29b      	uxth	r3, r3
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005880:	89ba      	ldrh	r2, [r7, #12]
 8005882:	88bb      	ldrh	r3, [r7, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	d201      	bcs.n	800588c <recv+0x74>
 8005888:	89bb      	ldrh	r3, [r7, #12]
 800588a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fa1d 	bl	8005cce <getSn_RX_RSR>
 8005894:	4603      	mov	r3, r0
 8005896:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	3301      	adds	r3, #1
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f86d 	bl	8005984 <WIZCHIP_READ>
 80058aa:	4603      	mov	r3, r0
 80058ac:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b17      	cmp	r3, #23
 80058b2:	d026      	beq.n	8005902 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b1c      	cmp	r3, #28
 80058b8:	d11c      	bne.n	80058f4 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80058ba:	89bb      	ldrh	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d133      	bne.n	8005928 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9b8 	bl	8005c38 <getSn_TX_FSR>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461c      	mov	r4, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	3301      	adds	r3, #1
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 f853 	bl	8005984 <WIZCHIP_READ>
 80058de:	4603      	mov	r3, r0
 80058e0:	029b      	lsls	r3, r3, #10
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d10d      	bne.n	8005902 <recv+0xea>
               {
                  close(sn);
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fd51 	bl	8005390 <close>
                  return SOCKERR_SOCKSTATUS;
 80058ee:	f06f 0306 	mvn.w	r3, #6
 80058f2:	e040      	b.n	8005976 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fd4a 	bl	8005390 <close>
               return SOCKERR_SOCKSTATUS;
 80058fc:	f06f 0306 	mvn.w	r3, #6
 8005900:	e039      	b.n	8005976 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005902:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <recv+0x168>)
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	fa42 f303 	asr.w	r3, r2, r3
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <recv+0x108>
 8005916:	89bb      	ldrh	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <recv+0x108>
 800591c:	2300      	movs	r3, #0
 800591e:	e02a      	b.n	8005976 <recv+0x15e>
         if(recvsize != 0) break;
 8005920:	89bb      	ldrh	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8005926:	e7b1      	b.n	800588c <recv+0x74>
               if(recvsize != 0) break;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <recv+0x116>
         if(recvsize != 0) break;
 800592c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800592e:	89ba      	ldrh	r2, [r7, #12]
 8005930:	88bb      	ldrh	r3, [r7, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d201      	bcs.n	800593a <recv+0x122>
 8005936:	89bb      	ldrh	r3, [r7, #12]
 8005938:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800593a:	88ba      	ldrh	r2, [r7, #4]
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fa6b 	bl	8005e1c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	3301      	adds	r3, #1
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005952:	2140      	movs	r1, #64	; 0x40
 8005954:	4618      	mov	r0, r3
 8005956:	f000 f861 	bl	8005a1c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800595a:	bf00      	nop
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3301      	adds	r3, #1
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f80b 	bl	8005984 <WIZCHIP_READ>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f3      	bne.n	800595c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005974:	88bb      	ldrh	r3, [r7, #4]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bd90      	pop	{r4, r7, pc}
 800597e:	bf00      	nop
 8005980:	20000468 	.word	0x20000468

08005984 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <WIZCHIP_READ+0x94>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <WIZCHIP_READ+0x94>)
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005998:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <WIZCHIP_READ+0x94>)
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <WIZCHIP_READ+0x24>
 80059a0:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <WIZCHIP_READ+0x94>)
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d114      	bne.n	80059d2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80059a8:	4b1b      	ldr	r3, [pc, #108]	; (8005a18 <WIZCHIP_READ+0x94>)
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	0c12      	lsrs	r2, r2, #16
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	4610      	mov	r0, r2
 80059b4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <WIZCHIP_READ+0x94>)
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	0a12      	lsrs	r2, r2, #8
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80059c4:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <WIZCHIP_READ+0x94>)
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	4610      	mov	r0, r2
 80059ce:	4798      	blx	r3
 80059d0:	e011      	b.n	80059f6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0c1b      	lsrs	r3, r3, #16
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <WIZCHIP_READ+0x94>)
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	f107 020c 	add.w	r2, r7, #12
 80059f0:	2103      	movs	r1, #3
 80059f2:	4610      	mov	r0, r2
 80059f4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <WIZCHIP_READ+0x94>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4798      	blx	r3
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <WIZCHIP_READ+0x94>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <WIZCHIP_READ+0x94>)
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	4798      	blx	r3
   return ret;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	2000026c 	.word	0x2000026c

08005a1c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8005a28:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005a2e:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f043 0304 	orr.w	r3, r3, #4
 8005a3a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d119      	bne.n	8005a78 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005a44:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	0c12      	lsrs	r2, r2, #16
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005a52:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	0a12      	lsrs	r2, r2, #8
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005a60:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8005a6c:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	78fa      	ldrb	r2, [r7, #3]
 8005a72:	4610      	mov	r0, r2
 8005a74:	4798      	blx	r3
 8005a76:	e013      	b.n	8005aa0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	0c1b      	lsrs	r3, r3, #16
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	f107 020c 	add.w	r2, r7, #12
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005aa6:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <WIZCHIP_WRITE+0x98>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	4798      	blx	r3
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	2000026c 	.word	0x2000026c

08005ab8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005ab8:	b590      	push	{r4, r7, lr}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005ac6:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005acc:	4b29      	ldr	r3, [pc, #164]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005ad2:	4b28      	ldr	r3, [pc, #160]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <WIZCHIP_READ_BUF+0x2a>
 8005ada:	4b26      	ldr	r3, [pc, #152]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d126      	bne.n	8005b30 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005ae2:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	0c12      	lsrs	r2, r2, #16
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	4610      	mov	r0, r2
 8005aee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005af0:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	0a12      	lsrs	r2, r2, #8
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	4610      	mov	r0, r2
 8005afc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005afe:	4b1d      	ldr	r3, [pc, #116]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	4610      	mov	r0, r2
 8005b08:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	82fb      	strh	r3, [r7, #22]
 8005b0e:	e00a      	b.n	8005b26 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8005b10:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	8afa      	ldrh	r2, [r7, #22]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	188c      	adds	r4, r1, r2
 8005b1a:	4798      	blx	r3
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8005b20:	8afb      	ldrh	r3, [r7, #22]
 8005b22:	3301      	adds	r3, #1
 8005b24:	82fb      	strh	r3, [r7, #22]
 8005b26:	8afa      	ldrh	r2, [r7, #22]
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3f0      	bcc.n	8005b10 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005b2e:	e017      	b.n	8005b60 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	f107 0210 	add.w	r2, r7, #16
 8005b4e:	2103      	movs	r1, #3
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	68b8      	ldr	r0, [r7, #8]
 8005b5e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005b66:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <WIZCHIP_READ_BUF+0xbc>)
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	4798      	blx	r3
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd90      	pop	{r4, r7, pc}
 8005b74:	2000026c 	.word	0x2000026c

08005b78 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005b86:	4b2b      	ldr	r3, [pc, #172]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005b8c:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f043 0304 	orr.w	r3, r3, #4
 8005b98:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005b9a:	4b26      	ldr	r3, [pc, #152]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d126      	bne.n	8005bf0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	0c12      	lsrs	r2, r2, #16
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005bb0:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	0a12      	lsrs	r2, r2, #8
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005bca:	2300      	movs	r3, #0
 8005bcc:	82fb      	strh	r3, [r7, #22]
 8005bce:	e00a      	b.n	8005be6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8005bd0:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	8afa      	ldrh	r2, [r7, #22]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	440a      	add	r2, r1
 8005bda:	7812      	ldrb	r2, [r2, #0]
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005be0:	8afb      	ldrh	r3, [r7, #22]
 8005be2:	3301      	adds	r3, #1
 8005be4:	82fb      	strh	r3, [r7, #22]
 8005be6:	8afa      	ldrh	r2, [r7, #22]
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d3f0      	bcc.n	8005bd0 <WIZCHIP_WRITE_BUF+0x58>
 8005bee:	e017      	b.n	8005c20 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	0c1b      	lsrs	r3, r3, #16
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	f107 0210 	add.w	r2, r7, #16
 8005c0e:	2103      	movs	r1, #3
 8005c10:	4610      	mov	r0, r2
 8005c12:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	68b8      	ldr	r0, [r7, #8]
 8005c1e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005c26:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <WIZCHIP_WRITE_BUF+0xbc>)
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	4798      	blx	r3
}
 8005c2c:	bf00      	nop
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	2000026c 	.word	0x2000026c

08005c38 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	81fb      	strh	r3, [r7, #14]
 8005c46:	2300      	movs	r3, #0
 8005c48:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	3301      	adds	r3, #1
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fe94 	bl	8005984 <WIZCHIP_READ>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005c60:	89bb      	ldrh	r3, [r7, #12]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	b29c      	uxth	r4, r3
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fe86 	bl	8005984 <WIZCHIP_READ>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4423      	add	r3, r4
 8005c7e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005c80:	89bb      	ldrh	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01a      	beq.n	8005cbc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fe76 	bl	8005984 <WIZCHIP_READ>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005c9c:	89fb      	ldrh	r3, [r7, #14]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	b29c      	uxth	r4, r3
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fe68 	bl	8005984 <WIZCHIP_READ>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4423      	add	r3, r4
 8005cba:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005cbc:	89fa      	ldrh	r2, [r7, #14]
 8005cbe:	89bb      	ldrh	r3, [r7, #12]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d1c2      	bne.n	8005c4a <getSn_TX_FSR+0x12>
   return val;
 8005cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}

08005cce <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005cce:	b590      	push	{r4, r7, lr}
 8005cd0:	b085      	sub	sp, #20
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	81fb      	strh	r3, [r7, #14]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fe49 	bl	8005984 <WIZCHIP_READ>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005cf6:	89bb      	ldrh	r3, [r7, #12]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	b29c      	uxth	r4, r3
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	3301      	adds	r3, #1
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fe3b 	bl	8005984 <WIZCHIP_READ>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	4423      	add	r3, r4
 8005d14:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005d16:	89bb      	ldrh	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01a      	beq.n	8005d52 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	3301      	adds	r3, #1
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fe2b 	bl	8005984 <WIZCHIP_READ>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005d32:	89fb      	ldrh	r3, [r7, #14]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	b29c      	uxth	r4, r3
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff fe1d 	bl	8005984 <WIZCHIP_READ>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4423      	add	r3, r4
 8005d50:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005d52:	89fa      	ldrh	r2, [r7, #14]
 8005d54:	89bb      	ldrh	r3, [r7, #12]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d1c2      	bne.n	8005ce0 <getSn_RX_RSR+0x12>
   return val;
 8005d5a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}

08005d64 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	6039      	str	r1, [r7, #0]
 8005d6e:	71fb      	strb	r3, [r7, #7]
 8005d70:	4613      	mov	r3, r2
 8005d72:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005d7c:	88bb      	ldrh	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d048      	beq.n	8005e14 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	3301      	adds	r3, #1
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fdf8 	bl	8005984 <WIZCHIP_READ>
 8005d94:	4603      	mov	r3, r0
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	b29c      	uxth	r4, r3
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	3301      	adds	r3, #1
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff fdeb 	bl	8005984 <WIZCHIP_READ>
 8005dae:	4603      	mov	r3, r0
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4423      	add	r3, r4
 8005db4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8005db6:	89fb      	ldrh	r3, [r7, #14]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	79fa      	ldrb	r2, [r7, #7]
 8005dbc:	0092      	lsls	r2, r2, #2
 8005dbe:	3202      	adds	r2, #2
 8005dc0:	00d2      	lsls	r2, r2, #3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005dc6:	88bb      	ldrh	r3, [r7, #4]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	68b8      	ldr	r0, [r7, #8]
 8005dce:	f7ff fed3 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005dd2:	89fa      	ldrh	r2, [r7, #14]
 8005dd4:	88bb      	ldrh	r3, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	3301      	adds	r3, #1
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005de6:	461a      	mov	r2, r3
 8005de8:	89fb      	ldrh	r3, [r7, #14]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f7ff fe12 	bl	8005a1c <WIZCHIP_WRITE>
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8005e04:	461a      	mov	r2, r3
 8005e06:	89fb      	ldrh	r3, [r7, #14]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4610      	mov	r0, r2
 8005e0e:	f7ff fe05 	bl	8005a1c <WIZCHIP_WRITE>
 8005e12:	e000      	b.n	8005e16 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8005e14:	bf00      	nop
}
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}

08005e1c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005e1c:	b590      	push	{r4, r7, lr}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	71fb      	strb	r3, [r7, #7]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005e34:	88bb      	ldrh	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d048      	beq.n	8005ecc <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	3301      	adds	r3, #1
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fd9c 	bl	8005984 <WIZCHIP_READ>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	b29c      	uxth	r4, r3
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	3301      	adds	r3, #1
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fd8f 	bl	8005984 <WIZCHIP_READ>
 8005e66:	4603      	mov	r3, r0
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4423      	add	r3, r4
 8005e6c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005e6e:	89fb      	ldrh	r3, [r7, #14]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	79fa      	ldrb	r2, [r7, #7]
 8005e74:	0092      	lsls	r2, r2, #2
 8005e76:	3203      	adds	r2, #3
 8005e78:	00d2      	lsls	r2, r2, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005e7e:	88bb      	ldrh	r3, [r7, #4]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	68b8      	ldr	r0, [r7, #8]
 8005e86:	f7ff fe17 	bl	8005ab8 <WIZCHIP_READ_BUF>
   ptr += len;
 8005e8a:	89fa      	ldrh	r2, [r7, #14]
 8005e8c:	88bb      	ldrh	r3, [r7, #4]
 8005e8e:	4413      	add	r3, r2
 8005e90:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	3301      	adds	r3, #1
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	89fb      	ldrh	r3, [r7, #14]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7ff fdb6 	bl	8005a1c <WIZCHIP_WRITE>
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7ff fda9 	bl	8005a1c <WIZCHIP_WRITE>
 8005eca:	e000      	b.n	8005ece <wiz_recv_data+0xb2>
   if(len == 0) return;
 8005ecc:	bf00      	nop
}
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd90      	pop	{r4, r7, pc}

08005ed4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005ee2:	b480      	push	{r7}
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	bf00      	nop
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	bf00      	nop
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	807b      	strh	r3, [r7, #2]
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	807b      	strh	r3, [r7, #2]
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <reg_wizchip_cs_cbfunc+0x16>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <reg_wizchip_cs_cbfunc+0x40>)
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <reg_wizchip_cs_cbfunc+0x44>)
 8005fb6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005fb8:	4b08      	ldr	r3, [pc, #32]	; (8005fdc <reg_wizchip_cs_cbfunc+0x40>)
 8005fba:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <reg_wizchip_cs_cbfunc+0x48>)
 8005fbc:	619a      	str	r2, [r3, #24]
 8005fbe:	e006      	b.n	8005fce <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005fc0:	4a06      	ldr	r2, [pc, #24]	; (8005fdc <reg_wizchip_cs_cbfunc+0x40>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005fc6:	4a05      	ldr	r2, [pc, #20]	; (8005fdc <reg_wizchip_cs_cbfunc+0x40>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6193      	str	r3, [r2, #24]
   }
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	2000026c 	.word	0x2000026c
 8005fe0:	08005ef1 	.word	0x08005ef1
 8005fe4:	08005eff 	.word	0x08005eff

08005fe8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005ff2:	bf00      	nop
 8005ff4:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <reg_wizchip_spi_cbfunc+0x4c>)
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f9      	beq.n	8005ff4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <reg_wizchip_spi_cbfunc+0x24>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d106      	bne.n	800601a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <reg_wizchip_spi_cbfunc+0x4c>)
 800600e:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <reg_wizchip_spi_cbfunc+0x50>)
 8006010:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <reg_wizchip_spi_cbfunc+0x4c>)
 8006014:	4a09      	ldr	r2, [pc, #36]	; (800603c <reg_wizchip_spi_cbfunc+0x54>)
 8006016:	621a      	str	r2, [r3, #32]
 8006018:	e006      	b.n	8006028 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800601a:	4a06      	ldr	r2, [pc, #24]	; (8006034 <reg_wizchip_spi_cbfunc+0x4c>)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8006020:	4a04      	ldr	r2, [pc, #16]	; (8006034 <reg_wizchip_spi_cbfunc+0x4c>)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6213      	str	r3, [r2, #32]
   }
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	2000026c 	.word	0x2000026c
 8006038:	08005f45 	.word	0x08005f45
 800603c:	08005f55 	.word	0x08005f55

08006040 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800604a:	bf00      	nop
 800604c:	4b0f      	ldr	r3, [pc, #60]	; (800608c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f9      	beq.n	800604c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <reg_wizchip_spiburst_cbfunc+0x24>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8006064:	4b09      	ldr	r3, [pc, #36]	; (800608c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006066:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <reg_wizchip_spiburst_cbfunc+0x50>)
 8006068:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800606a:	4b08      	ldr	r3, [pc, #32]	; (800608c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800606c:	4a09      	ldr	r2, [pc, #36]	; (8006094 <reg_wizchip_spiburst_cbfunc+0x54>)
 800606e:	629a      	str	r2, [r3, #40]	; 0x28
 8006070:	e006      	b.n	8006080 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8006072:	4a06      	ldr	r2, [pc, #24]	; (800608c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	2000026c 	.word	0x2000026c
 8006090:	08005f6b 	.word	0x08005f6b
 8006094:	08005f83 	.word	0x08005f83

08006098 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	f200 80c7 	bhi.w	8006246 <ctlwizchip+0x1ae>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <ctlwizchip+0x28>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	08006101 	.word	0x08006101
 80060c4:	08006107 	.word	0x08006107
 80060c8:	08006133 	.word	0x08006133
 80060cc:	08006127 	.word	0x08006127
 80060d0:	08006141 	.word	0x08006141
 80060d4:	0800614d 	.word	0x0800614d
 80060d8:	0800615b 	.word	0x0800615b
 80060dc:	08006181 	.word	0x08006181
 80060e0:	080061a7 	.word	0x080061a7
 80060e4:	080061eb 	.word	0x080061eb
 80060e8:	080061f1 	.word	0x080061f1
 80060ec:	080061f9 	.word	0x080061f9
 80060f0:	0800624d 	.word	0x0800624d
 80060f4:	08006201 	.word	0x08006201
 80060f8:	0800620f 	.word	0x0800620f
 80060fc:	0800622b 	.word	0x0800622b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8006100:	f000 f8ac 	bl	800625c <wizchip_sw_reset>
         break;
 8006104:	e0a3      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d004      	beq.n	8006116 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3308      	adds	r3, #8
 8006114:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4611      	mov	r1, r2
 800611c:	4618      	mov	r0, r3
 800611e:	f000 f8e9 	bl	80062f4 <wizchip_init>
 8006122:	4603      	mov	r3, r0
 8006124:	e094      	b.n	8006250 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f96e 	bl	800640c <wizchip_clrinterrupt>
         break;
 8006130:	e08d      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8006132:	f000 f99f 	bl	8006474 <wizchip_getinterrupt>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	801a      	strh	r2, [r3, #0]
         break;
 800613e:	e086      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 f9ba 	bl	80064be <wizchip_setinterruptmask>
         break;         
 800614a:	e080      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800614c:	f000 f9d2 	bl	80064f4 <wizchip_getinterruptmask>
 8006150:	4603      	mov	r3, r0
 8006152:	461a      	mov	r2, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	801a      	strh	r2, [r3, #0]
         break;
 8006158:	e079      	b.n	800624e <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b29b      	uxth	r3, r3
 8006162:	b2db      	uxtb	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800616a:	f7ff fc57 	bl	8005a1c <WIZCHIP_WRITE>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	4619      	mov	r1, r3
 8006176:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800617a:	f7ff fc4f 	bl	8005a1c <WIZCHIP_WRITE>
         break;
 800617e:	e066      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8006180:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8006184:	f7ff fbfe 	bl	8005984 <WIZCHIP_READ>
 8006188:	4603      	mov	r3, r0
 800618a:	b29b      	uxth	r3, r3
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	b29c      	uxth	r4, r3
 8006190:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8006194:	f7ff fbf6 	bl	8005984 <WIZCHIP_READ>
 8006198:	4603      	mov	r3, r0
 800619a:	b29b      	uxth	r3, r3
 800619c:	4423      	add	r3, r4
 800619e:	b29a      	uxth	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	801a      	strh	r2, [r3, #0]
         break;
 80061a4:	e053      	b.n	800624e <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80061a6:	4b2c      	ldr	r3, [pc, #176]	; (8006258 <ctlwizchip+0x1c0>)
 80061a8:	789a      	ldrb	r2, [r3, #2]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	4a29      	ldr	r2, [pc, #164]	; (8006258 <ctlwizchip+0x1c0>)
 80061b4:	78d2      	ldrb	r2, [r2, #3]
 80061b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	3302      	adds	r3, #2
 80061bc:	4a26      	ldr	r2, [pc, #152]	; (8006258 <ctlwizchip+0x1c0>)
 80061be:	7912      	ldrb	r2, [r2, #4]
 80061c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	3303      	adds	r3, #3
 80061c6:	4a24      	ldr	r2, [pc, #144]	; (8006258 <ctlwizchip+0x1c0>)
 80061c8:	7952      	ldrb	r2, [r2, #5]
 80061ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4a21      	ldr	r2, [pc, #132]	; (8006258 <ctlwizchip+0x1c0>)
 80061d2:	7992      	ldrb	r2, [r2, #6]
 80061d4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	3305      	adds	r3, #5
 80061da:	4a1f      	ldr	r2, [pc, #124]	; (8006258 <ctlwizchip+0x1c0>)
 80061dc:	79d2      	ldrb	r2, [r2, #7]
 80061de:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	3306      	adds	r3, #6
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
         break;
 80061e8:	e031      	b.n	800624e <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80061ea:	f000 f9d5 	bl	8006598 <wizphy_reset>
         break;
 80061ee:	e02e      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80061f0:	6838      	ldr	r0, [r7, #0]
 80061f2:	f000 f9f8 	bl	80065e6 <wizphy_setphyconf>
         break;
 80061f6:	e02a      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80061f8:	6838      	ldr	r0, [r7, #0]
 80061fa:	f000 fa36 	bl	800666a <wizphy_getphyconf>
         break;
 80061fe:	e026      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fa99 	bl	800673c <wizphy_setphypmode>
 800620a:	4603      	mov	r3, r0
 800620c:	e020      	b.n	8006250 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800620e:	f000 f9aa 	bl	8006566 <wizphy_getphypmode>
 8006212:	4603      	mov	r3, r0
 8006214:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2bff      	cmp	r3, #255	; 0xff
 800621a:	d102      	bne.n	8006222 <ctlwizchip+0x18a>
 800621c:	f04f 33ff 	mov.w	r3, #4294967295
 8006220:	e016      	b.n	8006250 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	7dfa      	ldrb	r2, [r7, #23]
 8006226:	701a      	strb	r2, [r3, #0]
         break;
 8006228:	e011      	b.n	800624e <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800622a:	f000 f986 	bl	800653a <wizphy_getphylink>
 800622e:	4603      	mov	r3, r0
 8006230:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	2bff      	cmp	r3, #255	; 0xff
 8006236:	d102      	bne.n	800623e <ctlwizchip+0x1a6>
 8006238:	f04f 33ff 	mov.w	r3, #4294967295
 800623c:	e008      	b.n	8006250 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	7dfa      	ldrb	r2, [r7, #23]
 8006242:	701a      	strb	r2, [r3, #0]
         break;
 8006244:	e003      	b.n	800624e <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	e001      	b.n	8006250 <ctlwizchip+0x1b8>
         break;
 800624c:	bf00      	nop
   }
   return 0;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	bd90      	pop	{r4, r7, pc}
 8006258:	2000026c 	.word	0x2000026c

0800625c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	2206      	movs	r2, #6
 8006266:	4619      	mov	r1, r3
 8006268:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800626c:	f7ff fc24 	bl	8005ab8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	2204      	movs	r2, #4
 8006276:	4619      	mov	r1, r3
 8006278:	f44f 7080 	mov.w	r0, #256	; 0x100
 800627c:	f7ff fc1c 	bl	8005ab8 <WIZCHIP_READ_BUF>
 8006280:	f107 0310 	add.w	r3, r7, #16
 8006284:	2204      	movs	r2, #4
 8006286:	4619      	mov	r1, r3
 8006288:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800628c:	f7ff fc14 	bl	8005ab8 <WIZCHIP_READ_BUF>
 8006290:	f107 030c 	add.w	r3, r7, #12
 8006294:	2204      	movs	r2, #4
 8006296:	4619      	mov	r1, r3
 8006298:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800629c:	f7ff fc0c 	bl	8005ab8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80062a0:	2180      	movs	r1, #128	; 0x80
 80062a2:	2000      	movs	r0, #0
 80062a4:	f7ff fbba 	bl	8005a1c <WIZCHIP_WRITE>
   getMR(); // for delay
 80062a8:	2000      	movs	r0, #0
 80062aa:	f7ff fb6b 	bl	8005984 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	2206      	movs	r2, #6
 80062b2:	4619      	mov	r1, r3
 80062b4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80062b8:	f7ff fc5e 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80062bc:	f107 0314 	add.w	r3, r7, #20
 80062c0:	2204      	movs	r2, #4
 80062c2:	4619      	mov	r1, r3
 80062c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80062c8:	f7ff fc56 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80062cc:	f107 0310 	add.w	r3, r7, #16
 80062d0:	2204      	movs	r2, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80062d8:	f7ff fc4e 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80062dc:	f107 030c 	add.w	r3, r7, #12
 80062e0:	2204      	movs	r2, #4
 80062e2:	4619      	mov	r1, r3
 80062e4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80062e8:	f7ff fc46 	bl	8005b78 <WIZCHIP_WRITE_BUF>
}
 80062ec:	bf00      	nop
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006302:	f7ff ffab 	bl	800625c <wizchip_sw_reset>
   if(txsize)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d03b      	beq.n	8006384 <wizchip_init+0x90>
   {
      tmp = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006310:	2300      	movs	r3, #0
 8006312:	73fb      	strb	r3, [r7, #15]
 8006314:	e015      	b.n	8006342 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8006316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	781a      	ldrb	r2, [r3, #0]
 8006320:	7bbb      	ldrb	r3, [r7, #14]
 8006322:	4413      	add	r3, r2
 8006324:	b2db      	uxtb	r3, r3
 8006326:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8006328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800632c:	2b10      	cmp	r3, #16
 800632e:	dd02      	ble.n	8006336 <wizchip_init+0x42>
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	e066      	b.n	8006404 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	3301      	adds	r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	73fb      	strb	r3, [r7, #15]
 8006342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006346:	2b07      	cmp	r3, #7
 8006348:	dde5      	ble.n	8006316 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
 800634e:	e015      	b.n	800637c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	3301      	adds	r3, #1
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800635e:	4618      	mov	r0, r3
 8006360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4413      	add	r3, r2
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	4619      	mov	r1, r3
 800636c:	f7ff fb56 	bl	8005a1c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	3301      	adds	r3, #1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006380:	2b07      	cmp	r3, #7
 8006382:	dde5      	ble.n	8006350 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d03b      	beq.n	8006402 <wizchip_init+0x10e>
   {
      tmp = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800638e:	2300      	movs	r3, #0
 8006390:	73fb      	strb	r3, [r7, #15]
 8006392:	e015      	b.n	80063c0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	4413      	add	r3, r2
 800639c:	781a      	ldrb	r2, [r3, #0]
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	4413      	add	r3, r2
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80063a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063aa:	2b10      	cmp	r3, #16
 80063ac:	dd02      	ble.n	80063b4 <wizchip_init+0xc0>
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295
 80063b2:	e027      	b.n	8006404 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80063b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	3301      	adds	r3, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	73fb      	strb	r3, [r7, #15]
 80063c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c4:	2b07      	cmp	r3, #7
 80063c6:	dde5      	ble.n	8006394 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	e015      	b.n	80063fa <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80063ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	3301      	adds	r3, #1
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80063dc:	4618      	mov	r0, r3
 80063de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	4413      	add	r3, r2
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7ff fb17 	bl	8005a1c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80063ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	3301      	adds	r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	73fb      	strb	r3, [r7, #15]
 80063fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063fe:	2b07      	cmp	r3, #7
 8006400:	dde5      	ble.n	80063ce <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	b29b      	uxth	r3, r3
 8006420:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	f023 030f 	bic.w	r3, r3, #15
 8006428:	b2db      	uxtb	r3, r3
 800642a:	4619      	mov	r1, r3
 800642c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8006430:	f7ff faf4 	bl	8005a1c <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006434:	2300      	movs	r3, #0
 8006436:	73fb      	strb	r3, [r7, #15]
 8006438:	e014      	b.n	8006464 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800643a:	7bba      	ldrb	r2, [r7, #14]
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	fa42 f303 	asr.w	r3, r2, r3
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <wizchip_clrinterrupt+0x52>
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	3301      	adds	r3, #1
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006456:	211f      	movs	r1, #31
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fadf 	bl	8005a1c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	3301      	adds	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b07      	cmp	r3, #7
 8006468:	d9e7      	bls.n	800643a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8006486:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800648a:	f7ff fa7b 	bl	8005984 <WIZCHIP_READ>
 800648e:	4603      	mov	r3, r0
 8006490:	f023 030f 	bic.w	r3, r3, #15
 8006494:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8006496:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800649a:	f7ff fa73 	bl	8005984 <WIZCHIP_READ>
 800649e:	4603      	mov	r3, r0
 80064a0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80064a2:	79bb      	ldrb	r3, [r7, #6]
 80064a4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80064a6:	88bb      	ldrh	r3, [r7, #4]
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80064b4:	88bb      	ldrh	r3, [r7, #4]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	4603      	mov	r3, r0
 80064c6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	4619      	mov	r1, r3
 80064d8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80064dc:	f7ff fa9e 	bl	8005a1c <WIZCHIP_WRITE>
   setSIMR(simr);
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	4619      	mov	r1, r3
 80064e4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80064e8:	f7ff fa98 	bl	8005a1c <WIZCHIP_WRITE>
#endif   
}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8006506:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800650a:	f7ff fa3b 	bl	8005984 <WIZCHIP_READ>
 800650e:	4603      	mov	r3, r0
 8006510:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8006512:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8006516:	f7ff fa35 	bl	8005984 <WIZCHIP_READ>
 800651a:	4603      	mov	r3, r0
 800651c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800651e:	79bb      	ldrb	r3, [r7, #6]
 8006520:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006522:	88bb      	ldrh	r3, [r7, #4]
 8006524:	021b      	lsls	r3, r3, #8
 8006526:	b29a      	uxth	r2, r3
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	b29b      	uxth	r3, r3
 800652c:	4413      	add	r3, r2
 800652e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006530:	88bb      	ldrh	r3, [r7, #4]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8006540:	2300      	movs	r3, #0
 8006542:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006544:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006548:	f7ff fa1c 	bl	8005984 <WIZCHIP_READ>
 800654c:	4603      	mov	r3, r0
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8006556:	2301      	movs	r3, #1
 8006558:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800655a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8006570:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8006574:	f7ff fa06 	bl	8005984 <WIZCHIP_READ>
 8006578:	4603      	mov	r3, r0
 800657a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657e:	2b30      	cmp	r3, #48	; 0x30
 8006580:	d102      	bne.n	8006588 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8006582:	2301      	movs	r3, #1
 8006584:	71fb      	strb	r3, [r7, #7]
 8006586:	e001      	b.n	800658c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8006588:	2300      	movs	r3, #0
 800658a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800658c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800659e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80065a2:	f7ff f9ef 	bl	8005984 <WIZCHIP_READ>
 80065a6:	4603      	mov	r3, r0
 80065a8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	4619      	mov	r1, r3
 80065b6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80065ba:	f7ff fa2f 	bl	8005a1c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80065be:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80065c2:	f7ff f9df 	bl	8005984 <WIZCHIP_READ>
 80065c6:	4603      	mov	r3, r0
 80065c8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065d0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	4619      	mov	r1, r3
 80065d6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80065da:	f7ff fa1f 	bl	8005a1c <WIZCHIP_WRITE>
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d104      	bne.n	8006604 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006600:	73fb      	strb	r3, [r7, #15]
 8006602:	e003      	b.n	800660c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d104      	bne.n	800661e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800661a:	73fb      	strb	r3, [r7, #15]
 800661c:	e019      	b.n	8006652 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	78db      	ldrb	r3, [r3, #3]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10d      	bne.n	8006642 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	789b      	ldrb	r3, [r3, #2]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d104      	bne.n	8006638 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	f043 0318 	orr.w	r3, r3, #24
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	e00c      	b.n	8006652 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	f043 0308 	orr.w	r3, r3, #8
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	e007      	b.n	8006652 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	789b      	ldrb	r3, [r3, #2]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d103      	bne.n	8006652 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	f043 0310 	orr.w	r3, r3, #16
 8006650:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	4619      	mov	r1, r3
 8006656:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800665a:	f7ff f9df 	bl	8005a1c <WIZCHIP_WRITE>
   wizphy_reset();
 800665e:	f7ff ff9b 	bl	8006598 <wizphy_reset>
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006676:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800667a:	f7ff f983 	bl	8005984 <WIZCHIP_READ>
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	119b      	asrs	r3, r3, #6
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	b2da      	uxtb	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006698:	2b20      	cmp	r3, #32
 800669a:	d001      	beq.n	80066a0 <wizphy_getphyconf+0x36>
 800669c:	2b38      	cmp	r3, #56	; 0x38
 800669e:	d103      	bne.n	80066a8 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	705a      	strb	r2, [r3, #1]
         break;
 80066a6:	e003      	b.n	80066b0 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	705a      	strb	r2, [r3, #1]
         break;
 80066ae:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066b6:	3b10      	subs	r3, #16
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	bf8c      	ite	hi
 80066bc:	2201      	movhi	r2, #1
 80066be:	2200      	movls	r2, #0
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d111      	bne.n	80066ea <wizphy_getphyconf+0x80>
 80066c6:	2201      	movs	r2, #1
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80066d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	709a      	strb	r2, [r3, #2]
         break;
 80066e8:	e003      	b.n	80066f2 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	709a      	strb	r2, [r3, #2]
         break;
 80066f0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066f8:	3b08      	subs	r3, #8
 80066fa:	2b18      	cmp	r3, #24
 80066fc:	bf8c      	ite	hi
 80066fe:	2201      	movhi	r2, #1
 8006700:	2200      	movls	r2, #0
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	2a00      	cmp	r2, #0
 8006706:	d111      	bne.n	800672c <wizphy_getphyconf+0xc2>
 8006708:	2201      	movs	r2, #1
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8006712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2301      	movne	r3, #1
 800671c:	2300      	moveq	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	70da      	strb	r2, [r3, #3]
         break;
 800672a:	e003      	b.n	8006734 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	70da      	strb	r2, [r3, #3]
         break;
 8006732:	bf00      	nop
   }
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800674a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800674e:	f7ff f919 	bl	8005984 <WIZCHIP_READ>
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d102      	bne.n	8006766 <wizphy_setphypmode+0x2a>
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
 8006764:	e030      	b.n	80067c8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800676c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d104      	bne.n	800677e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800677a:	73fb      	strb	r3, [r7, #15]
 800677c:	e003      	b.n	8006786 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006784:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	4619      	mov	r1, r3
 800678a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800678e:	f7ff f945 	bl	8005a1c <WIZCHIP_WRITE>
   wizphy_reset();
 8006792:	f7ff ff01 	bl	8006598 <wizphy_reset>
   tmp = getPHYCFGR();
 8006796:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800679a:	f7ff f8f3 	bl	8005984 <WIZCHIP_READ>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d106      	bne.n	80067b6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <wizphy_setphypmode+0x88>
 80067b2:	2300      	movs	r3, #0
 80067b4:	e008      	b.n	80067c8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <wizphy_setphypmode+0x88>
 80067c0:	2300      	movs	r3, #0
 80067c2:	e001      	b.n	80067c8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80067c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2206      	movs	r2, #6
 80067dc:	4619      	mov	r1, r3
 80067de:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80067e2:	f7ff f9c9 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	330e      	adds	r3, #14
 80067ea:	2204      	movs	r2, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80067f2:	f7ff f9c1 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	330a      	adds	r3, #10
 80067fa:	2204      	movs	r2, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006802:	f7ff f9b9 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3306      	adds	r3, #6
 800680a:	2204      	movs	r2, #4
 800680c:	4619      	mov	r1, r3
 800680e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006812:	f7ff f9b1 	bl	8005b78 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7c9a      	ldrb	r2, [r3, #18]
 800681a:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <wizchip_setnetinfo+0x78>)
 800681c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	7cda      	ldrb	r2, [r3, #19]
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <wizchip_setnetinfo+0x78>)
 8006824:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	7d1a      	ldrb	r2, [r3, #20]
 800682a:	4b07      	ldr	r3, [pc, #28]	; (8006848 <wizchip_setnetinfo+0x78>)
 800682c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7d5a      	ldrb	r2, [r3, #21]
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <wizchip_setnetinfo+0x78>)
 8006834:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	7d9a      	ldrb	r2, [r3, #22]
 800683a:	4b04      	ldr	r3, [pc, #16]	; (800684c <wizchip_setnetinfo+0x7c>)
 800683c:	701a      	strb	r2, [r3, #0]
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000484 	.word	0x20000484
 800684c:	20000488 	.word	0x20000488

08006850 <__errno>:
 8006850:	4b01      	ldr	r3, [pc, #4]	; (8006858 <__errno+0x8>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000298 	.word	0x20000298

0800685c <__libc_init_array>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4d0d      	ldr	r5, [pc, #52]	; (8006894 <__libc_init_array+0x38>)
 8006860:	4c0d      	ldr	r4, [pc, #52]	; (8006898 <__libc_init_array+0x3c>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	2600      	movs	r6, #0
 8006868:	42a6      	cmp	r6, r4
 800686a:	d109      	bne.n	8006880 <__libc_init_array+0x24>
 800686c:	4d0b      	ldr	r5, [pc, #44]	; (800689c <__libc_init_array+0x40>)
 800686e:	4c0c      	ldr	r4, [pc, #48]	; (80068a0 <__libc_init_array+0x44>)
 8006870:	f001 fa90 	bl	8007d94 <_init>
 8006874:	1b64      	subs	r4, r4, r5
 8006876:	10a4      	asrs	r4, r4, #2
 8006878:	2600      	movs	r6, #0
 800687a:	42a6      	cmp	r6, r4
 800687c:	d105      	bne.n	800688a <__libc_init_array+0x2e>
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	f855 3b04 	ldr.w	r3, [r5], #4
 8006884:	4798      	blx	r3
 8006886:	3601      	adds	r6, #1
 8006888:	e7ee      	b.n	8006868 <__libc_init_array+0xc>
 800688a:	f855 3b04 	ldr.w	r3, [r5], #4
 800688e:	4798      	blx	r3
 8006890:	3601      	adds	r6, #1
 8006892:	e7f2      	b.n	800687a <__libc_init_array+0x1e>
 8006894:	08007ff4 	.word	0x08007ff4
 8006898:	08007ff4 	.word	0x08007ff4
 800689c:	08007ff4 	.word	0x08007ff4
 80068a0:	08007ff8 	.word	0x08007ff8

080068a4 <__retarget_lock_init_recursive>:
 80068a4:	4770      	bx	lr

080068a6 <__retarget_lock_acquire_recursive>:
 80068a6:	4770      	bx	lr

080068a8 <__retarget_lock_release_recursive>:
 80068a8:	4770      	bx	lr
	...

080068ac <malloc>:
 80068ac:	4b02      	ldr	r3, [pc, #8]	; (80068b8 <malloc+0xc>)
 80068ae:	4601      	mov	r1, r0
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	f000 b885 	b.w	80069c0 <_malloc_r>
 80068b6:	bf00      	nop
 80068b8:	20000298 	.word	0x20000298

080068bc <memcpy>:
 80068bc:	440a      	add	r2, r1
 80068be:	4291      	cmp	r1, r2
 80068c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068c4:	d100      	bne.n	80068c8 <memcpy+0xc>
 80068c6:	4770      	bx	lr
 80068c8:	b510      	push	{r4, lr}
 80068ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068d2:	4291      	cmp	r1, r2
 80068d4:	d1f9      	bne.n	80068ca <memcpy+0xe>
 80068d6:	bd10      	pop	{r4, pc}

080068d8 <memset>:
 80068d8:	4402      	add	r2, r0
 80068da:	4603      	mov	r3, r0
 80068dc:	4293      	cmp	r3, r2
 80068de:	d100      	bne.n	80068e2 <memset+0xa>
 80068e0:	4770      	bx	lr
 80068e2:	f803 1b01 	strb.w	r1, [r3], #1
 80068e6:	e7f9      	b.n	80068dc <memset+0x4>

080068e8 <_free_r>:
 80068e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068ea:	2900      	cmp	r1, #0
 80068ec:	d044      	beq.n	8006978 <_free_r+0x90>
 80068ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f2:	9001      	str	r0, [sp, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f1a1 0404 	sub.w	r4, r1, #4
 80068fa:	bfb8      	it	lt
 80068fc:	18e4      	addlt	r4, r4, r3
 80068fe:	f000 fbe9 	bl	80070d4 <__malloc_lock>
 8006902:	4a1e      	ldr	r2, [pc, #120]	; (800697c <_free_r+0x94>)
 8006904:	9801      	ldr	r0, [sp, #4]
 8006906:	6813      	ldr	r3, [r2, #0]
 8006908:	b933      	cbnz	r3, 8006918 <_free_r+0x30>
 800690a:	6063      	str	r3, [r4, #4]
 800690c:	6014      	str	r4, [r2, #0]
 800690e:	b003      	add	sp, #12
 8006910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006914:	f000 bbe4 	b.w	80070e0 <__malloc_unlock>
 8006918:	42a3      	cmp	r3, r4
 800691a:	d908      	bls.n	800692e <_free_r+0x46>
 800691c:	6825      	ldr	r5, [r4, #0]
 800691e:	1961      	adds	r1, r4, r5
 8006920:	428b      	cmp	r3, r1
 8006922:	bf01      	itttt	eq
 8006924:	6819      	ldreq	r1, [r3, #0]
 8006926:	685b      	ldreq	r3, [r3, #4]
 8006928:	1949      	addeq	r1, r1, r5
 800692a:	6021      	streq	r1, [r4, #0]
 800692c:	e7ed      	b.n	800690a <_free_r+0x22>
 800692e:	461a      	mov	r2, r3
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	b10b      	cbz	r3, 8006938 <_free_r+0x50>
 8006934:	42a3      	cmp	r3, r4
 8006936:	d9fa      	bls.n	800692e <_free_r+0x46>
 8006938:	6811      	ldr	r1, [r2, #0]
 800693a:	1855      	adds	r5, r2, r1
 800693c:	42a5      	cmp	r5, r4
 800693e:	d10b      	bne.n	8006958 <_free_r+0x70>
 8006940:	6824      	ldr	r4, [r4, #0]
 8006942:	4421      	add	r1, r4
 8006944:	1854      	adds	r4, r2, r1
 8006946:	42a3      	cmp	r3, r4
 8006948:	6011      	str	r1, [r2, #0]
 800694a:	d1e0      	bne.n	800690e <_free_r+0x26>
 800694c:	681c      	ldr	r4, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	6053      	str	r3, [r2, #4]
 8006952:	4421      	add	r1, r4
 8006954:	6011      	str	r1, [r2, #0]
 8006956:	e7da      	b.n	800690e <_free_r+0x26>
 8006958:	d902      	bls.n	8006960 <_free_r+0x78>
 800695a:	230c      	movs	r3, #12
 800695c:	6003      	str	r3, [r0, #0]
 800695e:	e7d6      	b.n	800690e <_free_r+0x26>
 8006960:	6825      	ldr	r5, [r4, #0]
 8006962:	1961      	adds	r1, r4, r5
 8006964:	428b      	cmp	r3, r1
 8006966:	bf04      	itt	eq
 8006968:	6819      	ldreq	r1, [r3, #0]
 800696a:	685b      	ldreq	r3, [r3, #4]
 800696c:	6063      	str	r3, [r4, #4]
 800696e:	bf04      	itt	eq
 8006970:	1949      	addeq	r1, r1, r5
 8006972:	6021      	streq	r1, [r4, #0]
 8006974:	6054      	str	r4, [r2, #4]
 8006976:	e7ca      	b.n	800690e <_free_r+0x26>
 8006978:	b003      	add	sp, #12
 800697a:	bd30      	pop	{r4, r5, pc}
 800697c:	2000048c 	.word	0x2000048c

08006980 <sbrk_aligned>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4e0e      	ldr	r6, [pc, #56]	; (80069bc <sbrk_aligned+0x3c>)
 8006984:	460c      	mov	r4, r1
 8006986:	6831      	ldr	r1, [r6, #0]
 8006988:	4605      	mov	r5, r0
 800698a:	b911      	cbnz	r1, 8006992 <sbrk_aligned+0x12>
 800698c:	f000 f8ca 	bl	8006b24 <_sbrk_r>
 8006990:	6030      	str	r0, [r6, #0]
 8006992:	4621      	mov	r1, r4
 8006994:	4628      	mov	r0, r5
 8006996:	f000 f8c5 	bl	8006b24 <_sbrk_r>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	d00a      	beq.n	80069b4 <sbrk_aligned+0x34>
 800699e:	1cc4      	adds	r4, r0, #3
 80069a0:	f024 0403 	bic.w	r4, r4, #3
 80069a4:	42a0      	cmp	r0, r4
 80069a6:	d007      	beq.n	80069b8 <sbrk_aligned+0x38>
 80069a8:	1a21      	subs	r1, r4, r0
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f8ba 	bl	8006b24 <_sbrk_r>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d101      	bne.n	80069b8 <sbrk_aligned+0x38>
 80069b4:	f04f 34ff 	mov.w	r4, #4294967295
 80069b8:	4620      	mov	r0, r4
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	20000490 	.word	0x20000490

080069c0 <_malloc_r>:
 80069c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c4:	1ccd      	adds	r5, r1, #3
 80069c6:	f025 0503 	bic.w	r5, r5, #3
 80069ca:	3508      	adds	r5, #8
 80069cc:	2d0c      	cmp	r5, #12
 80069ce:	bf38      	it	cc
 80069d0:	250c      	movcc	r5, #12
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	4607      	mov	r7, r0
 80069d6:	db01      	blt.n	80069dc <_malloc_r+0x1c>
 80069d8:	42a9      	cmp	r1, r5
 80069da:	d905      	bls.n	80069e8 <_malloc_r+0x28>
 80069dc:	230c      	movs	r3, #12
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	2600      	movs	r6, #0
 80069e2:	4630      	mov	r0, r6
 80069e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e8:	4e2e      	ldr	r6, [pc, #184]	; (8006aa4 <_malloc_r+0xe4>)
 80069ea:	f000 fb73 	bl	80070d4 <__malloc_lock>
 80069ee:	6833      	ldr	r3, [r6, #0]
 80069f0:	461c      	mov	r4, r3
 80069f2:	bb34      	cbnz	r4, 8006a42 <_malloc_r+0x82>
 80069f4:	4629      	mov	r1, r5
 80069f6:	4638      	mov	r0, r7
 80069f8:	f7ff ffc2 	bl	8006980 <sbrk_aligned>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	4604      	mov	r4, r0
 8006a00:	d14d      	bne.n	8006a9e <_malloc_r+0xde>
 8006a02:	6834      	ldr	r4, [r6, #0]
 8006a04:	4626      	mov	r6, r4
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	d140      	bne.n	8006a8c <_malloc_r+0xcc>
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4638      	mov	r0, r7
 8006a10:	eb04 0803 	add.w	r8, r4, r3
 8006a14:	f000 f886 	bl	8006b24 <_sbrk_r>
 8006a18:	4580      	cmp	r8, r0
 8006a1a:	d13a      	bne.n	8006a92 <_malloc_r+0xd2>
 8006a1c:	6821      	ldr	r1, [r4, #0]
 8006a1e:	3503      	adds	r5, #3
 8006a20:	1a6d      	subs	r5, r5, r1
 8006a22:	f025 0503 	bic.w	r5, r5, #3
 8006a26:	3508      	adds	r5, #8
 8006a28:	2d0c      	cmp	r5, #12
 8006a2a:	bf38      	it	cc
 8006a2c:	250c      	movcc	r5, #12
 8006a2e:	4629      	mov	r1, r5
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff ffa5 	bl	8006980 <sbrk_aligned>
 8006a36:	3001      	adds	r0, #1
 8006a38:	d02b      	beq.n	8006a92 <_malloc_r+0xd2>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	442b      	add	r3, r5
 8006a3e:	6023      	str	r3, [r4, #0]
 8006a40:	e00e      	b.n	8006a60 <_malloc_r+0xa0>
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	1b52      	subs	r2, r2, r5
 8006a46:	d41e      	bmi.n	8006a86 <_malloc_r+0xc6>
 8006a48:	2a0b      	cmp	r2, #11
 8006a4a:	d916      	bls.n	8006a7a <_malloc_r+0xba>
 8006a4c:	1961      	adds	r1, r4, r5
 8006a4e:	42a3      	cmp	r3, r4
 8006a50:	6025      	str	r5, [r4, #0]
 8006a52:	bf18      	it	ne
 8006a54:	6059      	strne	r1, [r3, #4]
 8006a56:	6863      	ldr	r3, [r4, #4]
 8006a58:	bf08      	it	eq
 8006a5a:	6031      	streq	r1, [r6, #0]
 8006a5c:	5162      	str	r2, [r4, r5]
 8006a5e:	604b      	str	r3, [r1, #4]
 8006a60:	4638      	mov	r0, r7
 8006a62:	f104 060b 	add.w	r6, r4, #11
 8006a66:	f000 fb3b 	bl	80070e0 <__malloc_unlock>
 8006a6a:	f026 0607 	bic.w	r6, r6, #7
 8006a6e:	1d23      	adds	r3, r4, #4
 8006a70:	1af2      	subs	r2, r6, r3
 8006a72:	d0b6      	beq.n	80069e2 <_malloc_r+0x22>
 8006a74:	1b9b      	subs	r3, r3, r6
 8006a76:	50a3      	str	r3, [r4, r2]
 8006a78:	e7b3      	b.n	80069e2 <_malloc_r+0x22>
 8006a7a:	6862      	ldr	r2, [r4, #4]
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	bf0c      	ite	eq
 8006a80:	6032      	streq	r2, [r6, #0]
 8006a82:	605a      	strne	r2, [r3, #4]
 8006a84:	e7ec      	b.n	8006a60 <_malloc_r+0xa0>
 8006a86:	4623      	mov	r3, r4
 8006a88:	6864      	ldr	r4, [r4, #4]
 8006a8a:	e7b2      	b.n	80069f2 <_malloc_r+0x32>
 8006a8c:	4634      	mov	r4, r6
 8006a8e:	6876      	ldr	r6, [r6, #4]
 8006a90:	e7b9      	b.n	8006a06 <_malloc_r+0x46>
 8006a92:	230c      	movs	r3, #12
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4638      	mov	r0, r7
 8006a98:	f000 fb22 	bl	80070e0 <__malloc_unlock>
 8006a9c:	e7a1      	b.n	80069e2 <_malloc_r+0x22>
 8006a9e:	6025      	str	r5, [r4, #0]
 8006aa0:	e7de      	b.n	8006a60 <_malloc_r+0xa0>
 8006aa2:	bf00      	nop
 8006aa4:	2000048c 	.word	0x2000048c

08006aa8 <rand>:
 8006aa8:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <rand+0x5c>)
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	681c      	ldr	r4, [r3, #0]
 8006aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ab0:	b9b3      	cbnz	r3, 8006ae0 <rand+0x38>
 8006ab2:	2018      	movs	r0, #24
 8006ab4:	f7ff fefa 	bl	80068ac <malloc>
 8006ab8:	63a0      	str	r0, [r4, #56]	; 0x38
 8006aba:	b928      	cbnz	r0, 8006ac8 <rand+0x20>
 8006abc:	4602      	mov	r2, r0
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <rand+0x60>)
 8006ac0:	4812      	ldr	r0, [pc, #72]	; (8006b0c <rand+0x64>)
 8006ac2:	214e      	movs	r1, #78	; 0x4e
 8006ac4:	f000 f8ba 	bl	8006c3c <__assert_func>
 8006ac8:	4a11      	ldr	r2, [pc, #68]	; (8006b10 <rand+0x68>)
 8006aca:	4b12      	ldr	r3, [pc, #72]	; (8006b14 <rand+0x6c>)
 8006acc:	e9c0 2300 	strd	r2, r3, [r0]
 8006ad0:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <rand+0x70>)
 8006ad2:	6083      	str	r3, [r0, #8]
 8006ad4:	230b      	movs	r3, #11
 8006ad6:	8183      	strh	r3, [r0, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	2300      	movs	r3, #0
 8006adc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006ae0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	; (8006b1c <rand+0x74>)
 8006ae4:	6920      	ldr	r0, [r4, #16]
 8006ae6:	6963      	ldr	r3, [r4, #20]
 8006ae8:	490d      	ldr	r1, [pc, #52]	; (8006b20 <rand+0x78>)
 8006aea:	4342      	muls	r2, r0
 8006aec:	fb01 2203 	mla	r2, r1, r3, r2
 8006af0:	fba0 0101 	umull	r0, r1, r0, r1
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	eb42 0001 	adc.w	r0, r2, r1
 8006afa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006afe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006b02:	bd10      	pop	{r4, pc}
 8006b04:	20000298 	.word	0x20000298
 8006b08:	08007e4c 	.word	0x08007e4c
 8006b0c:	08007e63 	.word	0x08007e63
 8006b10:	abcd330e 	.word	0xabcd330e
 8006b14:	e66d1234 	.word	0xe66d1234
 8006b18:	0005deec 	.word	0x0005deec
 8006b1c:	5851f42d 	.word	0x5851f42d
 8006b20:	4c957f2d 	.word	0x4c957f2d

08006b24 <_sbrk_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d06      	ldr	r5, [pc, #24]	; (8006b40 <_sbrk_r+0x1c>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	f7fa fc64 	bl	80013fc <_sbrk>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_sbrk_r+0x1a>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_sbrk_r+0x1a>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20000494 	.word	0x20000494

08006b44 <siprintf>:
 8006b44:	b40e      	push	{r1, r2, r3}
 8006b46:	b500      	push	{lr}
 8006b48:	b09c      	sub	sp, #112	; 0x70
 8006b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b4c:	9002      	str	r0, [sp, #8]
 8006b4e:	9006      	str	r0, [sp, #24]
 8006b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b54:	4809      	ldr	r0, [pc, #36]	; (8006b7c <siprintf+0x38>)
 8006b56:	9107      	str	r1, [sp, #28]
 8006b58:	9104      	str	r1, [sp, #16]
 8006b5a:	4909      	ldr	r1, [pc, #36]	; (8006b80 <siprintf+0x3c>)
 8006b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b60:	9105      	str	r1, [sp, #20]
 8006b62:	6800      	ldr	r0, [r0, #0]
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	a902      	add	r1, sp, #8
 8006b68:	f000 fb1c 	bl	80071a4 <_svfiprintf_r>
 8006b6c:	9b02      	ldr	r3, [sp, #8]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	b01c      	add	sp, #112	; 0x70
 8006b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b78:	b003      	add	sp, #12
 8006b7a:	4770      	bx	lr
 8006b7c:	20000298 	.word	0x20000298
 8006b80:	ffff0208 	.word	0xffff0208

08006b84 <strtok>:
 8006b84:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <strtok+0x5c>)
 8006b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b88:	681e      	ldr	r6, [r3, #0]
 8006b8a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	b9fc      	cbnz	r4, 8006bd0 <strtok+0x4c>
 8006b90:	2050      	movs	r0, #80	; 0x50
 8006b92:	9101      	str	r1, [sp, #4]
 8006b94:	f7ff fe8a 	bl	80068ac <malloc>
 8006b98:	9901      	ldr	r1, [sp, #4]
 8006b9a:	65b0      	str	r0, [r6, #88]	; 0x58
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	b920      	cbnz	r0, 8006baa <strtok+0x26>
 8006ba0:	4b10      	ldr	r3, [pc, #64]	; (8006be4 <strtok+0x60>)
 8006ba2:	4811      	ldr	r0, [pc, #68]	; (8006be8 <strtok+0x64>)
 8006ba4:	2157      	movs	r1, #87	; 0x57
 8006ba6:	f000 f849 	bl	8006c3c <__assert_func>
 8006baa:	e9c0 4400 	strd	r4, r4, [r0]
 8006bae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006bb2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006bb6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006bba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006bbe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006bc2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006bc6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006bca:	6184      	str	r4, [r0, #24]
 8006bcc:	7704      	strb	r4, [r0, #28]
 8006bce:	6244      	str	r4, [r0, #36]	; 0x24
 8006bd0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	b002      	add	sp, #8
 8006bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bdc:	f000 b806 	b.w	8006bec <__strtok_r>
 8006be0:	20000298 	.word	0x20000298
 8006be4:	08007e4c 	.word	0x08007e4c
 8006be8:	08007ebe 	.word	0x08007ebe

08006bec <__strtok_r>:
 8006bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bee:	b908      	cbnz	r0, 8006bf4 <__strtok_r+0x8>
 8006bf0:	6810      	ldr	r0, [r2, #0]
 8006bf2:	b188      	cbz	r0, 8006c18 <__strtok_r+0x2c>
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006c02:	b91e      	cbnz	r6, 8006c0c <__strtok_r+0x20>
 8006c04:	b965      	cbnz	r5, 8006c20 <__strtok_r+0x34>
 8006c06:	6015      	str	r5, [r2, #0]
 8006c08:	4628      	mov	r0, r5
 8006c0a:	e005      	b.n	8006c18 <__strtok_r+0x2c>
 8006c0c:	42b5      	cmp	r5, r6
 8006c0e:	d1f6      	bne.n	8006bfe <__strtok_r+0x12>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f0      	bne.n	8006bf6 <__strtok_r+0xa>
 8006c14:	6014      	str	r4, [r2, #0]
 8006c16:	7003      	strb	r3, [r0, #0]
 8006c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1a:	461c      	mov	r4, r3
 8006c1c:	e00c      	b.n	8006c38 <__strtok_r+0x4c>
 8006c1e:	b915      	cbnz	r5, 8006c26 <__strtok_r+0x3a>
 8006c20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c24:	460e      	mov	r6, r1
 8006c26:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006c2a:	42ab      	cmp	r3, r5
 8006c2c:	d1f7      	bne.n	8006c1e <__strtok_r+0x32>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f3      	beq.n	8006c1a <__strtok_r+0x2e>
 8006c32:	2300      	movs	r3, #0
 8006c34:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006c38:	6014      	str	r4, [r2, #0]
 8006c3a:	e7ed      	b.n	8006c18 <__strtok_r+0x2c>

08006c3c <__assert_func>:
 8006c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c3e:	4614      	mov	r4, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <__assert_func+0x2c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4605      	mov	r5, r0
 8006c48:	68d8      	ldr	r0, [r3, #12]
 8006c4a:	b14c      	cbz	r4, 8006c60 <__assert_func+0x24>
 8006c4c:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <__assert_func+0x30>)
 8006c4e:	9100      	str	r1, [sp, #0]
 8006c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c54:	4906      	ldr	r1, [pc, #24]	; (8006c70 <__assert_func+0x34>)
 8006c56:	462b      	mov	r3, r5
 8006c58:	f000 f9a6 	bl	8006fa8 <fiprintf>
 8006c5c:	f000 ffa6 	bl	8007bac <abort>
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <__assert_func+0x38>)
 8006c62:	461c      	mov	r4, r3
 8006c64:	e7f3      	b.n	8006c4e <__assert_func+0x12>
 8006c66:	bf00      	nop
 8006c68:	20000298 	.word	0x20000298
 8006c6c:	08007f1b 	.word	0x08007f1b
 8006c70:	08007f28 	.word	0x08007f28
 8006c74:	08007f56 	.word	0x08007f56

08006c78 <__sflush_r>:
 8006c78:	898a      	ldrh	r2, [r1, #12]
 8006c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7e:	4605      	mov	r5, r0
 8006c80:	0710      	lsls	r0, r2, #28
 8006c82:	460c      	mov	r4, r1
 8006c84:	d458      	bmi.n	8006d38 <__sflush_r+0xc0>
 8006c86:	684b      	ldr	r3, [r1, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dc05      	bgt.n	8006c98 <__sflush_r+0x20>
 8006c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dc02      	bgt.n	8006c98 <__sflush_r+0x20>
 8006c92:	2000      	movs	r0, #0
 8006c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c9a:	2e00      	cmp	r6, #0
 8006c9c:	d0f9      	beq.n	8006c92 <__sflush_r+0x1a>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ca4:	682f      	ldr	r7, [r5, #0]
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	d032      	beq.n	8006d10 <__sflush_r+0x98>
 8006caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	075a      	lsls	r2, r3, #29
 8006cb0:	d505      	bpl.n	8006cbe <__sflush_r+0x46>
 8006cb2:	6863      	ldr	r3, [r4, #4]
 8006cb4:	1ac0      	subs	r0, r0, r3
 8006cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cb8:	b10b      	cbz	r3, 8006cbe <__sflush_r+0x46>
 8006cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cbc:	1ac0      	subs	r0, r0, r3
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc4:	6a21      	ldr	r1, [r4, #32]
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b0      	blx	r6
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	d106      	bne.n	8006cde <__sflush_r+0x66>
 8006cd0:	6829      	ldr	r1, [r5, #0]
 8006cd2:	291d      	cmp	r1, #29
 8006cd4:	d82c      	bhi.n	8006d30 <__sflush_r+0xb8>
 8006cd6:	4a2a      	ldr	r2, [pc, #168]	; (8006d80 <__sflush_r+0x108>)
 8006cd8:	40ca      	lsrs	r2, r1
 8006cda:	07d6      	lsls	r6, r2, #31
 8006cdc:	d528      	bpl.n	8006d30 <__sflush_r+0xb8>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	6062      	str	r2, [r4, #4]
 8006ce2:	04d9      	lsls	r1, r3, #19
 8006ce4:	6922      	ldr	r2, [r4, #16]
 8006ce6:	6022      	str	r2, [r4, #0]
 8006ce8:	d504      	bpl.n	8006cf4 <__sflush_r+0x7c>
 8006cea:	1c42      	adds	r2, r0, #1
 8006cec:	d101      	bne.n	8006cf2 <__sflush_r+0x7a>
 8006cee:	682b      	ldr	r3, [r5, #0]
 8006cf0:	b903      	cbnz	r3, 8006cf4 <__sflush_r+0x7c>
 8006cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8006cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf6:	602f      	str	r7, [r5, #0]
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	d0ca      	beq.n	8006c92 <__sflush_r+0x1a>
 8006cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d00:	4299      	cmp	r1, r3
 8006d02:	d002      	beq.n	8006d0a <__sflush_r+0x92>
 8006d04:	4628      	mov	r0, r5
 8006d06:	f7ff fdef 	bl	80068e8 <_free_r>
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d0e:	e7c1      	b.n	8006c94 <__sflush_r+0x1c>
 8006d10:	6a21      	ldr	r1, [r4, #32]
 8006d12:	2301      	movs	r3, #1
 8006d14:	4628      	mov	r0, r5
 8006d16:	47b0      	blx	r6
 8006d18:	1c41      	adds	r1, r0, #1
 8006d1a:	d1c7      	bne.n	8006cac <__sflush_r+0x34>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0c4      	beq.n	8006cac <__sflush_r+0x34>
 8006d22:	2b1d      	cmp	r3, #29
 8006d24:	d001      	beq.n	8006d2a <__sflush_r+0xb2>
 8006d26:	2b16      	cmp	r3, #22
 8006d28:	d101      	bne.n	8006d2e <__sflush_r+0xb6>
 8006d2a:	602f      	str	r7, [r5, #0]
 8006d2c:	e7b1      	b.n	8006c92 <__sflush_r+0x1a>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d34:	81a3      	strh	r3, [r4, #12]
 8006d36:	e7ad      	b.n	8006c94 <__sflush_r+0x1c>
 8006d38:	690f      	ldr	r7, [r1, #16]
 8006d3a:	2f00      	cmp	r7, #0
 8006d3c:	d0a9      	beq.n	8006c92 <__sflush_r+0x1a>
 8006d3e:	0793      	lsls	r3, r2, #30
 8006d40:	680e      	ldr	r6, [r1, #0]
 8006d42:	bf08      	it	eq
 8006d44:	694b      	ldreq	r3, [r1, #20]
 8006d46:	600f      	str	r7, [r1, #0]
 8006d48:	bf18      	it	ne
 8006d4a:	2300      	movne	r3, #0
 8006d4c:	eba6 0807 	sub.w	r8, r6, r7
 8006d50:	608b      	str	r3, [r1, #8]
 8006d52:	f1b8 0f00 	cmp.w	r8, #0
 8006d56:	dd9c      	ble.n	8006c92 <__sflush_r+0x1a>
 8006d58:	6a21      	ldr	r1, [r4, #32]
 8006d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d5c:	4643      	mov	r3, r8
 8006d5e:	463a      	mov	r2, r7
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b0      	blx	r6
 8006d64:	2800      	cmp	r0, #0
 8006d66:	dc06      	bgt.n	8006d76 <__sflush_r+0xfe>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e78e      	b.n	8006c94 <__sflush_r+0x1c>
 8006d76:	4407      	add	r7, r0
 8006d78:	eba8 0800 	sub.w	r8, r8, r0
 8006d7c:	e7e9      	b.n	8006d52 <__sflush_r+0xda>
 8006d7e:	bf00      	nop
 8006d80:	20400001 	.word	0x20400001

08006d84 <_fflush_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	690b      	ldr	r3, [r1, #16]
 8006d88:	4605      	mov	r5, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	b913      	cbnz	r3, 8006d94 <_fflush_r+0x10>
 8006d8e:	2500      	movs	r5, #0
 8006d90:	4628      	mov	r0, r5
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	b118      	cbz	r0, 8006d9e <_fflush_r+0x1a>
 8006d96:	6983      	ldr	r3, [r0, #24]
 8006d98:	b90b      	cbnz	r3, 8006d9e <_fflush_r+0x1a>
 8006d9a:	f000 f887 	bl	8006eac <__sinit>
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <_fflush_r+0x6c>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	d11b      	bne.n	8006ddc <_fflush_r+0x58>
 8006da4:	686c      	ldr	r4, [r5, #4]
 8006da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ef      	beq.n	8006d8e <_fflush_r+0xa>
 8006dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006db0:	07d0      	lsls	r0, r2, #31
 8006db2:	d404      	bmi.n	8006dbe <_fflush_r+0x3a>
 8006db4:	0599      	lsls	r1, r3, #22
 8006db6:	d402      	bmi.n	8006dbe <_fflush_r+0x3a>
 8006db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dba:	f7ff fd74 	bl	80068a6 <__retarget_lock_acquire_recursive>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	f7ff ff59 	bl	8006c78 <__sflush_r>
 8006dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc8:	07da      	lsls	r2, r3, #31
 8006dca:	4605      	mov	r5, r0
 8006dcc:	d4e0      	bmi.n	8006d90 <_fflush_r+0xc>
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	059b      	lsls	r3, r3, #22
 8006dd2:	d4dd      	bmi.n	8006d90 <_fflush_r+0xc>
 8006dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd6:	f7ff fd67 	bl	80068a8 <__retarget_lock_release_recursive>
 8006dda:	e7d9      	b.n	8006d90 <_fflush_r+0xc>
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <_fflush_r+0x70>)
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d101      	bne.n	8006de6 <_fflush_r+0x62>
 8006de2:	68ac      	ldr	r4, [r5, #8]
 8006de4:	e7df      	b.n	8006da6 <_fflush_r+0x22>
 8006de6:	4b04      	ldr	r3, [pc, #16]	; (8006df8 <_fflush_r+0x74>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	bf08      	it	eq
 8006dec:	68ec      	ldreq	r4, [r5, #12]
 8006dee:	e7da      	b.n	8006da6 <_fflush_r+0x22>
 8006df0:	08007f78 	.word	0x08007f78
 8006df4:	08007f98 	.word	0x08007f98
 8006df8:	08007f58 	.word	0x08007f58

08006dfc <std>:
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	e9c0 3300 	strd	r3, r3, [r0]
 8006e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e0a:	6083      	str	r3, [r0, #8]
 8006e0c:	8181      	strh	r1, [r0, #12]
 8006e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e10:	81c2      	strh	r2, [r0, #14]
 8006e12:	6183      	str	r3, [r0, #24]
 8006e14:	4619      	mov	r1, r3
 8006e16:	2208      	movs	r2, #8
 8006e18:	305c      	adds	r0, #92	; 0x5c
 8006e1a:	f7ff fd5d 	bl	80068d8 <memset>
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <std+0x38>)
 8006e20:	6263      	str	r3, [r4, #36]	; 0x24
 8006e22:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <std+0x3c>)
 8006e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <std+0x40>)
 8006e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <std+0x44>)
 8006e2c:	6224      	str	r4, [r4, #32]
 8006e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	bf00      	nop
 8006e34:	08007981 	.word	0x08007981
 8006e38:	080079a3 	.word	0x080079a3
 8006e3c:	080079db 	.word	0x080079db
 8006e40:	080079ff 	.word	0x080079ff

08006e44 <_cleanup_r>:
 8006e44:	4901      	ldr	r1, [pc, #4]	; (8006e4c <_cleanup_r+0x8>)
 8006e46:	f000 b8c1 	b.w	8006fcc <_fwalk_reent>
 8006e4a:	bf00      	nop
 8006e4c:	08006d85 	.word	0x08006d85

08006e50 <__sfmoreglue>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	2268      	movs	r2, #104	; 0x68
 8006e54:	1e4d      	subs	r5, r1, #1
 8006e56:	4355      	muls	r5, r2
 8006e58:	460e      	mov	r6, r1
 8006e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e5e:	f7ff fdaf 	bl	80069c0 <_malloc_r>
 8006e62:	4604      	mov	r4, r0
 8006e64:	b140      	cbz	r0, 8006e78 <__sfmoreglue+0x28>
 8006e66:	2100      	movs	r1, #0
 8006e68:	e9c0 1600 	strd	r1, r6, [r0]
 8006e6c:	300c      	adds	r0, #12
 8006e6e:	60a0      	str	r0, [r4, #8]
 8006e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e74:	f7ff fd30 	bl	80068d8 <memset>
 8006e78:	4620      	mov	r0, r4
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}

08006e7c <__sfp_lock_acquire>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__sfp_lock_acquire+0x8>)
 8006e7e:	f7ff bd12 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 8006e82:	bf00      	nop
 8006e84:	2000048a 	.word	0x2000048a

08006e88 <__sfp_lock_release>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__sfp_lock_release+0x8>)
 8006e8a:	f7ff bd0d 	b.w	80068a8 <__retarget_lock_release_recursive>
 8006e8e:	bf00      	nop
 8006e90:	2000048a 	.word	0x2000048a

08006e94 <__sinit_lock_acquire>:
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <__sinit_lock_acquire+0x8>)
 8006e96:	f7ff bd06 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	2000048b 	.word	0x2000048b

08006ea0 <__sinit_lock_release>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	; (8006ea8 <__sinit_lock_release+0x8>)
 8006ea2:	f7ff bd01 	b.w	80068a8 <__retarget_lock_release_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	2000048b 	.word	0x2000048b

08006eac <__sinit>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	4604      	mov	r4, r0
 8006eb0:	f7ff fff0 	bl	8006e94 <__sinit_lock_acquire>
 8006eb4:	69a3      	ldr	r3, [r4, #24]
 8006eb6:	b11b      	cbz	r3, 8006ec0 <__sinit+0x14>
 8006eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ebc:	f7ff bff0 	b.w	8006ea0 <__sinit_lock_release>
 8006ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ec6:	4b13      	ldr	r3, [pc, #76]	; (8006f14 <__sinit+0x68>)
 8006ec8:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <__sinit+0x6c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	bf04      	itt	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	61a3      	streq	r3, [r4, #24]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 f820 	bl	8006f1c <__sfp>
 8006edc:	6060      	str	r0, [r4, #4]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 f81c 	bl	8006f1c <__sfp>
 8006ee4:	60a0      	str	r0, [r4, #8]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f818 	bl	8006f1c <__sfp>
 8006eec:	2200      	movs	r2, #0
 8006eee:	60e0      	str	r0, [r4, #12]
 8006ef0:	2104      	movs	r1, #4
 8006ef2:	6860      	ldr	r0, [r4, #4]
 8006ef4:	f7ff ff82 	bl	8006dfc <std>
 8006ef8:	68a0      	ldr	r0, [r4, #8]
 8006efa:	2201      	movs	r2, #1
 8006efc:	2109      	movs	r1, #9
 8006efe:	f7ff ff7d 	bl	8006dfc <std>
 8006f02:	68e0      	ldr	r0, [r4, #12]
 8006f04:	2202      	movs	r2, #2
 8006f06:	2112      	movs	r1, #18
 8006f08:	f7ff ff78 	bl	8006dfc <std>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	61a3      	str	r3, [r4, #24]
 8006f10:	e7d2      	b.n	8006eb8 <__sinit+0xc>
 8006f12:	bf00      	nop
 8006f14:	08007e48 	.word	0x08007e48
 8006f18:	08006e45 	.word	0x08006e45

08006f1c <__sfp>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	4607      	mov	r7, r0
 8006f20:	f7ff ffac 	bl	8006e7c <__sfp_lock_acquire>
 8006f24:	4b1e      	ldr	r3, [pc, #120]	; (8006fa0 <__sfp+0x84>)
 8006f26:	681e      	ldr	r6, [r3, #0]
 8006f28:	69b3      	ldr	r3, [r6, #24]
 8006f2a:	b913      	cbnz	r3, 8006f32 <__sfp+0x16>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff ffbd 	bl	8006eac <__sinit>
 8006f32:	3648      	adds	r6, #72	; 0x48
 8006f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	d503      	bpl.n	8006f44 <__sfp+0x28>
 8006f3c:	6833      	ldr	r3, [r6, #0]
 8006f3e:	b30b      	cbz	r3, 8006f84 <__sfp+0x68>
 8006f40:	6836      	ldr	r6, [r6, #0]
 8006f42:	e7f7      	b.n	8006f34 <__sfp+0x18>
 8006f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f48:	b9d5      	cbnz	r5, 8006f80 <__sfp+0x64>
 8006f4a:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <__sfp+0x88>)
 8006f4c:	60e3      	str	r3, [r4, #12]
 8006f4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f52:	6665      	str	r5, [r4, #100]	; 0x64
 8006f54:	f7ff fca6 	bl	80068a4 <__retarget_lock_init_recursive>
 8006f58:	f7ff ff96 	bl	8006e88 <__sfp_lock_release>
 8006f5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f64:	6025      	str	r5, [r4, #0]
 8006f66:	61a5      	str	r5, [r4, #24]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f70:	f7ff fcb2 	bl	80068d8 <memset>
 8006f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f80:	3468      	adds	r4, #104	; 0x68
 8006f82:	e7d9      	b.n	8006f38 <__sfp+0x1c>
 8006f84:	2104      	movs	r1, #4
 8006f86:	4638      	mov	r0, r7
 8006f88:	f7ff ff62 	bl	8006e50 <__sfmoreglue>
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	6030      	str	r0, [r6, #0]
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d1d5      	bne.n	8006f40 <__sfp+0x24>
 8006f94:	f7ff ff78 	bl	8006e88 <__sfp_lock_release>
 8006f98:	230c      	movs	r3, #12
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	e7ee      	b.n	8006f7c <__sfp+0x60>
 8006f9e:	bf00      	nop
 8006fa0:	08007e48 	.word	0x08007e48
 8006fa4:	ffff0001 	.word	0xffff0001

08006fa8 <fiprintf>:
 8006fa8:	b40e      	push	{r1, r2, r3}
 8006faa:	b503      	push	{r0, r1, lr}
 8006fac:	4601      	mov	r1, r0
 8006fae:	ab03      	add	r3, sp, #12
 8006fb0:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <fiprintf+0x20>)
 8006fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb6:	6800      	ldr	r0, [r0, #0]
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	f000 fa1d 	bl	80073f8 <_vfiprintf_r>
 8006fbe:	b002      	add	sp, #8
 8006fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc4:	b003      	add	sp, #12
 8006fc6:	4770      	bx	lr
 8006fc8:	20000298 	.word	0x20000298

08006fcc <_fwalk_reent>:
 8006fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	4688      	mov	r8, r1
 8006fd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fd8:	2700      	movs	r7, #0
 8006fda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fde:	f1b9 0901 	subs.w	r9, r9, #1
 8006fe2:	d505      	bpl.n	8006ff0 <_fwalk_reent+0x24>
 8006fe4:	6824      	ldr	r4, [r4, #0]
 8006fe6:	2c00      	cmp	r4, #0
 8006fe8:	d1f7      	bne.n	8006fda <_fwalk_reent+0xe>
 8006fea:	4638      	mov	r0, r7
 8006fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff0:	89ab      	ldrh	r3, [r5, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d907      	bls.n	8007006 <_fwalk_reent+0x3a>
 8006ff6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	d003      	beq.n	8007006 <_fwalk_reent+0x3a>
 8006ffe:	4629      	mov	r1, r5
 8007000:	4630      	mov	r0, r6
 8007002:	47c0      	blx	r8
 8007004:	4307      	orrs	r7, r0
 8007006:	3568      	adds	r5, #104	; 0x68
 8007008:	e7e9      	b.n	8006fde <_fwalk_reent+0x12>

0800700a <__swhatbuf_r>:
 800700a:	b570      	push	{r4, r5, r6, lr}
 800700c:	460e      	mov	r6, r1
 800700e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007012:	2900      	cmp	r1, #0
 8007014:	b096      	sub	sp, #88	; 0x58
 8007016:	4614      	mov	r4, r2
 8007018:	461d      	mov	r5, r3
 800701a:	da08      	bge.n	800702e <__swhatbuf_r+0x24>
 800701c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	602a      	str	r2, [r5, #0]
 8007024:	061a      	lsls	r2, r3, #24
 8007026:	d410      	bmi.n	800704a <__swhatbuf_r+0x40>
 8007028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800702c:	e00e      	b.n	800704c <__swhatbuf_r+0x42>
 800702e:	466a      	mov	r2, sp
 8007030:	f000 fdd4 	bl	8007bdc <_fstat_r>
 8007034:	2800      	cmp	r0, #0
 8007036:	dbf1      	blt.n	800701c <__swhatbuf_r+0x12>
 8007038:	9a01      	ldr	r2, [sp, #4]
 800703a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800703e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007042:	425a      	negs	r2, r3
 8007044:	415a      	adcs	r2, r3
 8007046:	602a      	str	r2, [r5, #0]
 8007048:	e7ee      	b.n	8007028 <__swhatbuf_r+0x1e>
 800704a:	2340      	movs	r3, #64	; 0x40
 800704c:	2000      	movs	r0, #0
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	b016      	add	sp, #88	; 0x58
 8007052:	bd70      	pop	{r4, r5, r6, pc}

08007054 <__smakebuf_r>:
 8007054:	898b      	ldrh	r3, [r1, #12]
 8007056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007058:	079d      	lsls	r5, r3, #30
 800705a:	4606      	mov	r6, r0
 800705c:	460c      	mov	r4, r1
 800705e:	d507      	bpl.n	8007070 <__smakebuf_r+0x1c>
 8007060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	6123      	str	r3, [r4, #16]
 8007068:	2301      	movs	r3, #1
 800706a:	6163      	str	r3, [r4, #20]
 800706c:	b002      	add	sp, #8
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	ab01      	add	r3, sp, #4
 8007072:	466a      	mov	r2, sp
 8007074:	f7ff ffc9 	bl	800700a <__swhatbuf_r>
 8007078:	9900      	ldr	r1, [sp, #0]
 800707a:	4605      	mov	r5, r0
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff fc9f 	bl	80069c0 <_malloc_r>
 8007082:	b948      	cbnz	r0, 8007098 <__smakebuf_r+0x44>
 8007084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007088:	059a      	lsls	r2, r3, #22
 800708a:	d4ef      	bmi.n	800706c <__smakebuf_r+0x18>
 800708c:	f023 0303 	bic.w	r3, r3, #3
 8007090:	f043 0302 	orr.w	r3, r3, #2
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	e7e3      	b.n	8007060 <__smakebuf_r+0xc>
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <__smakebuf_r+0x7c>)
 800709a:	62b3      	str	r3, [r6, #40]	; 0x28
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	6020      	str	r0, [r4, #0]
 80070a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	9b00      	ldr	r3, [sp, #0]
 80070a8:	6163      	str	r3, [r4, #20]
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	6120      	str	r0, [r4, #16]
 80070ae:	b15b      	cbz	r3, 80070c8 <__smakebuf_r+0x74>
 80070b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b4:	4630      	mov	r0, r6
 80070b6:	f000 fda3 	bl	8007c00 <_isatty_r>
 80070ba:	b128      	cbz	r0, 80070c8 <__smakebuf_r+0x74>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	89a0      	ldrh	r0, [r4, #12]
 80070ca:	4305      	orrs	r5, r0
 80070cc:	81a5      	strh	r5, [r4, #12]
 80070ce:	e7cd      	b.n	800706c <__smakebuf_r+0x18>
 80070d0:	08006e45 	.word	0x08006e45

080070d4 <__malloc_lock>:
 80070d4:	4801      	ldr	r0, [pc, #4]	; (80070dc <__malloc_lock+0x8>)
 80070d6:	f7ff bbe6 	b.w	80068a6 <__retarget_lock_acquire_recursive>
 80070da:	bf00      	nop
 80070dc:	20000489 	.word	0x20000489

080070e0 <__malloc_unlock>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__malloc_unlock+0x8>)
 80070e2:	f7ff bbe1 	b.w	80068a8 <__retarget_lock_release_recursive>
 80070e6:	bf00      	nop
 80070e8:	20000489 	.word	0x20000489

080070ec <__ssputs_r>:
 80070ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	688e      	ldr	r6, [r1, #8]
 80070f2:	429e      	cmp	r6, r3
 80070f4:	4682      	mov	sl, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	4690      	mov	r8, r2
 80070fa:	461f      	mov	r7, r3
 80070fc:	d838      	bhi.n	8007170 <__ssputs_r+0x84>
 80070fe:	898a      	ldrh	r2, [r1, #12]
 8007100:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007104:	d032      	beq.n	800716c <__ssputs_r+0x80>
 8007106:	6825      	ldr	r5, [r4, #0]
 8007108:	6909      	ldr	r1, [r1, #16]
 800710a:	eba5 0901 	sub.w	r9, r5, r1
 800710e:	6965      	ldr	r5, [r4, #20]
 8007110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007118:	3301      	adds	r3, #1
 800711a:	444b      	add	r3, r9
 800711c:	106d      	asrs	r5, r5, #1
 800711e:	429d      	cmp	r5, r3
 8007120:	bf38      	it	cc
 8007122:	461d      	movcc	r5, r3
 8007124:	0553      	lsls	r3, r2, #21
 8007126:	d531      	bpl.n	800718c <__ssputs_r+0xa0>
 8007128:	4629      	mov	r1, r5
 800712a:	f7ff fc49 	bl	80069c0 <_malloc_r>
 800712e:	4606      	mov	r6, r0
 8007130:	b950      	cbnz	r0, 8007148 <__ssputs_r+0x5c>
 8007132:	230c      	movs	r3, #12
 8007134:	f8ca 3000 	str.w	r3, [sl]
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800713e:	81a3      	strh	r3, [r4, #12]
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	6921      	ldr	r1, [r4, #16]
 800714a:	464a      	mov	r2, r9
 800714c:	f7ff fbb6 	bl	80068bc <memcpy>
 8007150:	89a3      	ldrh	r3, [r4, #12]
 8007152:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715a:	81a3      	strh	r3, [r4, #12]
 800715c:	6126      	str	r6, [r4, #16]
 800715e:	6165      	str	r5, [r4, #20]
 8007160:	444e      	add	r6, r9
 8007162:	eba5 0509 	sub.w	r5, r5, r9
 8007166:	6026      	str	r6, [r4, #0]
 8007168:	60a5      	str	r5, [r4, #8]
 800716a:	463e      	mov	r6, r7
 800716c:	42be      	cmp	r6, r7
 800716e:	d900      	bls.n	8007172 <__ssputs_r+0x86>
 8007170:	463e      	mov	r6, r7
 8007172:	6820      	ldr	r0, [r4, #0]
 8007174:	4632      	mov	r2, r6
 8007176:	4641      	mov	r1, r8
 8007178:	f000 fd64 	bl	8007c44 <memmove>
 800717c:	68a3      	ldr	r3, [r4, #8]
 800717e:	1b9b      	subs	r3, r3, r6
 8007180:	60a3      	str	r3, [r4, #8]
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	4433      	add	r3, r6
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	2000      	movs	r0, #0
 800718a:	e7db      	b.n	8007144 <__ssputs_r+0x58>
 800718c:	462a      	mov	r2, r5
 800718e:	f000 fd73 	bl	8007c78 <_realloc_r>
 8007192:	4606      	mov	r6, r0
 8007194:	2800      	cmp	r0, #0
 8007196:	d1e1      	bne.n	800715c <__ssputs_r+0x70>
 8007198:	6921      	ldr	r1, [r4, #16]
 800719a:	4650      	mov	r0, sl
 800719c:	f7ff fba4 	bl	80068e8 <_free_r>
 80071a0:	e7c7      	b.n	8007132 <__ssputs_r+0x46>
	...

080071a4 <_svfiprintf_r>:
 80071a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	4698      	mov	r8, r3
 80071aa:	898b      	ldrh	r3, [r1, #12]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	b09d      	sub	sp, #116	; 0x74
 80071b0:	4607      	mov	r7, r0
 80071b2:	460d      	mov	r5, r1
 80071b4:	4614      	mov	r4, r2
 80071b6:	d50e      	bpl.n	80071d6 <_svfiprintf_r+0x32>
 80071b8:	690b      	ldr	r3, [r1, #16]
 80071ba:	b963      	cbnz	r3, 80071d6 <_svfiprintf_r+0x32>
 80071bc:	2140      	movs	r1, #64	; 0x40
 80071be:	f7ff fbff 	bl	80069c0 <_malloc_r>
 80071c2:	6028      	str	r0, [r5, #0]
 80071c4:	6128      	str	r0, [r5, #16]
 80071c6:	b920      	cbnz	r0, 80071d2 <_svfiprintf_r+0x2e>
 80071c8:	230c      	movs	r3, #12
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	e0d1      	b.n	8007376 <_svfiprintf_r+0x1d2>
 80071d2:	2340      	movs	r3, #64	; 0x40
 80071d4:	616b      	str	r3, [r5, #20]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9309      	str	r3, [sp, #36]	; 0x24
 80071da:	2320      	movs	r3, #32
 80071dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e4:	2330      	movs	r3, #48	; 0x30
 80071e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007390 <_svfiprintf_r+0x1ec>
 80071ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071ee:	f04f 0901 	mov.w	r9, #1
 80071f2:	4623      	mov	r3, r4
 80071f4:	469a      	mov	sl, r3
 80071f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fa:	b10a      	cbz	r2, 8007200 <_svfiprintf_r+0x5c>
 80071fc:	2a25      	cmp	r2, #37	; 0x25
 80071fe:	d1f9      	bne.n	80071f4 <_svfiprintf_r+0x50>
 8007200:	ebba 0b04 	subs.w	fp, sl, r4
 8007204:	d00b      	beq.n	800721e <_svfiprintf_r+0x7a>
 8007206:	465b      	mov	r3, fp
 8007208:	4622      	mov	r2, r4
 800720a:	4629      	mov	r1, r5
 800720c:	4638      	mov	r0, r7
 800720e:	f7ff ff6d 	bl	80070ec <__ssputs_r>
 8007212:	3001      	adds	r0, #1
 8007214:	f000 80aa 	beq.w	800736c <_svfiprintf_r+0x1c8>
 8007218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800721a:	445a      	add	r2, fp
 800721c:	9209      	str	r2, [sp, #36]	; 0x24
 800721e:	f89a 3000 	ldrb.w	r3, [sl]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 80a2 	beq.w	800736c <_svfiprintf_r+0x1c8>
 8007228:	2300      	movs	r3, #0
 800722a:	f04f 32ff 	mov.w	r2, #4294967295
 800722e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007232:	f10a 0a01 	add.w	sl, sl, #1
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800723e:	931a      	str	r3, [sp, #104]	; 0x68
 8007240:	4654      	mov	r4, sl
 8007242:	2205      	movs	r2, #5
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	4851      	ldr	r0, [pc, #324]	; (8007390 <_svfiprintf_r+0x1ec>)
 800724a:	f7f8 ffd1 	bl	80001f0 <memchr>
 800724e:	9a04      	ldr	r2, [sp, #16]
 8007250:	b9d8      	cbnz	r0, 800728a <_svfiprintf_r+0xe6>
 8007252:	06d0      	lsls	r0, r2, #27
 8007254:	bf44      	itt	mi
 8007256:	2320      	movmi	r3, #32
 8007258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800725c:	0711      	lsls	r1, r2, #28
 800725e:	bf44      	itt	mi
 8007260:	232b      	movmi	r3, #43	; 0x2b
 8007262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007266:	f89a 3000 	ldrb.w	r3, [sl]
 800726a:	2b2a      	cmp	r3, #42	; 0x2a
 800726c:	d015      	beq.n	800729a <_svfiprintf_r+0xf6>
 800726e:	9a07      	ldr	r2, [sp, #28]
 8007270:	4654      	mov	r4, sl
 8007272:	2000      	movs	r0, #0
 8007274:	f04f 0c0a 	mov.w	ip, #10
 8007278:	4621      	mov	r1, r4
 800727a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727e:	3b30      	subs	r3, #48	; 0x30
 8007280:	2b09      	cmp	r3, #9
 8007282:	d94e      	bls.n	8007322 <_svfiprintf_r+0x17e>
 8007284:	b1b0      	cbz	r0, 80072b4 <_svfiprintf_r+0x110>
 8007286:	9207      	str	r2, [sp, #28]
 8007288:	e014      	b.n	80072b4 <_svfiprintf_r+0x110>
 800728a:	eba0 0308 	sub.w	r3, r0, r8
 800728e:	fa09 f303 	lsl.w	r3, r9, r3
 8007292:	4313      	orrs	r3, r2
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	46a2      	mov	sl, r4
 8007298:	e7d2      	b.n	8007240 <_svfiprintf_r+0x9c>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	1d19      	adds	r1, r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	bfbb      	ittet	lt
 80072a6:	425b      	neglt	r3, r3
 80072a8:	f042 0202 	orrlt.w	r2, r2, #2
 80072ac:	9307      	strge	r3, [sp, #28]
 80072ae:	9307      	strlt	r3, [sp, #28]
 80072b0:	bfb8      	it	lt
 80072b2:	9204      	strlt	r2, [sp, #16]
 80072b4:	7823      	ldrb	r3, [r4, #0]
 80072b6:	2b2e      	cmp	r3, #46	; 0x2e
 80072b8:	d10c      	bne.n	80072d4 <_svfiprintf_r+0x130>
 80072ba:	7863      	ldrb	r3, [r4, #1]
 80072bc:	2b2a      	cmp	r3, #42	; 0x2a
 80072be:	d135      	bne.n	800732c <_svfiprintf_r+0x188>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9203      	str	r2, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfb8      	it	lt
 80072cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80072d0:	3402      	adds	r4, #2
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073a0 <_svfiprintf_r+0x1fc>
 80072d8:	7821      	ldrb	r1, [r4, #0]
 80072da:	2203      	movs	r2, #3
 80072dc:	4650      	mov	r0, sl
 80072de:	f7f8 ff87 	bl	80001f0 <memchr>
 80072e2:	b140      	cbz	r0, 80072f6 <_svfiprintf_r+0x152>
 80072e4:	2340      	movs	r3, #64	; 0x40
 80072e6:	eba0 000a 	sub.w	r0, r0, sl
 80072ea:	fa03 f000 	lsl.w	r0, r3, r0
 80072ee:	9b04      	ldr	r3, [sp, #16]
 80072f0:	4303      	orrs	r3, r0
 80072f2:	3401      	adds	r4, #1
 80072f4:	9304      	str	r3, [sp, #16]
 80072f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fa:	4826      	ldr	r0, [pc, #152]	; (8007394 <_svfiprintf_r+0x1f0>)
 80072fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007300:	2206      	movs	r2, #6
 8007302:	f7f8 ff75 	bl	80001f0 <memchr>
 8007306:	2800      	cmp	r0, #0
 8007308:	d038      	beq.n	800737c <_svfiprintf_r+0x1d8>
 800730a:	4b23      	ldr	r3, [pc, #140]	; (8007398 <_svfiprintf_r+0x1f4>)
 800730c:	bb1b      	cbnz	r3, 8007356 <_svfiprintf_r+0x1b2>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	3307      	adds	r3, #7
 8007312:	f023 0307 	bic.w	r3, r3, #7
 8007316:	3308      	adds	r3, #8
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731c:	4433      	add	r3, r6
 800731e:	9309      	str	r3, [sp, #36]	; 0x24
 8007320:	e767      	b.n	80071f2 <_svfiprintf_r+0x4e>
 8007322:	fb0c 3202 	mla	r2, ip, r2, r3
 8007326:	460c      	mov	r4, r1
 8007328:	2001      	movs	r0, #1
 800732a:	e7a5      	b.n	8007278 <_svfiprintf_r+0xd4>
 800732c:	2300      	movs	r3, #0
 800732e:	3401      	adds	r4, #1
 8007330:	9305      	str	r3, [sp, #20]
 8007332:	4619      	mov	r1, r3
 8007334:	f04f 0c0a 	mov.w	ip, #10
 8007338:	4620      	mov	r0, r4
 800733a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800733e:	3a30      	subs	r2, #48	; 0x30
 8007340:	2a09      	cmp	r2, #9
 8007342:	d903      	bls.n	800734c <_svfiprintf_r+0x1a8>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0c5      	beq.n	80072d4 <_svfiprintf_r+0x130>
 8007348:	9105      	str	r1, [sp, #20]
 800734a:	e7c3      	b.n	80072d4 <_svfiprintf_r+0x130>
 800734c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007350:	4604      	mov	r4, r0
 8007352:	2301      	movs	r3, #1
 8007354:	e7f0      	b.n	8007338 <_svfiprintf_r+0x194>
 8007356:	ab03      	add	r3, sp, #12
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	462a      	mov	r2, r5
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <_svfiprintf_r+0x1f8>)
 800735e:	a904      	add	r1, sp, #16
 8007360:	4638      	mov	r0, r7
 8007362:	f3af 8000 	nop.w
 8007366:	1c42      	adds	r2, r0, #1
 8007368:	4606      	mov	r6, r0
 800736a:	d1d6      	bne.n	800731a <_svfiprintf_r+0x176>
 800736c:	89ab      	ldrh	r3, [r5, #12]
 800736e:	065b      	lsls	r3, r3, #25
 8007370:	f53f af2c 	bmi.w	80071cc <_svfiprintf_r+0x28>
 8007374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007376:	b01d      	add	sp, #116	; 0x74
 8007378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737c:	ab03      	add	r3, sp, #12
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	462a      	mov	r2, r5
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <_svfiprintf_r+0x1f8>)
 8007384:	a904      	add	r1, sp, #16
 8007386:	4638      	mov	r0, r7
 8007388:	f000 f9d4 	bl	8007734 <_printf_i>
 800738c:	e7eb      	b.n	8007366 <_svfiprintf_r+0x1c2>
 800738e:	bf00      	nop
 8007390:	08007fb8 	.word	0x08007fb8
 8007394:	08007fc2 	.word	0x08007fc2
 8007398:	00000000 	.word	0x00000000
 800739c:	080070ed 	.word	0x080070ed
 80073a0:	08007fbe 	.word	0x08007fbe

080073a4 <__sfputc_r>:
 80073a4:	6893      	ldr	r3, [r2, #8]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	b410      	push	{r4}
 80073ac:	6093      	str	r3, [r2, #8]
 80073ae:	da08      	bge.n	80073c2 <__sfputc_r+0x1e>
 80073b0:	6994      	ldr	r4, [r2, #24]
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	db01      	blt.n	80073ba <__sfputc_r+0x16>
 80073b6:	290a      	cmp	r1, #10
 80073b8:	d103      	bne.n	80073c2 <__sfputc_r+0x1e>
 80073ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073be:	f000 bb23 	b.w	8007a08 <__swbuf_r>
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	1c58      	adds	r0, r3, #1
 80073c6:	6010      	str	r0, [r2, #0]
 80073c8:	7019      	strb	r1, [r3, #0]
 80073ca:	4608      	mov	r0, r1
 80073cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <__sfputs_r>:
 80073d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d4:	4606      	mov	r6, r0
 80073d6:	460f      	mov	r7, r1
 80073d8:	4614      	mov	r4, r2
 80073da:	18d5      	adds	r5, r2, r3
 80073dc:	42ac      	cmp	r4, r5
 80073de:	d101      	bne.n	80073e4 <__sfputs_r+0x12>
 80073e0:	2000      	movs	r0, #0
 80073e2:	e007      	b.n	80073f4 <__sfputs_r+0x22>
 80073e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e8:	463a      	mov	r2, r7
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff ffda 	bl	80073a4 <__sfputc_r>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d1f3      	bne.n	80073dc <__sfputs_r+0xa>
 80073f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073f8 <_vfiprintf_r>:
 80073f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	460d      	mov	r5, r1
 80073fe:	b09d      	sub	sp, #116	; 0x74
 8007400:	4614      	mov	r4, r2
 8007402:	4698      	mov	r8, r3
 8007404:	4606      	mov	r6, r0
 8007406:	b118      	cbz	r0, 8007410 <_vfiprintf_r+0x18>
 8007408:	6983      	ldr	r3, [r0, #24]
 800740a:	b90b      	cbnz	r3, 8007410 <_vfiprintf_r+0x18>
 800740c:	f7ff fd4e 	bl	8006eac <__sinit>
 8007410:	4b89      	ldr	r3, [pc, #548]	; (8007638 <_vfiprintf_r+0x240>)
 8007412:	429d      	cmp	r5, r3
 8007414:	d11b      	bne.n	800744e <_vfiprintf_r+0x56>
 8007416:	6875      	ldr	r5, [r6, #4]
 8007418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800741a:	07d9      	lsls	r1, r3, #31
 800741c:	d405      	bmi.n	800742a <_vfiprintf_r+0x32>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	059a      	lsls	r2, r3, #22
 8007422:	d402      	bmi.n	800742a <_vfiprintf_r+0x32>
 8007424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007426:	f7ff fa3e 	bl	80068a6 <__retarget_lock_acquire_recursive>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	071b      	lsls	r3, r3, #28
 800742e:	d501      	bpl.n	8007434 <_vfiprintf_r+0x3c>
 8007430:	692b      	ldr	r3, [r5, #16]
 8007432:	b9eb      	cbnz	r3, 8007470 <_vfiprintf_r+0x78>
 8007434:	4629      	mov	r1, r5
 8007436:	4630      	mov	r0, r6
 8007438:	f000 fb4a 	bl	8007ad0 <__swsetup_r>
 800743c:	b1c0      	cbz	r0, 8007470 <_vfiprintf_r+0x78>
 800743e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007440:	07dc      	lsls	r4, r3, #31
 8007442:	d50e      	bpl.n	8007462 <_vfiprintf_r+0x6a>
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	b01d      	add	sp, #116	; 0x74
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	4b7b      	ldr	r3, [pc, #492]	; (800763c <_vfiprintf_r+0x244>)
 8007450:	429d      	cmp	r5, r3
 8007452:	d101      	bne.n	8007458 <_vfiprintf_r+0x60>
 8007454:	68b5      	ldr	r5, [r6, #8]
 8007456:	e7df      	b.n	8007418 <_vfiprintf_r+0x20>
 8007458:	4b79      	ldr	r3, [pc, #484]	; (8007640 <_vfiprintf_r+0x248>)
 800745a:	429d      	cmp	r5, r3
 800745c:	bf08      	it	eq
 800745e:	68f5      	ldreq	r5, [r6, #12]
 8007460:	e7da      	b.n	8007418 <_vfiprintf_r+0x20>
 8007462:	89ab      	ldrh	r3, [r5, #12]
 8007464:	0598      	lsls	r0, r3, #22
 8007466:	d4ed      	bmi.n	8007444 <_vfiprintf_r+0x4c>
 8007468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800746a:	f7ff fa1d 	bl	80068a8 <__retarget_lock_release_recursive>
 800746e:	e7e9      	b.n	8007444 <_vfiprintf_r+0x4c>
 8007470:	2300      	movs	r3, #0
 8007472:	9309      	str	r3, [sp, #36]	; 0x24
 8007474:	2320      	movs	r3, #32
 8007476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800747a:	f8cd 800c 	str.w	r8, [sp, #12]
 800747e:	2330      	movs	r3, #48	; 0x30
 8007480:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007644 <_vfiprintf_r+0x24c>
 8007484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007488:	f04f 0901 	mov.w	r9, #1
 800748c:	4623      	mov	r3, r4
 800748e:	469a      	mov	sl, r3
 8007490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007494:	b10a      	cbz	r2, 800749a <_vfiprintf_r+0xa2>
 8007496:	2a25      	cmp	r2, #37	; 0x25
 8007498:	d1f9      	bne.n	800748e <_vfiprintf_r+0x96>
 800749a:	ebba 0b04 	subs.w	fp, sl, r4
 800749e:	d00b      	beq.n	80074b8 <_vfiprintf_r+0xc0>
 80074a0:	465b      	mov	r3, fp
 80074a2:	4622      	mov	r2, r4
 80074a4:	4629      	mov	r1, r5
 80074a6:	4630      	mov	r0, r6
 80074a8:	f7ff ff93 	bl	80073d2 <__sfputs_r>
 80074ac:	3001      	adds	r0, #1
 80074ae:	f000 80aa 	beq.w	8007606 <_vfiprintf_r+0x20e>
 80074b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b4:	445a      	add	r2, fp
 80074b6:	9209      	str	r2, [sp, #36]	; 0x24
 80074b8:	f89a 3000 	ldrb.w	r3, [sl]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 80a2 	beq.w	8007606 <_vfiprintf_r+0x20e>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f04f 32ff 	mov.w	r2, #4294967295
 80074c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074cc:	f10a 0a01 	add.w	sl, sl, #1
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	9307      	str	r3, [sp, #28]
 80074d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074d8:	931a      	str	r3, [sp, #104]	; 0x68
 80074da:	4654      	mov	r4, sl
 80074dc:	2205      	movs	r2, #5
 80074de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e2:	4858      	ldr	r0, [pc, #352]	; (8007644 <_vfiprintf_r+0x24c>)
 80074e4:	f7f8 fe84 	bl	80001f0 <memchr>
 80074e8:	9a04      	ldr	r2, [sp, #16]
 80074ea:	b9d8      	cbnz	r0, 8007524 <_vfiprintf_r+0x12c>
 80074ec:	06d1      	lsls	r1, r2, #27
 80074ee:	bf44      	itt	mi
 80074f0:	2320      	movmi	r3, #32
 80074f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f6:	0713      	lsls	r3, r2, #28
 80074f8:	bf44      	itt	mi
 80074fa:	232b      	movmi	r3, #43	; 0x2b
 80074fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007500:	f89a 3000 	ldrb.w	r3, [sl]
 8007504:	2b2a      	cmp	r3, #42	; 0x2a
 8007506:	d015      	beq.n	8007534 <_vfiprintf_r+0x13c>
 8007508:	9a07      	ldr	r2, [sp, #28]
 800750a:	4654      	mov	r4, sl
 800750c:	2000      	movs	r0, #0
 800750e:	f04f 0c0a 	mov.w	ip, #10
 8007512:	4621      	mov	r1, r4
 8007514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007518:	3b30      	subs	r3, #48	; 0x30
 800751a:	2b09      	cmp	r3, #9
 800751c:	d94e      	bls.n	80075bc <_vfiprintf_r+0x1c4>
 800751e:	b1b0      	cbz	r0, 800754e <_vfiprintf_r+0x156>
 8007520:	9207      	str	r2, [sp, #28]
 8007522:	e014      	b.n	800754e <_vfiprintf_r+0x156>
 8007524:	eba0 0308 	sub.w	r3, r0, r8
 8007528:	fa09 f303 	lsl.w	r3, r9, r3
 800752c:	4313      	orrs	r3, r2
 800752e:	9304      	str	r3, [sp, #16]
 8007530:	46a2      	mov	sl, r4
 8007532:	e7d2      	b.n	80074da <_vfiprintf_r+0xe2>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	1d19      	adds	r1, r3, #4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	9103      	str	r1, [sp, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfbb      	ittet	lt
 8007540:	425b      	neglt	r3, r3
 8007542:	f042 0202 	orrlt.w	r2, r2, #2
 8007546:	9307      	strge	r3, [sp, #28]
 8007548:	9307      	strlt	r3, [sp, #28]
 800754a:	bfb8      	it	lt
 800754c:	9204      	strlt	r2, [sp, #16]
 800754e:	7823      	ldrb	r3, [r4, #0]
 8007550:	2b2e      	cmp	r3, #46	; 0x2e
 8007552:	d10c      	bne.n	800756e <_vfiprintf_r+0x176>
 8007554:	7863      	ldrb	r3, [r4, #1]
 8007556:	2b2a      	cmp	r3, #42	; 0x2a
 8007558:	d135      	bne.n	80075c6 <_vfiprintf_r+0x1ce>
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	1d1a      	adds	r2, r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	9203      	str	r2, [sp, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	bfb8      	it	lt
 8007566:	f04f 33ff 	movlt.w	r3, #4294967295
 800756a:	3402      	adds	r4, #2
 800756c:	9305      	str	r3, [sp, #20]
 800756e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007654 <_vfiprintf_r+0x25c>
 8007572:	7821      	ldrb	r1, [r4, #0]
 8007574:	2203      	movs	r2, #3
 8007576:	4650      	mov	r0, sl
 8007578:	f7f8 fe3a 	bl	80001f0 <memchr>
 800757c:	b140      	cbz	r0, 8007590 <_vfiprintf_r+0x198>
 800757e:	2340      	movs	r3, #64	; 0x40
 8007580:	eba0 000a 	sub.w	r0, r0, sl
 8007584:	fa03 f000 	lsl.w	r0, r3, r0
 8007588:	9b04      	ldr	r3, [sp, #16]
 800758a:	4303      	orrs	r3, r0
 800758c:	3401      	adds	r4, #1
 800758e:	9304      	str	r3, [sp, #16]
 8007590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007594:	482c      	ldr	r0, [pc, #176]	; (8007648 <_vfiprintf_r+0x250>)
 8007596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800759a:	2206      	movs	r2, #6
 800759c:	f7f8 fe28 	bl	80001f0 <memchr>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d03f      	beq.n	8007624 <_vfiprintf_r+0x22c>
 80075a4:	4b29      	ldr	r3, [pc, #164]	; (800764c <_vfiprintf_r+0x254>)
 80075a6:	bb1b      	cbnz	r3, 80075f0 <_vfiprintf_r+0x1f8>
 80075a8:	9b03      	ldr	r3, [sp, #12]
 80075aa:	3307      	adds	r3, #7
 80075ac:	f023 0307 	bic.w	r3, r3, #7
 80075b0:	3308      	adds	r3, #8
 80075b2:	9303      	str	r3, [sp, #12]
 80075b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b6:	443b      	add	r3, r7
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	e767      	b.n	800748c <_vfiprintf_r+0x94>
 80075bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80075c0:	460c      	mov	r4, r1
 80075c2:	2001      	movs	r0, #1
 80075c4:	e7a5      	b.n	8007512 <_vfiprintf_r+0x11a>
 80075c6:	2300      	movs	r3, #0
 80075c8:	3401      	adds	r4, #1
 80075ca:	9305      	str	r3, [sp, #20]
 80075cc:	4619      	mov	r1, r3
 80075ce:	f04f 0c0a 	mov.w	ip, #10
 80075d2:	4620      	mov	r0, r4
 80075d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d8:	3a30      	subs	r2, #48	; 0x30
 80075da:	2a09      	cmp	r2, #9
 80075dc:	d903      	bls.n	80075e6 <_vfiprintf_r+0x1ee>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0c5      	beq.n	800756e <_vfiprintf_r+0x176>
 80075e2:	9105      	str	r1, [sp, #20]
 80075e4:	e7c3      	b.n	800756e <_vfiprintf_r+0x176>
 80075e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ea:	4604      	mov	r4, r0
 80075ec:	2301      	movs	r3, #1
 80075ee:	e7f0      	b.n	80075d2 <_vfiprintf_r+0x1da>
 80075f0:	ab03      	add	r3, sp, #12
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	462a      	mov	r2, r5
 80075f6:	4b16      	ldr	r3, [pc, #88]	; (8007650 <_vfiprintf_r+0x258>)
 80075f8:	a904      	add	r1, sp, #16
 80075fa:	4630      	mov	r0, r6
 80075fc:	f3af 8000 	nop.w
 8007600:	4607      	mov	r7, r0
 8007602:	1c78      	adds	r0, r7, #1
 8007604:	d1d6      	bne.n	80075b4 <_vfiprintf_r+0x1bc>
 8007606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007608:	07d9      	lsls	r1, r3, #31
 800760a:	d405      	bmi.n	8007618 <_vfiprintf_r+0x220>
 800760c:	89ab      	ldrh	r3, [r5, #12]
 800760e:	059a      	lsls	r2, r3, #22
 8007610:	d402      	bmi.n	8007618 <_vfiprintf_r+0x220>
 8007612:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007614:	f7ff f948 	bl	80068a8 <__retarget_lock_release_recursive>
 8007618:	89ab      	ldrh	r3, [r5, #12]
 800761a:	065b      	lsls	r3, r3, #25
 800761c:	f53f af12 	bmi.w	8007444 <_vfiprintf_r+0x4c>
 8007620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007622:	e711      	b.n	8007448 <_vfiprintf_r+0x50>
 8007624:	ab03      	add	r3, sp, #12
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	462a      	mov	r2, r5
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <_vfiprintf_r+0x258>)
 800762c:	a904      	add	r1, sp, #16
 800762e:	4630      	mov	r0, r6
 8007630:	f000 f880 	bl	8007734 <_printf_i>
 8007634:	e7e4      	b.n	8007600 <_vfiprintf_r+0x208>
 8007636:	bf00      	nop
 8007638:	08007f78 	.word	0x08007f78
 800763c:	08007f98 	.word	0x08007f98
 8007640:	08007f58 	.word	0x08007f58
 8007644:	08007fb8 	.word	0x08007fb8
 8007648:	08007fc2 	.word	0x08007fc2
 800764c:	00000000 	.word	0x00000000
 8007650:	080073d3 	.word	0x080073d3
 8007654:	08007fbe 	.word	0x08007fbe

08007658 <_printf_common>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	4616      	mov	r6, r2
 800765e:	4699      	mov	r9, r3
 8007660:	688a      	ldr	r2, [r1, #8]
 8007662:	690b      	ldr	r3, [r1, #16]
 8007664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007668:	4293      	cmp	r3, r2
 800766a:	bfb8      	it	lt
 800766c:	4613      	movlt	r3, r2
 800766e:	6033      	str	r3, [r6, #0]
 8007670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007674:	4607      	mov	r7, r0
 8007676:	460c      	mov	r4, r1
 8007678:	b10a      	cbz	r2, 800767e <_printf_common+0x26>
 800767a:	3301      	adds	r3, #1
 800767c:	6033      	str	r3, [r6, #0]
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	0699      	lsls	r1, r3, #26
 8007682:	bf42      	ittt	mi
 8007684:	6833      	ldrmi	r3, [r6, #0]
 8007686:	3302      	addmi	r3, #2
 8007688:	6033      	strmi	r3, [r6, #0]
 800768a:	6825      	ldr	r5, [r4, #0]
 800768c:	f015 0506 	ands.w	r5, r5, #6
 8007690:	d106      	bne.n	80076a0 <_printf_common+0x48>
 8007692:	f104 0a19 	add.w	sl, r4, #25
 8007696:	68e3      	ldr	r3, [r4, #12]
 8007698:	6832      	ldr	r2, [r6, #0]
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	42ab      	cmp	r3, r5
 800769e:	dc26      	bgt.n	80076ee <_printf_common+0x96>
 80076a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076a4:	1e13      	subs	r3, r2, #0
 80076a6:	6822      	ldr	r2, [r4, #0]
 80076a8:	bf18      	it	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	0692      	lsls	r2, r2, #26
 80076ae:	d42b      	bmi.n	8007708 <_printf_common+0xb0>
 80076b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b4:	4649      	mov	r1, r9
 80076b6:	4638      	mov	r0, r7
 80076b8:	47c0      	blx	r8
 80076ba:	3001      	adds	r0, #1
 80076bc:	d01e      	beq.n	80076fc <_printf_common+0xa4>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	68e5      	ldr	r5, [r4, #12]
 80076c2:	6832      	ldr	r2, [r6, #0]
 80076c4:	f003 0306 	and.w	r3, r3, #6
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	bf08      	it	eq
 80076cc:	1aad      	subeq	r5, r5, r2
 80076ce:	68a3      	ldr	r3, [r4, #8]
 80076d0:	6922      	ldr	r2, [r4, #16]
 80076d2:	bf0c      	ite	eq
 80076d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d8:	2500      	movne	r5, #0
 80076da:	4293      	cmp	r3, r2
 80076dc:	bfc4      	itt	gt
 80076de:	1a9b      	subgt	r3, r3, r2
 80076e0:	18ed      	addgt	r5, r5, r3
 80076e2:	2600      	movs	r6, #0
 80076e4:	341a      	adds	r4, #26
 80076e6:	42b5      	cmp	r5, r6
 80076e8:	d11a      	bne.n	8007720 <_printf_common+0xc8>
 80076ea:	2000      	movs	r0, #0
 80076ec:	e008      	b.n	8007700 <_printf_common+0xa8>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4652      	mov	r2, sl
 80076f2:	4649      	mov	r1, r9
 80076f4:	4638      	mov	r0, r7
 80076f6:	47c0      	blx	r8
 80076f8:	3001      	adds	r0, #1
 80076fa:	d103      	bne.n	8007704 <_printf_common+0xac>
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007704:	3501      	adds	r5, #1
 8007706:	e7c6      	b.n	8007696 <_printf_common+0x3e>
 8007708:	18e1      	adds	r1, r4, r3
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	2030      	movs	r0, #48	; 0x30
 800770e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007712:	4422      	add	r2, r4
 8007714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800771c:	3302      	adds	r3, #2
 800771e:	e7c7      	b.n	80076b0 <_printf_common+0x58>
 8007720:	2301      	movs	r3, #1
 8007722:	4622      	mov	r2, r4
 8007724:	4649      	mov	r1, r9
 8007726:	4638      	mov	r0, r7
 8007728:	47c0      	blx	r8
 800772a:	3001      	adds	r0, #1
 800772c:	d0e6      	beq.n	80076fc <_printf_common+0xa4>
 800772e:	3601      	adds	r6, #1
 8007730:	e7d9      	b.n	80076e6 <_printf_common+0x8e>
	...

08007734 <_printf_i>:
 8007734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007738:	7e0f      	ldrb	r7, [r1, #24]
 800773a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800773c:	2f78      	cmp	r7, #120	; 0x78
 800773e:	4691      	mov	r9, r2
 8007740:	4680      	mov	r8, r0
 8007742:	460c      	mov	r4, r1
 8007744:	469a      	mov	sl, r3
 8007746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800774a:	d807      	bhi.n	800775c <_printf_i+0x28>
 800774c:	2f62      	cmp	r7, #98	; 0x62
 800774e:	d80a      	bhi.n	8007766 <_printf_i+0x32>
 8007750:	2f00      	cmp	r7, #0
 8007752:	f000 80d8 	beq.w	8007906 <_printf_i+0x1d2>
 8007756:	2f58      	cmp	r7, #88	; 0x58
 8007758:	f000 80a3 	beq.w	80078a2 <_printf_i+0x16e>
 800775c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007764:	e03a      	b.n	80077dc <_printf_i+0xa8>
 8007766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800776a:	2b15      	cmp	r3, #21
 800776c:	d8f6      	bhi.n	800775c <_printf_i+0x28>
 800776e:	a101      	add	r1, pc, #4	; (adr r1, 8007774 <_printf_i+0x40>)
 8007770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007774:	080077cd 	.word	0x080077cd
 8007778:	080077e1 	.word	0x080077e1
 800777c:	0800775d 	.word	0x0800775d
 8007780:	0800775d 	.word	0x0800775d
 8007784:	0800775d 	.word	0x0800775d
 8007788:	0800775d 	.word	0x0800775d
 800778c:	080077e1 	.word	0x080077e1
 8007790:	0800775d 	.word	0x0800775d
 8007794:	0800775d 	.word	0x0800775d
 8007798:	0800775d 	.word	0x0800775d
 800779c:	0800775d 	.word	0x0800775d
 80077a0:	080078ed 	.word	0x080078ed
 80077a4:	08007811 	.word	0x08007811
 80077a8:	080078cf 	.word	0x080078cf
 80077ac:	0800775d 	.word	0x0800775d
 80077b0:	0800775d 	.word	0x0800775d
 80077b4:	0800790f 	.word	0x0800790f
 80077b8:	0800775d 	.word	0x0800775d
 80077bc:	08007811 	.word	0x08007811
 80077c0:	0800775d 	.word	0x0800775d
 80077c4:	0800775d 	.word	0x0800775d
 80077c8:	080078d7 	.word	0x080078d7
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	1d1a      	adds	r2, r3, #4
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	602a      	str	r2, [r5, #0]
 80077d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077dc:	2301      	movs	r3, #1
 80077de:	e0a3      	b.n	8007928 <_printf_i+0x1f4>
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	6829      	ldr	r1, [r5, #0]
 80077e4:	0606      	lsls	r6, r0, #24
 80077e6:	f101 0304 	add.w	r3, r1, #4
 80077ea:	d50a      	bpl.n	8007802 <_printf_i+0xce>
 80077ec:	680e      	ldr	r6, [r1, #0]
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	2e00      	cmp	r6, #0
 80077f2:	da03      	bge.n	80077fc <_printf_i+0xc8>
 80077f4:	232d      	movs	r3, #45	; 0x2d
 80077f6:	4276      	negs	r6, r6
 80077f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077fc:	485e      	ldr	r0, [pc, #376]	; (8007978 <_printf_i+0x244>)
 80077fe:	230a      	movs	r3, #10
 8007800:	e019      	b.n	8007836 <_printf_i+0x102>
 8007802:	680e      	ldr	r6, [r1, #0]
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	f010 0f40 	tst.w	r0, #64	; 0x40
 800780a:	bf18      	it	ne
 800780c:	b236      	sxthne	r6, r6
 800780e:	e7ef      	b.n	80077f0 <_printf_i+0xbc>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	6820      	ldr	r0, [r4, #0]
 8007814:	1d19      	adds	r1, r3, #4
 8007816:	6029      	str	r1, [r5, #0]
 8007818:	0601      	lsls	r1, r0, #24
 800781a:	d501      	bpl.n	8007820 <_printf_i+0xec>
 800781c:	681e      	ldr	r6, [r3, #0]
 800781e:	e002      	b.n	8007826 <_printf_i+0xf2>
 8007820:	0646      	lsls	r6, r0, #25
 8007822:	d5fb      	bpl.n	800781c <_printf_i+0xe8>
 8007824:	881e      	ldrh	r6, [r3, #0]
 8007826:	4854      	ldr	r0, [pc, #336]	; (8007978 <_printf_i+0x244>)
 8007828:	2f6f      	cmp	r7, #111	; 0x6f
 800782a:	bf0c      	ite	eq
 800782c:	2308      	moveq	r3, #8
 800782e:	230a      	movne	r3, #10
 8007830:	2100      	movs	r1, #0
 8007832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007836:	6865      	ldr	r5, [r4, #4]
 8007838:	60a5      	str	r5, [r4, #8]
 800783a:	2d00      	cmp	r5, #0
 800783c:	bfa2      	ittt	ge
 800783e:	6821      	ldrge	r1, [r4, #0]
 8007840:	f021 0104 	bicge.w	r1, r1, #4
 8007844:	6021      	strge	r1, [r4, #0]
 8007846:	b90e      	cbnz	r6, 800784c <_printf_i+0x118>
 8007848:	2d00      	cmp	r5, #0
 800784a:	d04d      	beq.n	80078e8 <_printf_i+0x1b4>
 800784c:	4615      	mov	r5, r2
 800784e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007852:	fb03 6711 	mls	r7, r3, r1, r6
 8007856:	5dc7      	ldrb	r7, [r0, r7]
 8007858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800785c:	4637      	mov	r7, r6
 800785e:	42bb      	cmp	r3, r7
 8007860:	460e      	mov	r6, r1
 8007862:	d9f4      	bls.n	800784e <_printf_i+0x11a>
 8007864:	2b08      	cmp	r3, #8
 8007866:	d10b      	bne.n	8007880 <_printf_i+0x14c>
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	07de      	lsls	r6, r3, #31
 800786c:	d508      	bpl.n	8007880 <_printf_i+0x14c>
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	6861      	ldr	r1, [r4, #4]
 8007872:	4299      	cmp	r1, r3
 8007874:	bfde      	ittt	le
 8007876:	2330      	movle	r3, #48	; 0x30
 8007878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800787c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007880:	1b52      	subs	r2, r2, r5
 8007882:	6122      	str	r2, [r4, #16]
 8007884:	f8cd a000 	str.w	sl, [sp]
 8007888:	464b      	mov	r3, r9
 800788a:	aa03      	add	r2, sp, #12
 800788c:	4621      	mov	r1, r4
 800788e:	4640      	mov	r0, r8
 8007890:	f7ff fee2 	bl	8007658 <_printf_common>
 8007894:	3001      	adds	r0, #1
 8007896:	d14c      	bne.n	8007932 <_printf_i+0x1fe>
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
 800789c:	b004      	add	sp, #16
 800789e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a2:	4835      	ldr	r0, [pc, #212]	; (8007978 <_printf_i+0x244>)
 80078a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078a8:	6829      	ldr	r1, [r5, #0]
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80078b0:	6029      	str	r1, [r5, #0]
 80078b2:	061d      	lsls	r5, r3, #24
 80078b4:	d514      	bpl.n	80078e0 <_printf_i+0x1ac>
 80078b6:	07df      	lsls	r7, r3, #31
 80078b8:	bf44      	itt	mi
 80078ba:	f043 0320 	orrmi.w	r3, r3, #32
 80078be:	6023      	strmi	r3, [r4, #0]
 80078c0:	b91e      	cbnz	r6, 80078ca <_printf_i+0x196>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	f023 0320 	bic.w	r3, r3, #32
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	2310      	movs	r3, #16
 80078cc:	e7b0      	b.n	8007830 <_printf_i+0xfc>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	f043 0320 	orr.w	r3, r3, #32
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	2378      	movs	r3, #120	; 0x78
 80078d8:	4828      	ldr	r0, [pc, #160]	; (800797c <_printf_i+0x248>)
 80078da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078de:	e7e3      	b.n	80078a8 <_printf_i+0x174>
 80078e0:	0659      	lsls	r1, r3, #25
 80078e2:	bf48      	it	mi
 80078e4:	b2b6      	uxthmi	r6, r6
 80078e6:	e7e6      	b.n	80078b6 <_printf_i+0x182>
 80078e8:	4615      	mov	r5, r2
 80078ea:	e7bb      	b.n	8007864 <_printf_i+0x130>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	6826      	ldr	r6, [r4, #0]
 80078f0:	6961      	ldr	r1, [r4, #20]
 80078f2:	1d18      	adds	r0, r3, #4
 80078f4:	6028      	str	r0, [r5, #0]
 80078f6:	0635      	lsls	r5, r6, #24
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	d501      	bpl.n	8007900 <_printf_i+0x1cc>
 80078fc:	6019      	str	r1, [r3, #0]
 80078fe:	e002      	b.n	8007906 <_printf_i+0x1d2>
 8007900:	0670      	lsls	r0, r6, #25
 8007902:	d5fb      	bpl.n	80078fc <_printf_i+0x1c8>
 8007904:	8019      	strh	r1, [r3, #0]
 8007906:	2300      	movs	r3, #0
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	4615      	mov	r5, r2
 800790c:	e7ba      	b.n	8007884 <_printf_i+0x150>
 800790e:	682b      	ldr	r3, [r5, #0]
 8007910:	1d1a      	adds	r2, r3, #4
 8007912:	602a      	str	r2, [r5, #0]
 8007914:	681d      	ldr	r5, [r3, #0]
 8007916:	6862      	ldr	r2, [r4, #4]
 8007918:	2100      	movs	r1, #0
 800791a:	4628      	mov	r0, r5
 800791c:	f7f8 fc68 	bl	80001f0 <memchr>
 8007920:	b108      	cbz	r0, 8007926 <_printf_i+0x1f2>
 8007922:	1b40      	subs	r0, r0, r5
 8007924:	6060      	str	r0, [r4, #4]
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	6123      	str	r3, [r4, #16]
 800792a:	2300      	movs	r3, #0
 800792c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007930:	e7a8      	b.n	8007884 <_printf_i+0x150>
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	462a      	mov	r2, r5
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	47d0      	blx	sl
 800793c:	3001      	adds	r0, #1
 800793e:	d0ab      	beq.n	8007898 <_printf_i+0x164>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	079b      	lsls	r3, r3, #30
 8007944:	d413      	bmi.n	800796e <_printf_i+0x23a>
 8007946:	68e0      	ldr	r0, [r4, #12]
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	4298      	cmp	r0, r3
 800794c:	bfb8      	it	lt
 800794e:	4618      	movlt	r0, r3
 8007950:	e7a4      	b.n	800789c <_printf_i+0x168>
 8007952:	2301      	movs	r3, #1
 8007954:	4632      	mov	r2, r6
 8007956:	4649      	mov	r1, r9
 8007958:	4640      	mov	r0, r8
 800795a:	47d0      	blx	sl
 800795c:	3001      	adds	r0, #1
 800795e:	d09b      	beq.n	8007898 <_printf_i+0x164>
 8007960:	3501      	adds	r5, #1
 8007962:	68e3      	ldr	r3, [r4, #12]
 8007964:	9903      	ldr	r1, [sp, #12]
 8007966:	1a5b      	subs	r3, r3, r1
 8007968:	42ab      	cmp	r3, r5
 800796a:	dcf2      	bgt.n	8007952 <_printf_i+0x21e>
 800796c:	e7eb      	b.n	8007946 <_printf_i+0x212>
 800796e:	2500      	movs	r5, #0
 8007970:	f104 0619 	add.w	r6, r4, #25
 8007974:	e7f5      	b.n	8007962 <_printf_i+0x22e>
 8007976:	bf00      	nop
 8007978:	08007fc9 	.word	0x08007fc9
 800797c:	08007fda 	.word	0x08007fda

08007980 <__sread>:
 8007980:	b510      	push	{r4, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	f000 f9a6 	bl	8007cd8 <_read_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	bfab      	itete	ge
 8007990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007992:	89a3      	ldrhlt	r3, [r4, #12]
 8007994:	181b      	addge	r3, r3, r0
 8007996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800799a:	bfac      	ite	ge
 800799c:	6563      	strge	r3, [r4, #84]	; 0x54
 800799e:	81a3      	strhlt	r3, [r4, #12]
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <__swrite>:
 80079a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	461f      	mov	r7, r3
 80079a8:	898b      	ldrh	r3, [r1, #12]
 80079aa:	05db      	lsls	r3, r3, #23
 80079ac:	4605      	mov	r5, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	4616      	mov	r6, r2
 80079b2:	d505      	bpl.n	80079c0 <__swrite+0x1e>
 80079b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b8:	2302      	movs	r3, #2
 80079ba:	2200      	movs	r2, #0
 80079bc:	f000 f930 	bl	8007c20 <_lseek_r>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	4632      	mov	r2, r6
 80079ce:	463b      	mov	r3, r7
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d6:	f000 b869 	b.w	8007aac <_write_r>

080079da <__sseek>:
 80079da:	b510      	push	{r4, lr}
 80079dc:	460c      	mov	r4, r1
 80079de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e2:	f000 f91d 	bl	8007c20 <_lseek_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	bf15      	itete	ne
 80079ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80079ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079f6:	81a3      	strheq	r3, [r4, #12]
 80079f8:	bf18      	it	ne
 80079fa:	81a3      	strhne	r3, [r4, #12]
 80079fc:	bd10      	pop	{r4, pc}

080079fe <__sclose>:
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	f000 b8db 	b.w	8007bbc <_close_r>
	...

08007a08 <__swbuf_r>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	460e      	mov	r6, r1
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	4605      	mov	r5, r0
 8007a10:	b118      	cbz	r0, 8007a1a <__swbuf_r+0x12>
 8007a12:	6983      	ldr	r3, [r0, #24]
 8007a14:	b90b      	cbnz	r3, 8007a1a <__swbuf_r+0x12>
 8007a16:	f7ff fa49 	bl	8006eac <__sinit>
 8007a1a:	4b21      	ldr	r3, [pc, #132]	; (8007aa0 <__swbuf_r+0x98>)
 8007a1c:	429c      	cmp	r4, r3
 8007a1e:	d12b      	bne.n	8007a78 <__swbuf_r+0x70>
 8007a20:	686c      	ldr	r4, [r5, #4]
 8007a22:	69a3      	ldr	r3, [r4, #24]
 8007a24:	60a3      	str	r3, [r4, #8]
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	071a      	lsls	r2, r3, #28
 8007a2a:	d52f      	bpl.n	8007a8c <__swbuf_r+0x84>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	b36b      	cbz	r3, 8007a8c <__swbuf_r+0x84>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	1ac0      	subs	r0, r0, r3
 8007a36:	6963      	ldr	r3, [r4, #20]
 8007a38:	b2f6      	uxtb	r6, r6
 8007a3a:	4283      	cmp	r3, r0
 8007a3c:	4637      	mov	r7, r6
 8007a3e:	dc04      	bgt.n	8007a4a <__swbuf_r+0x42>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4628      	mov	r0, r5
 8007a44:	f7ff f99e 	bl	8006d84 <_fflush_r>
 8007a48:	bb30      	cbnz	r0, 8007a98 <__swbuf_r+0x90>
 8007a4a:	68a3      	ldr	r3, [r4, #8]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60a3      	str	r3, [r4, #8]
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	6022      	str	r2, [r4, #0]
 8007a56:	701e      	strb	r6, [r3, #0]
 8007a58:	6963      	ldr	r3, [r4, #20]
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	4283      	cmp	r3, r0
 8007a5e:	d004      	beq.n	8007a6a <__swbuf_r+0x62>
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	07db      	lsls	r3, r3, #31
 8007a64:	d506      	bpl.n	8007a74 <__swbuf_r+0x6c>
 8007a66:	2e0a      	cmp	r6, #10
 8007a68:	d104      	bne.n	8007a74 <__swbuf_r+0x6c>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f7ff f989 	bl	8006d84 <_fflush_r>
 8007a72:	b988      	cbnz	r0, 8007a98 <__swbuf_r+0x90>
 8007a74:	4638      	mov	r0, r7
 8007a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <__swbuf_r+0x9c>)
 8007a7a:	429c      	cmp	r4, r3
 8007a7c:	d101      	bne.n	8007a82 <__swbuf_r+0x7a>
 8007a7e:	68ac      	ldr	r4, [r5, #8]
 8007a80:	e7cf      	b.n	8007a22 <__swbuf_r+0x1a>
 8007a82:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <__swbuf_r+0xa0>)
 8007a84:	429c      	cmp	r4, r3
 8007a86:	bf08      	it	eq
 8007a88:	68ec      	ldreq	r4, [r5, #12]
 8007a8a:	e7ca      	b.n	8007a22 <__swbuf_r+0x1a>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f000 f81e 	bl	8007ad0 <__swsetup_r>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d0cb      	beq.n	8007a30 <__swbuf_r+0x28>
 8007a98:	f04f 37ff 	mov.w	r7, #4294967295
 8007a9c:	e7ea      	b.n	8007a74 <__swbuf_r+0x6c>
 8007a9e:	bf00      	nop
 8007aa0:	08007f78 	.word	0x08007f78
 8007aa4:	08007f98 	.word	0x08007f98
 8007aa8:	08007f58 	.word	0x08007f58

08007aac <_write_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	; (8007acc <_write_r+0x20>)
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	602a      	str	r2, [r5, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f7f9 fc4d 	bl	800135a <_write>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_write_r+0x1e>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_write_r+0x1e>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	20000494 	.word	0x20000494

08007ad0 <__swsetup_r>:
 8007ad0:	4b32      	ldr	r3, [pc, #200]	; (8007b9c <__swsetup_r+0xcc>)
 8007ad2:	b570      	push	{r4, r5, r6, lr}
 8007ad4:	681d      	ldr	r5, [r3, #0]
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	b125      	cbz	r5, 8007ae6 <__swsetup_r+0x16>
 8007adc:	69ab      	ldr	r3, [r5, #24]
 8007ade:	b913      	cbnz	r3, 8007ae6 <__swsetup_r+0x16>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7ff f9e3 	bl	8006eac <__sinit>
 8007ae6:	4b2e      	ldr	r3, [pc, #184]	; (8007ba0 <__swsetup_r+0xd0>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d10f      	bne.n	8007b0c <__swsetup_r+0x3c>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af4:	0719      	lsls	r1, r3, #28
 8007af6:	d42c      	bmi.n	8007b52 <__swsetup_r+0x82>
 8007af8:	06dd      	lsls	r5, r3, #27
 8007afa:	d411      	bmi.n	8007b20 <__swsetup_r+0x50>
 8007afc:	2309      	movs	r3, #9
 8007afe:	6033      	str	r3, [r6, #0]
 8007b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0a:	e03e      	b.n	8007b8a <__swsetup_r+0xba>
 8007b0c:	4b25      	ldr	r3, [pc, #148]	; (8007ba4 <__swsetup_r+0xd4>)
 8007b0e:	429c      	cmp	r4, r3
 8007b10:	d101      	bne.n	8007b16 <__swsetup_r+0x46>
 8007b12:	68ac      	ldr	r4, [r5, #8]
 8007b14:	e7eb      	b.n	8007aee <__swsetup_r+0x1e>
 8007b16:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <__swsetup_r+0xd8>)
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	bf08      	it	eq
 8007b1c:	68ec      	ldreq	r4, [r5, #12]
 8007b1e:	e7e6      	b.n	8007aee <__swsetup_r+0x1e>
 8007b20:	0758      	lsls	r0, r3, #29
 8007b22:	d512      	bpl.n	8007b4a <__swsetup_r+0x7a>
 8007b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b26:	b141      	cbz	r1, 8007b3a <__swsetup_r+0x6a>
 8007b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <__swsetup_r+0x66>
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7fe fed9 	bl	80068e8 <_free_r>
 8007b36:	2300      	movs	r3, #0
 8007b38:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f043 0308 	orr.w	r3, r3, #8
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	b94b      	cbnz	r3, 8007b6a <__swsetup_r+0x9a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b60:	d003      	beq.n	8007b6a <__swsetup_r+0x9a>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff fa75 	bl	8007054 <__smakebuf_r>
 8007b6a:	89a0      	ldrh	r0, [r4, #12]
 8007b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b70:	f010 0301 	ands.w	r3, r0, #1
 8007b74:	d00a      	beq.n	8007b8c <__swsetup_r+0xbc>
 8007b76:	2300      	movs	r3, #0
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	6963      	ldr	r3, [r4, #20]
 8007b7c:	425b      	negs	r3, r3
 8007b7e:	61a3      	str	r3, [r4, #24]
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	b943      	cbnz	r3, 8007b96 <__swsetup_r+0xc6>
 8007b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b88:	d1ba      	bne.n	8007b00 <__swsetup_r+0x30>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	0781      	lsls	r1, r0, #30
 8007b8e:	bf58      	it	pl
 8007b90:	6963      	ldrpl	r3, [r4, #20]
 8007b92:	60a3      	str	r3, [r4, #8]
 8007b94:	e7f4      	b.n	8007b80 <__swsetup_r+0xb0>
 8007b96:	2000      	movs	r0, #0
 8007b98:	e7f7      	b.n	8007b8a <__swsetup_r+0xba>
 8007b9a:	bf00      	nop
 8007b9c:	20000298 	.word	0x20000298
 8007ba0:	08007f78 	.word	0x08007f78
 8007ba4:	08007f98 	.word	0x08007f98
 8007ba8:	08007f58 	.word	0x08007f58

08007bac <abort>:
 8007bac:	b508      	push	{r3, lr}
 8007bae:	2006      	movs	r0, #6
 8007bb0:	f000 f8cc 	bl	8007d4c <raise>
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	f7f9 fba9 	bl	800130c <_exit>
	...

08007bbc <_close_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	; (8007bd8 <_close_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7f9 fbe3 	bl	8001392 <_close>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_close_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_close_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	20000494 	.word	0x20000494

08007bdc <_fstat_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d07      	ldr	r5, [pc, #28]	; (8007bfc <_fstat_r+0x20>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	4611      	mov	r1, r2
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	f7f9 fbde 	bl	80013aa <_fstat>
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	d102      	bne.n	8007bf8 <_fstat_r+0x1c>
 8007bf2:	682b      	ldr	r3, [r5, #0]
 8007bf4:	b103      	cbz	r3, 8007bf8 <_fstat_r+0x1c>
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	bd38      	pop	{r3, r4, r5, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000494 	.word	0x20000494

08007c00 <_isatty_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d06      	ldr	r5, [pc, #24]	; (8007c1c <_isatty_r+0x1c>)
 8007c04:	2300      	movs	r3, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	602b      	str	r3, [r5, #0]
 8007c0c:	f7f9 fbdd 	bl	80013ca <_isatty>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_isatty_r+0x1a>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_isatty_r+0x1a>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20000494 	.word	0x20000494

08007c20 <_lseek_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	; (8007c40 <_lseek_r+0x20>)
 8007c24:	4604      	mov	r4, r0
 8007c26:	4608      	mov	r0, r1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	602a      	str	r2, [r5, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f7f9 fbd6 	bl	80013e0 <_lseek>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_lseek_r+0x1e>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_lseek_r+0x1e>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20000494 	.word	0x20000494

08007c44 <memmove>:
 8007c44:	4288      	cmp	r0, r1
 8007c46:	b510      	push	{r4, lr}
 8007c48:	eb01 0402 	add.w	r4, r1, r2
 8007c4c:	d902      	bls.n	8007c54 <memmove+0x10>
 8007c4e:	4284      	cmp	r4, r0
 8007c50:	4623      	mov	r3, r4
 8007c52:	d807      	bhi.n	8007c64 <memmove+0x20>
 8007c54:	1e43      	subs	r3, r0, #1
 8007c56:	42a1      	cmp	r1, r4
 8007c58:	d008      	beq.n	8007c6c <memmove+0x28>
 8007c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c62:	e7f8      	b.n	8007c56 <memmove+0x12>
 8007c64:	4402      	add	r2, r0
 8007c66:	4601      	mov	r1, r0
 8007c68:	428a      	cmp	r2, r1
 8007c6a:	d100      	bne.n	8007c6e <memmove+0x2a>
 8007c6c:	bd10      	pop	{r4, pc}
 8007c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c76:	e7f7      	b.n	8007c68 <memmove+0x24>

08007c78 <_realloc_r>:
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4614      	mov	r4, r2
 8007c80:	460e      	mov	r6, r1
 8007c82:	b921      	cbnz	r1, 8007c8e <_realloc_r+0x16>
 8007c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c88:	4611      	mov	r1, r2
 8007c8a:	f7fe be99 	b.w	80069c0 <_malloc_r>
 8007c8e:	b92a      	cbnz	r2, 8007c9c <_realloc_r+0x24>
 8007c90:	f7fe fe2a 	bl	80068e8 <_free_r>
 8007c94:	4625      	mov	r5, r4
 8007c96:	4628      	mov	r0, r5
 8007c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c9c:	f000 f872 	bl	8007d84 <_malloc_usable_size_r>
 8007ca0:	4284      	cmp	r4, r0
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	d802      	bhi.n	8007cac <_realloc_r+0x34>
 8007ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007caa:	d812      	bhi.n	8007cd2 <_realloc_r+0x5a>
 8007cac:	4621      	mov	r1, r4
 8007cae:	4640      	mov	r0, r8
 8007cb0:	f7fe fe86 	bl	80069c0 <_malloc_r>
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d0ed      	beq.n	8007c96 <_realloc_r+0x1e>
 8007cba:	42bc      	cmp	r4, r7
 8007cbc:	4622      	mov	r2, r4
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	bf28      	it	cs
 8007cc2:	463a      	movcs	r2, r7
 8007cc4:	f7fe fdfa 	bl	80068bc <memcpy>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4640      	mov	r0, r8
 8007ccc:	f7fe fe0c 	bl	80068e8 <_free_r>
 8007cd0:	e7e1      	b.n	8007c96 <_realloc_r+0x1e>
 8007cd2:	4635      	mov	r5, r6
 8007cd4:	e7df      	b.n	8007c96 <_realloc_r+0x1e>
	...

08007cd8 <_read_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d07      	ldr	r5, [pc, #28]	; (8007cf8 <_read_r+0x20>)
 8007cdc:	4604      	mov	r4, r0
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	602a      	str	r2, [r5, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f7f9 fb1a 	bl	8001320 <_read>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_read_r+0x1e>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_read_r+0x1e>
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	20000494 	.word	0x20000494

08007cfc <_raise_r>:
 8007cfc:	291f      	cmp	r1, #31
 8007cfe:	b538      	push	{r3, r4, r5, lr}
 8007d00:	4604      	mov	r4, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	d904      	bls.n	8007d10 <_raise_r+0x14>
 8007d06:	2316      	movs	r3, #22
 8007d08:	6003      	str	r3, [r0, #0]
 8007d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d12:	b112      	cbz	r2, 8007d1a <_raise_r+0x1e>
 8007d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d18:	b94b      	cbnz	r3, 8007d2e <_raise_r+0x32>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f830 	bl	8007d80 <_getpid_r>
 8007d20:	462a      	mov	r2, r5
 8007d22:	4601      	mov	r1, r0
 8007d24:	4620      	mov	r0, r4
 8007d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2a:	f000 b817 	b.w	8007d5c <_kill_r>
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d00a      	beq.n	8007d48 <_raise_r+0x4c>
 8007d32:	1c59      	adds	r1, r3, #1
 8007d34:	d103      	bne.n	8007d3e <_raise_r+0x42>
 8007d36:	2316      	movs	r3, #22
 8007d38:	6003      	str	r3, [r0, #0]
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	e7e7      	b.n	8007d0e <_raise_r+0x12>
 8007d3e:	2400      	movs	r4, #0
 8007d40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d44:	4628      	mov	r0, r5
 8007d46:	4798      	blx	r3
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e7e0      	b.n	8007d0e <_raise_r+0x12>

08007d4c <raise>:
 8007d4c:	4b02      	ldr	r3, [pc, #8]	; (8007d58 <raise+0xc>)
 8007d4e:	4601      	mov	r1, r0
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	f7ff bfd3 	b.w	8007cfc <_raise_r>
 8007d56:	bf00      	nop
 8007d58:	20000298 	.word	0x20000298

08007d5c <_kill_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	; (8007d7c <_kill_r+0x20>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	f7f9 fabf 	bl	80012ec <_kill>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	d102      	bne.n	8007d78 <_kill_r+0x1c>
 8007d72:	682b      	ldr	r3, [r5, #0]
 8007d74:	b103      	cbz	r3, 8007d78 <_kill_r+0x1c>
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	bd38      	pop	{r3, r4, r5, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000494 	.word	0x20000494

08007d80 <_getpid_r>:
 8007d80:	f7f9 baac 	b.w	80012dc <_getpid>

08007d84 <_malloc_usable_size_r>:
 8007d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d88:	1f18      	subs	r0, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bfbc      	itt	lt
 8007d8e:	580b      	ldrlt	r3, [r1, r0]
 8007d90:	18c0      	addlt	r0, r0, r3
 8007d92:	4770      	bx	lr

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
