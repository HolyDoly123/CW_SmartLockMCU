
SmartLockF411CEU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e18  08008e18  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e18  08008e18  00018e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e20  08008e20  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08008e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200002fc  08009124  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08009124  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145b8  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe4  00000000  00000000  000348e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  000378c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00038ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cdb  00000000  00000000  00039bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014aea  00000000  00000000  000528cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009534c  00000000  00000000  000673b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc701  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056a4  00000000  00000000  000fc754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002fc 	.word	0x200002fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008bb8 	.word	0x08008bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000300 	.word	0x20000300
 80001dc:	08008bb8 	.word	0x08008bb8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <processBluetoothData>:
#include "ethernet_module.h"

char* login;
char* password;

void processBluetoothData(UART_HandleTypeDef *huart1,  uint8_t *RxBuf) {
 8000594:	b580      	push	{r7, lr}
 8000596:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800059a:	af00      	add	r7, sp, #0
 800059c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005a0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80005a4:	6018      	str	r0, [r3, #0]
 80005a6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005aa:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005ae:	6019      	str	r1, [r3, #0]
	strtok(RxBuf, " ");
 80005b0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005b4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005b8:	4970      	ldr	r1, [pc, #448]	; (800077c <processBluetoothData+0x1e8>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	f007 f9f4 	bl	80079a8 <strtok>
	login = strtok(NULL, " ");
 80005c0:	496e      	ldr	r1, [pc, #440]	; (800077c <processBluetoothData+0x1e8>)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f007 f9f0 	bl	80079a8 <strtok>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a6d      	ldr	r2, [pc, #436]	; (8000780 <processBluetoothData+0x1ec>)
 80005cc:	6013      	str	r3, [r2, #0]
	password = strtok(NULL, " \n");
 80005ce:	496d      	ldr	r1, [pc, #436]	; (8000784 <processBluetoothData+0x1f0>)
 80005d0:	2000      	movs	r0, #0
 80005d2:	f007 f9e9 	bl	80079a8 <strtok>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a6b      	ldr	r2, [pc, #428]	; (8000788 <processBluetoothData+0x1f4>)
 80005da:	6013      	str	r3, [r2, #0]

	switch(RxBuf[0])
 80005dc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80005e0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b73      	cmp	r3, #115	; 0x73
 80005ea:	f000 8086 	beq.w	80006fa <processBluetoothData+0x166>
 80005ee:	2b73      	cmp	r3, #115	; 0x73
 80005f0:	f300 80bd 	bgt.w	800076e <processBluetoothData+0x1da>
 80005f4:	2b63      	cmp	r3, #99	; 0x63
 80005f6:	d041      	beq.n	800067c <processBluetoothData+0xe8>
 80005f8:	2b6f      	cmp	r3, #111	; 0x6f
 80005fa:	f040 80b8 	bne.w	800076e <processBluetoothData+0x1da>
	    {
	        case 'o': {
	        	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	4862      	ldr	r0, [pc, #392]	; (800078c <processBluetoothData+0x1f8>)
 8000604:	f002 f944 	bl	8002890 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d02b      	beq.n	8000666 <processBluetoothData+0xd2>
					if(W5500_Auth(login, password, RxBuf[0])) {
 800060e:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <processBluetoothData+0x1ec>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	4b5d      	ldr	r3, [pc, #372]	; (8000788 <processBluetoothData+0x1f4>)
 8000614:	6819      	ldr	r1, [r3, #0]
 8000616:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800061a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	f000 f97c 	bl	8000920 <W5500_Auth>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d010      	beq.n	8000650 <processBluetoothData+0xbc>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	4855      	ldr	r0, [pc, #340]	; (800078c <processBluetoothData+0x1f8>)
 8000636:	f002 f943 	bl	80028c0 <HAL_GPIO_WritePin>
						HAL_UART_Transmit(huart1, "Opened", strlen("Opened"), 10);
 800063a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800063e:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 8000642:	230a      	movs	r3, #10
 8000644:	2206      	movs	r2, #6
 8000646:	4952      	ldr	r1, [pc, #328]	; (8000790 <processBluetoothData+0x1fc>)
 8000648:	6800      	ldr	r0, [r0, #0]
 800064a:	f004 f82c 	bl	80046a6 <HAL_UART_Transmit>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
					}
				} else {
					HAL_UART_Transmit(huart1, "Opened", strlen("Opened"), 10);
				}
	            break;
 800064e:	e08f      	b.n	8000770 <processBluetoothData+0x1dc>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
 8000650:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000654:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 8000658:	230a      	movs	r3, #10
 800065a:	220a      	movs	r2, #10
 800065c:	494d      	ldr	r1, [pc, #308]	; (8000794 <processBluetoothData+0x200>)
 800065e:	6800      	ldr	r0, [r0, #0]
 8000660:	f004 f821 	bl	80046a6 <HAL_UART_Transmit>
	            break;
 8000664:	e084      	b.n	8000770 <processBluetoothData+0x1dc>
					HAL_UART_Transmit(huart1, "Opened", strlen("Opened"), 10);
 8000666:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800066a:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 800066e:	230a      	movs	r3, #10
 8000670:	2206      	movs	r2, #6
 8000672:	4947      	ldr	r1, [pc, #284]	; (8000790 <processBluetoothData+0x1fc>)
 8000674:	6800      	ldr	r0, [r0, #0]
 8000676:	f004 f816 	bl	80046a6 <HAL_UART_Transmit>
	            break;
 800067a:	e079      	b.n	8000770 <processBluetoothData+0x1dc>
	        }
	        case 'c': {
	    		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4842      	ldr	r0, [pc, #264]	; (800078c <processBluetoothData+0x1f8>)
 8000682:	f002 f905 	bl	8002890 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d12b      	bne.n	80006e4 <processBluetoothData+0x150>
	    			if(W5500_Auth(login, password, RxBuf[0])) {
 800068c:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <processBluetoothData+0x1ec>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <processBluetoothData+0x1f4>)
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000698:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	f000 f93d 	bl	8000920 <W5500_Auth>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d010      	beq.n	80006ce <processBluetoothData+0x13a>
		    			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	4836      	ldr	r0, [pc, #216]	; (800078c <processBluetoothData+0x1f8>)
 80006b4:	f002 f904 	bl	80028c0 <HAL_GPIO_WritePin>
		    			HAL_UART_Transmit(huart1, "Closed", strlen("Closed"), 10);
 80006b8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80006bc:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 80006c0:	230a      	movs	r3, #10
 80006c2:	2206      	movs	r2, #6
 80006c4:	4934      	ldr	r1, [pc, #208]	; (8000798 <processBluetoothData+0x204>)
 80006c6:	6800      	ldr	r0, [r0, #0]
 80006c8:	f003 ffed 	bl	80046a6 <HAL_UART_Transmit>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
					}
	    		} else {
	    			HAL_UART_Transmit(huart1, "Closed", strlen("Closed"), 10);
	    		}
	            break;
 80006cc:	e050      	b.n	8000770 <processBluetoothData+0x1dc>
						HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
 80006ce:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80006d2:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 80006d6:	230a      	movs	r3, #10
 80006d8:	220a      	movs	r2, #10
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <processBluetoothData+0x200>)
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	f003 ffe2 	bl	80046a6 <HAL_UART_Transmit>
	            break;
 80006e2:	e045      	b.n	8000770 <processBluetoothData+0x1dc>
	    			HAL_UART_Transmit(huart1, "Closed", strlen("Closed"), 10);
 80006e4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80006e8:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 80006ec:	230a      	movs	r3, #10
 80006ee:	2206      	movs	r2, #6
 80006f0:	4929      	ldr	r1, [pc, #164]	; (8000798 <processBluetoothData+0x204>)
 80006f2:	6800      	ldr	r0, [r0, #0]
 80006f4:	f003 ffd7 	bl	80046a6 <HAL_UART_Transmit>
	            break;
 80006f8:	e03a      	b.n	8000770 <processBluetoothData+0x1dc>
	        }
	        case 's': {
	        	if(W5500_Auth(login, password, "")) {
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <processBluetoothData+0x1ec>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a22      	ldr	r2, [pc, #136]	; (8000788 <processBluetoothData+0x1f4>)
 8000700:	6811      	ldr	r1, [r2, #0]
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <processBluetoothData+0x208>)
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f90b 	bl	8000920 <W5500_Auth>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d023      	beq.n	8000758 <processBluetoothData+0x1c4>
	        		char stat[1024] = {0};
 8000710:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000714:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	3304      	adds	r3, #4
 800071e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f006 ffe9 	bl	80076fc <memset>
	        		W5500_GetStat(stat);
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fa16 	bl	8000b60 <W5500_GetStat>
	        		HAL_UART_Transmit(huart1, stat, strlen(stat), 10);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fd51 	bl	80001e0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800074a:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 800074e:	230a      	movs	r3, #10
 8000750:	6800      	ldr	r0, [r0, #0]
 8000752:	f003 ffa8 	bl	80046a6 <HAL_UART_Transmit>
	        	} else {
					HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
				}
	            break;
 8000756:	e00b      	b.n	8000770 <processBluetoothData+0x1dc>
					HAL_UART_Transmit(huart1, "Auth error", strlen("Auth error"), 10);
 8000758:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800075c:	f2a3 4004 	subw	r0, r3, #1028	; 0x404
 8000760:	230a      	movs	r3, #10
 8000762:	220a      	movs	r2, #10
 8000764:	490b      	ldr	r1, [pc, #44]	; (8000794 <processBluetoothData+0x200>)
 8000766:	6800      	ldr	r0, [r0, #0]
 8000768:	f003 ff9d 	bl	80046a6 <HAL_UART_Transmit>
	            break;
 800076c:	e000      	b.n	8000770 <processBluetoothData+0x1dc>
	        }
	        default: {
	        	break;
 800076e:	bf00      	nop
	        }
	    }
}
 8000770:	bf00      	nop
 8000772:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	08008bd0 	.word	0x08008bd0
 8000780:	20000318 	.word	0x20000318
 8000784:	08008bd4 	.word	0x08008bd4
 8000788:	2000031c 	.word	0x2000031c
 800078c:	40020800 	.word	0x40020800
 8000790:	08008bd8 	.word	0x08008bd8
 8000794:	08008be0 	.word	0x08008be0
 8000798:	08008bec 	.word	0x08008bec
 800079c:	08008bf4 	.word	0x08008bf4

080007a0 <W5500_Reset>:
        .dhcp = NETINFO_STATIC
};

static uint8_t serverIp[] = { 192, 168, 88, 100 };

void W5500_Reset() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2108      	movs	r1, #8
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <W5500_Reset+0x28>)
 80007aa:	f002 f889 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007ae:	200a      	movs	r0, #10
 80007b0:	f001 f9b2 	bl	8001b18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2108      	movs	r1, #8
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <W5500_Reset+0x28>)
 80007ba:	f002 f881 	bl	80028c0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007be:	200a      	movs	r0, #10
 80007c0:	f001 f9aa 	bl	8001b18 <HAL_Delay>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020000 	.word	0x40020000

080007cc <W5500_Select>:

void W5500_Select(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <W5500_Select+0x14>)
 80007d6:	f002 f873 	bl	80028c0 <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020000 	.word	0x40020000

080007e4 <W5500_Unselect>:

void W5500_Unselect(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <W5500_Unselect+0x14>)
 80007ee:	f002 f867 	bl	80028c0 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40020000 	.word	0x40020000

080007fc <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t *buff, uint16_t len) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(hspi, buff, len, HAL_MAX_DELAY);
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <W5500_ReadBuff+0x24>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	887a      	ldrh	r2, [r7, #2]
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f002 fea3 	bl	800355e <HAL_SPI_Receive>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000320 	.word	0x20000320

08000824 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t *buff, uint16_t len) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(hspi, buff, len, HAL_MAX_DELAY);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <W5500_WriteBuff+0x24>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	887a      	ldrh	r2, [r7, #2]
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f002 fd53 	bl	80032e6 <HAL_SPI_Transmit>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000320 	.word	0x20000320

0800084c <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	uint8_t byte;
	W5500_ReadBuff(&byte, sizeof(byte));
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffd0 	bl	80007fc <W5500_ReadBuff>
	return byte;
 800085c:	79fb      	ldrb	r3, [r7, #7]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
	W5500_WriteBuff(&byte, sizeof(byte));
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	2101      	movs	r1, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffd5 	bl	8000824 <W5500_WriteBuff>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <W5500_Init>:

void W5500_Init(SPI_HandleTypeDef *hspi1) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	hspi = hspi1;
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <W5500_Init+0x78>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]


	W5500_Unselect();
 8000892:	f7ff ffa7 	bl	80007e4 <W5500_Unselect>
	W5500_Reset();
 8000896:	f7ff ff83 	bl	80007a0 <W5500_Reset>

	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800089a:	4919      	ldr	r1, [pc, #100]	; (8000900 <W5500_Init+0x7c>)
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <W5500_Init+0x80>)
 800089e:	f006 fa8f 	bl	8006dc0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80008a2:	4919      	ldr	r1, [pc, #100]	; (8000908 <W5500_Init+0x84>)
 80008a4:	4819      	ldr	r0, [pc, #100]	; (800090c <W5500_Init+0x88>)
 80008a6:	f006 fab1 	bl	8006e0c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80008aa:	4919      	ldr	r1, [pc, #100]	; (8000910 <W5500_Init+0x8c>)
 80008ac:	4819      	ldr	r0, [pc, #100]	; (8000914 <W5500_Init+0x90>)
 80008ae:	f006 fad9 	bl	8006e64 <reg_wizchip_spiburst_cbfunc>

	uint8_t rx_tx_buff_sizes[] = { 2, 2, 2, 2, 2, 2, 2, 2 };
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <W5500_Init+0x94>)
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	e883 0003 	stmia.w	r3, {r0, r1}
	wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 fc24 	bl	8007118 <wizchip_init>

	uint8_t phyLink = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
	do {
		ctlwizchip(CW_GET_PHYLINK, (void*) &phyLink);
 80008d4:	f107 030f 	add.w	r3, r7, #15
 80008d8:	4619      	mov	r1, r3
 80008da:	200f      	movs	r0, #15
 80008dc:	f006 faee 	bl	8006ebc <ctlwizchip>
		HAL_Delay(10);
 80008e0:	200a      	movs	r0, #10
 80008e2:	f001 f919 	bl	8001b18 <HAL_Delay>
	} while (phyLink == PHY_LINK_OFF);
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f3      	beq.n	80008d4 <W5500_Init+0x50>

	wizchip_setnetinfo(&gWIZNETINFO);
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <W5500_Init+0x98>)
 80008ee:	f006 fe81 	bl	80075f4 <wizchip_setnetinfo>
}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000320 	.word	0x20000320
 8000900:	080007e5 	.word	0x080007e5
 8000904:	080007cd 	.word	0x080007cd
 8000908:	08000867 	.word	0x08000867
 800090c:	0800084d 	.word	0x0800084d
 8000910:	08000825 	.word	0x08000825
 8000914:	080007fd 	.word	0x080007fd
 8000918:	08008bf8 	.word	0x08008bf8
 800091c:	20000000 	.word	0x20000000

08000920 <W5500_Auth>:

int W5500_Auth(char* login, char* password, char* action) {
 8000920:	b580      	push	{r7, lr}
 8000922:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8000926:	af00      	add	r7, sp, #0
 8000928:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800092c:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8000930:	6018      	str	r0, [r3, #0]
 8000932:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000936:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800093a:	6019      	str	r1, [r3, #0]
 800093c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000940:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8000944:	601a      	str	r2, [r3, #0]
	//открытие TCP сокета
	uint8_t code = socket(CLIENT_SOCKET, Sn_MR_TCP, W5500_PORT, 0);
 8000946:	2300      	movs	r3, #0
 8000948:	f642 2287 	movw	r2, #10887	; 0x2a87
 800094c:	2101      	movs	r1, #1
 800094e:	2000      	movs	r0, #0
 8000950:	f005 fb1a 	bl	8005f88 <socket>
 8000954:	4603      	mov	r3, r0
 8000956:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
	if (code != CLIENT_SOCKET)
 800095a:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <W5500_Auth+0x46>
		return 0;
 8000962:	2300      	movs	r3, #0
 8000964:	e0ee      	b.n	8000b44 <W5500_Auth+0x224>
	//открытие соединения
	code = connect(CLIENT_SOCKET, serverIp, SERVER_PORT);
 8000966:	f641 7292 	movw	r2, #8082	; 0x1f92
 800096a:	4979      	ldr	r1, [pc, #484]	; (8000b50 <W5500_Auth+0x230>)
 800096c:	2000      	movs	r0, #0
 800096e:	f005 fc8f 	bl	8006290 <connect>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
	if (code != SOCK_OK) {
 8000978:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 800097c:	2b01      	cmp	r3, #1
 800097e:	d004      	beq.n	800098a <W5500_Auth+0x6a>
		close(CLIENT_SOCKET);
 8000980:	2000      	movs	r0, #0
 8000982:	f005 fc17 	bl	80061b4 <close>
		return 0;
 8000986:	2300      	movs	r3, #0
 8000988:	e0dc      	b.n	8000b44 <W5500_Auth+0x224>
	}

	char openKey[5];
	rand_string(openKey, 5);
 800098a:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800098e:	2105      	movs	r1, #5
 8000990:	4618      	mov	r0, r3
 8000992:	f005 faaf 	bl	8005ef4 <rand_string>
	char stringToHash[9];
	sprintf(stringToHash, "%s%s", password, openKey);
 8000996:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800099a:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800099e:	f5a2 6291 	sub.w	r2, r2, #1160	; 0x488
 80009a2:	f507 608b 	add.w	r0, r7, #1112	; 0x458
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	496a      	ldr	r1, [pc, #424]	; (8000b54 <W5500_Auth+0x234>)
 80009aa:	f006 ffdd 	bl	8007968 <siprintf>
	uint8_t *hashString = md5String(stringToHash);
 80009ae:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fa62 	bl	8005e7c <md5String>
 80009b8:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
	char hashHex[33];
	for(unsigned int i = 0; i < 16; ++i){
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80009c2:	e014      	b.n	80009ee <W5500_Auth+0xce>
		sprintf(hashHex + i * 2, "%02x", hashString[i]);
 80009c4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80009ce:	18d0      	adds	r0, r2, r3
 80009d0:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80009d4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	495e      	ldr	r1, [pc, #376]	; (8000b58 <W5500_Auth+0x238>)
 80009e0:	f006 ffc2 	bl	8007968 <siprintf>
	for(unsigned int i = 0; i < 16; ++i){
 80009e4:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009e8:	3301      	adds	r3, #1
 80009ea:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80009ee:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80009f2:	2b0f      	cmp	r3, #15
 80009f4:	d9e6      	bls.n	80009c4 <W5500_Auth+0xa4>
	}
	//отправка запроса на сервер
	char req[32];
	sprintf(req, "a %s %s", login, openKey);
 80009f6:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80009fa:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80009fe:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
 8000a02:	f207 4014 	addw	r0, r7, #1044	; 0x414
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	4954      	ldr	r1, [pc, #336]	; (8000b5c <W5500_Auth+0x23c>)
 8000a0a:	f006 ffad 	bl	8007968 <siprintf>

	uint16_t len = sizeof(req) - 1;
 8000a0e:	231f      	movs	r3, #31
 8000a10:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
	uint8_t *pbuff = (uint8_t*) &req;
 8000a14:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000a18:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	while (len > 0) {
 8000a1c:	e01a      	b.n	8000a54 <W5500_Auth+0x134>
		int32_t nbytes = send(CLIENT_SOCKET, pbuff, len);
 8000a1e:	f8b7 348a 	ldrh.w	r3, [r7, #1162]	; 0x48a
 8000a22:	461a      	mov	r2, r3
 8000a24:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f005 fd0d 	bl	8006448 <send>
 8000a2e:	f8c7 046c 	str.w	r0, [r7, #1132]	; 0x46c
		if (nbytes <= 0) {
 8000a32:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dc04      	bgt.n	8000a44 <W5500_Auth+0x124>
			close(CLIENT_SOCKET);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f005 fbba 	bl	80061b4 <close>
			return 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	e07f      	b.n	8000b44 <W5500_Auth+0x224>
		}
		len -= nbytes;
 8000a44:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f8b7 248a 	ldrh.w	r2, [r7, #1162]	; 0x48a
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
	while (len > 0) {
 8000a54:	f8b7 348a 	ldrh.w	r3, [r7, #1162]	; 0x48a
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1e0      	bne.n	8000a1e <W5500_Auth+0xfe>
	}

	char buff[1024] = {0};
 8000a5c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000a60:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 fe43 	bl	80076fc <memset>
	len = sizeof(buff);
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
	//получение ответа от сервера
	while (1) {
		int32_t nbytes = recv(CLIENT_SOCKET, (uint8_t*) &buff, sizeof(buff));
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a86:	4619      	mov	r1, r3
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f005 fdd7 	bl	800663c <recv>
 8000a8e:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
		if (nbytes == SOCKERR_SOCKSTATUS)
 8000a92:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8000a96:	f113 0f07 	cmn.w	r3, #7
 8000a9a:	d00c      	beq.n	8000ab6 <W5500_Auth+0x196>
			break;
		len -= nbytes;
 8000a9c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	f8b7 248a 	ldrh.w	r2, [r7, #1162]	; 0x48a
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	f8a7 348a 	strh.w	r3, [r7, #1162]	; 0x48a
		if (len <= 0)
 8000aac:	f8b7 348a 	ldrh.w	r3, [r7, #1162]	; 0x48a
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <W5500_Auth+0x19a>
	while (1) {
 8000ab4:	e7e3      	b.n	8000a7e <W5500_Auth+0x15e>
			break;
 8000ab6:	bf00      	nop
 8000ab8:	e000      	b.n	8000abc <W5500_Auth+0x19c>
			break;
 8000aba:	bf00      	nop
	}

	int result = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
	for(int i = 0; i < 32; i++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000ac8:	e018      	b.n	8000afc <W5500_Auth+0x1dc>
		if(buff[i] != hashHex[i]) {
 8000aca:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000ace:	f2a3 427c 	subw	r2, r3, #1148	; 0x47c
 8000ad2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	f207 4134 	addw	r1, r7, #1076	; 0x434
 8000ade:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000ae2:	440b      	add	r3, r1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d003      	beq.n	8000af2 <W5500_Auth+0x1d2>
			result = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
			break;
 8000af0:	e008      	b.n	8000b04 <W5500_Auth+0x1e4>
	for(int i = 0; i < 32; i++) {
 8000af2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000af6:	3301      	adds	r3, #1
 8000af8:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8000afc:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8000b00:	2b1f      	cmp	r3, #31
 8000b02:	dde2      	ble.n	8000aca <W5500_Auth+0x1aa>
		}
	}
	if(result && *action != '\0') {
 8000b04:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d016      	beq.n	8000b3a <W5500_Auth+0x21a>
 8000b0c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000b10:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00e      	beq.n	8000b3a <W5500_Auth+0x21a>
		*pbuff = action;
 8000b1c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8000b20:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8000b2c:	701a      	strb	r2, [r3, #0]
		send(CLIENT_SOCKET, pbuff, sizeof(uint8_t));
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8000b34:	2000      	movs	r0, #0
 8000b36:	f005 fc87 	bl	8006448 <send>
	}

	//закрытие соединения
	close(CLIENT_SOCKET);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f005 fb3a 	bl	80061b4 <close>
	return result;
 8000b40:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000018 	.word	0x20000018
 8000b54:	08008c00 	.word	0x08008c00
 8000b58:	08008c08 	.word	0x08008c08
 8000b5c:	08008c10 	.word	0x08008c10

08000b60 <W5500_GetStat>:

void W5500_GetStat(char* buf) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000b6c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b70:	6018      	str	r0, [r3, #0]
	//открытие TCP сокета
	uint8_t code = socket(CLIENT_SOCKET, Sn_MR_TCP, W5500_PORT, 0);
 8000b72:	2300      	movs	r3, #0
 8000b74:	f642 2287 	movw	r2, #10887	; 0x2a87
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f005 fa04 	bl	8005f88 <socket>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if (code != CLIENT_SOCKET)
 8000b86:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 808d 	bne.w	8000caa <W5500_GetStat+0x14a>
		return 0;
	//открытие соединения
	code = connect(CLIENT_SOCKET, serverIp, SERVER_PORT);
 8000b90:	f641 7292 	movw	r2, #8082	; 0x1f92
 8000b94:	4947      	ldr	r1, [pc, #284]	; (8000cb4 <W5500_GetStat+0x154>)
 8000b96:	2000      	movs	r0, #0
 8000b98:	f005 fb7a 	bl	8006290 <connect>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if (code != SOCK_OK) {
 8000ba2:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d003      	beq.n	8000bb2 <W5500_GetStat+0x52>
		close(CLIENT_SOCKET);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f005 fb02 	bl	80061b4 <close>
		return 0;
 8000bb0:	e07c      	b.n	8000cac <W5500_GetStat+0x14c>
	}

	char req[] = { "s" };
 8000bb2:	2373      	movs	r3, #115	; 0x73
 8000bb4:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
	uint16_t len = sizeof(req) - 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
	uint8_t *pbuff = (uint8_t*) &req;
 8000bbe:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000bc2:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	while (len > 0) {
 8000bc6:	e019      	b.n	8000bfc <W5500_GetStat+0x9c>
		int32_t nbytes = send(CLIENT_SOCKET, pbuff, len);
 8000bc8:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f005 fc38 	bl	8006448 <send>
 8000bd8:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
		if (nbytes <= 0) {
 8000bdc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dc03      	bgt.n	8000bec <W5500_GetStat+0x8c>
			close(CLIENT_SOCKET);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f005 fae5 	bl	80061b4 <close>
			return 0;
 8000bea:	e05f      	b.n	8000cac <W5500_GetStat+0x14c>
		}
		len -= nbytes;
 8000bec:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
	while (len > 0) {
 8000bfc:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1e1      	bne.n	8000bc8 <W5500_GetStat+0x68>
	}

	char buff[1024] = {0};
 8000c04:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8000c08:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	3304      	adds	r3, #4
 8000c12:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f006 fd6f 	bl	80076fc <memset>
	len = sizeof(buff);
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
	//получение ответа от сервера
	while (1) {
		int32_t nbytes = recv(CLIENT_SOCKET, (uint8_t*) &buff, sizeof(buff));
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2e:	4619      	mov	r1, r3
 8000c30:	2000      	movs	r0, #0
 8000c32:	f005 fd03 	bl	800663c <recv>
 8000c36:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
		if (nbytes == SOCKERR_SOCKSTATUS)
 8000c3a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c3e:	f113 0f07 	cmn.w	r3, #7
 8000c42:	d00c      	beq.n	8000c5e <W5500_GetStat+0xfe>
			break;
		len -= nbytes;
 8000c44:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	; 0x426
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	f8a7 3426 	strh.w	r3, [r7, #1062]	; 0x426
		if (len <= 0)
 8000c54:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	; 0x426
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <W5500_GetStat+0x102>
	while (1) {
 8000c5c:	e7e3      	b.n	8000c26 <W5500_GetStat+0xc6>
			break;
 8000c5e:	bf00      	nop
 8000c60:	e000      	b.n	8000c64 <W5500_GetStat+0x104>
			break;
 8000c62:	bf00      	nop
	}

	//закрытие соединения
	close(CLIENT_SOCKET);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f005 faa5 	bl	80061b4 <close>
	for(int i = 0; i < 1024; ++i)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8000c70:	e015      	b.n	8000c9e <W5500_GetStat+0x13e>
		buf[i] = buff[i];
 8000c72:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000c76:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000c7a:	f2a2 4224 	subw	r2, r2, #1060	; 0x424
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8000c86:	f2a2 411c 	subw	r1, r2, #1052	; 0x41c
 8000c8a:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8000c8e:	440a      	add	r2, r1
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; ++i)
 8000c94:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8000c9e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca6:	dbe4      	blt.n	8000c72 <W5500_GetStat+0x112>
 8000ca8:	e000      	b.n	8000cac <W5500_GetStat+0x14c>
		return 0;
 8000caa:	bf00      	nop
}
 8000cac:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000018 	.word	0x20000018

08000cb8 <W5500_CheckPassword>:

int W5500_CheckPassword(char* password) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000cc4:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000cc8:	6018      	str	r0, [r3, #0]
	uint8_t code = socket(CLIENT_SOCKET, Sn_MR_TCP, W5500_PORT, 0);
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f642 2287 	movw	r2, #10887	; 0x2a87
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f005 f958 	bl	8005f88 <socket>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	if (code != CLIENT_SOCKET)
 8000cde:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <W5500_CheckPassword+0x32>
		return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e084      	b.n	8000df4 <W5500_CheckPassword+0x13c>
	//открытие соединения
	code = connect(CLIENT_SOCKET, serverIp, SERVER_PORT);
 8000cea:	f641 7292 	movw	r2, #8082	; 0x1f92
 8000cee:	4944      	ldr	r1, [pc, #272]	; (8000e00 <W5500_CheckPassword+0x148>)
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f005 facd 	bl	8006290 <connect>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f887 341d 	strb.w	r3, [r7, #1053]	; 0x41d
	if (code != SOCK_OK) {
 8000cfc:	f897 341d 	ldrb.w	r3, [r7, #1053]	; 0x41d
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d004      	beq.n	8000d0e <W5500_CheckPassword+0x56>
		close(CLIENT_SOCKET);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f005 fa55 	bl	80061b4 <close>
		return 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e072      	b.n	8000df4 <W5500_CheckPassword+0x13c>
	}

	char req[7] = {0};
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8000d14:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000d18:	2100      	movs	r1, #0
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	801a      	strh	r2, [r3, #0]
 8000d1e:	460a      	mov	r2, r1
 8000d20:	709a      	strb	r2, [r3, #2]
	sprintf(req, "p %s", password);
 8000d22:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d26:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8000d2a:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4934      	ldr	r1, [pc, #208]	; (8000e04 <W5500_CheckPassword+0x14c>)
 8000d32:	f006 fe19 	bl	8007968 <siprintf>

	uint16_t len = sizeof(req) - 1;
 8000d36:	2306      	movs	r3, #6
 8000d38:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
	uint8_t *pbuff = (uint8_t*) &req;
 8000d3c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000d40:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	while (len > 0) {
 8000d44:	e01a      	b.n	8000d7c <W5500_CheckPassword+0xc4>
		int32_t nbytes = send(CLIENT_SOCKET, pbuff, len);
 8000d46:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f8d7 1418 	ldr.w	r1, [r7, #1048]	; 0x418
 8000d50:	2000      	movs	r0, #0
 8000d52:	f005 fb79 	bl	8006448 <send>
 8000d56:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
		if (nbytes <= 0) {
 8000d5a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	dc04      	bgt.n	8000d6c <W5500_CheckPassword+0xb4>
			close(CLIENT_SOCKET);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f005 fa26 	bl	80061b4 <close>
			return 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e043      	b.n	8000df4 <W5500_CheckPassword+0x13c>
		}
		len -= nbytes;
 8000d6c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
	while (len > 0) {
 8000d7c:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1e0      	bne.n	8000d46 <W5500_CheckPassword+0x8e>
	}

	char buff[1024] = {0};
 8000d84:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000d88:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	3304      	adds	r3, #4
 8000d92:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f006 fcaf 	bl	80076fc <memset>
	len = sizeof(buff);
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
	//получение ответа от сервера
	while (1) {
		int32_t nbytes = recv(CLIENT_SOCKET, (uint8_t*) &buff, sizeof(buff));
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dae:	4619      	mov	r1, r3
 8000db0:	2000      	movs	r0, #0
 8000db2:	f005 fc43 	bl	800663c <recv>
 8000db6:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
		if (nbytes == SOCKERR_SOCKSTATUS)
 8000dba:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000dbe:	f113 0f07 	cmn.w	r3, #7
 8000dc2:	d00c      	beq.n	8000dde <W5500_CheckPassword+0x126>
			break;
		len -= nbytes;
 8000dc4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	; 0x41e
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
		if (len <= 0)
 8000dd4:	f8b7 341e 	ldrh.w	r3, [r7, #1054]	; 0x41e
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <W5500_CheckPassword+0x12a>
	while (1) {
 8000ddc:	e7e3      	b.n	8000da6 <W5500_CheckPassword+0xee>
			break;
 8000dde:	bf00      	nop
 8000de0:	e000      	b.n	8000de4 <W5500_CheckPassword+0x12c>
			break;
 8000de2:	bf00      	nop
	}

	//закрытие соединения
	close(CLIENT_SOCKET);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f005 f9e5 	bl	80061b4 <close>
	return buff[0];
 8000dea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000dee:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000df2:	781b      	ldrb	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000018 	.word	0x20000018
 8000e04:	08008c18 	.word	0x08008c18

08000e08 <keypadInit>:
uint8_t password_buf[4] = {0};
uint8_t buf_pos = 0;

TIM_HandleTypeDef *htim;

void keypadInit(TIM_HandleTypeDef * htim2) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	htim = htim2;
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <keypadInit+0x1c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000334 	.word	0x20000334

08000e28 <processKeypadInput>:

void processKeypadInput(uint16_t GPIO_Pin) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000e32:	f000 fe65 	bl	8001b00 <HAL_GetTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a7f      	ldr	r2, [pc, #508]	; (8001038 <processKeypadInput+0x210>)
 8000e3a:	6013      	str	r3, [r2, #0]
	if (currentMillis - previousMillis > 100) {
 8000e3c:	4b7e      	ldr	r3, [pc, #504]	; (8001038 <processKeypadInput+0x210>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b7e      	ldr	r3, [pc, #504]	; (800103c <processKeypadInput+0x214>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	f240 80f1 	bls.w	800102e <processKeypadInput+0x206>
//		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
//		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
//		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
//		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2108      	movs	r1, #8
 8000e50:	487b      	ldr	r0, [pc, #492]	; (8001040 <processKeypadInput+0x218>)
 8000e52:	f001 fd35 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2110      	movs	r1, #16
 8000e5a:	4879      	ldr	r0, [pc, #484]	; (8001040 <processKeypadInput+0x218>)
 8000e5c:	f001 fd30 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2120      	movs	r1, #32
 8000e64:	4876      	ldr	r0, [pc, #472]	; (8001040 <processKeypadInput+0x218>)
 8000e66:	f001 fd2b 	bl	80028c0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	2b40      	cmp	r3, #64	; 0x40
 8000e6e:	d10a      	bne.n	8000e86 <processKeypadInput+0x5e>
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	4873      	ldr	r0, [pc, #460]	; (8001040 <processKeypadInput+0x218>)
 8000e74:	f001 fd0c 	bl	8002890 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <processKeypadInput+0x5e>
		{
			checkBuf('#');
 8000e7e:	2023      	movs	r0, #35	; 0x23
 8000e80:	f000 f8e0 	bl	8001044 <checkBuf>
		{
 8000e84:	e02c      	b.n	8000ee0 <processKeypadInput+0xb8>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	2b80      	cmp	r3, #128	; 0x80
 8000e8a:	d10a      	bne.n	8000ea2 <processKeypadInput+0x7a>
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	486c      	ldr	r0, [pc, #432]	; (8001040 <processKeypadInput+0x218>)
 8000e90:	f001 fcfe 	bl	8002890 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <processKeypadInput+0x7a>
		{
			checkBuf('9');
 8000e9a:	2039      	movs	r0, #57	; 0x39
 8000e9c:	f000 f8d2 	bl	8001044 <checkBuf>
		{
 8000ea0:	e01e      	b.n	8000ee0 <processKeypadInput+0xb8>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ea8:	d10b      	bne.n	8000ec2 <processKeypadInput+0x9a>
 8000eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eae:	4864      	ldr	r0, [pc, #400]	; (8001040 <processKeypadInput+0x218>)
 8000eb0:	f001 fcee 	bl	8002890 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <processKeypadInput+0x9a>
		{
			checkBuf('6');
 8000eba:	2036      	movs	r0, #54	; 0x36
 8000ebc:	f000 f8c2 	bl	8001044 <checkBuf>
		{
 8000ec0:	e00e      	b.n	8000ee0 <processKeypadInput+0xb8>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec8:	d10a      	bne.n	8000ee0 <processKeypadInput+0xb8>
 8000eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ece:	485c      	ldr	r0, [pc, #368]	; (8001040 <processKeypadInput+0x218>)
 8000ed0:	f001 fcde 	bl	8002890 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <processKeypadInput+0xb8>
		{
			checkBuf('3');
 8000eda:	2033      	movs	r0, #51	; 0x33
 8000edc:	f000 f8b2 	bl	8001044 <checkBuf>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4856      	ldr	r0, [pc, #344]	; (8001040 <processKeypadInput+0x218>)
 8000ee6:	f001 fceb 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	4854      	ldr	r0, [pc, #336]	; (8001040 <processKeypadInput+0x218>)
 8000ef0:	f001 fce6 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	4851      	ldr	r0, [pc, #324]	; (8001040 <processKeypadInput+0x218>)
 8000efa:	f001 fce1 	bl	80028c0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	2b40      	cmp	r3, #64	; 0x40
 8000f02:	d10a      	bne.n	8000f1a <processKeypadInput+0xf2>
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	484e      	ldr	r0, [pc, #312]	; (8001040 <processKeypadInput+0x218>)
 8000f08:	f001 fcc2 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <processKeypadInput+0xf2>
		{
			checkBuf('0');
 8000f12:	2030      	movs	r0, #48	; 0x30
 8000f14:	f000 f896 	bl	8001044 <checkBuf>
		{
 8000f18:	e02c      	b.n	8000f74 <processKeypadInput+0x14c>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b80      	cmp	r3, #128	; 0x80
 8000f1e:	d10a      	bne.n	8000f36 <processKeypadInput+0x10e>
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	4847      	ldr	r0, [pc, #284]	; (8001040 <processKeypadInput+0x218>)
 8000f24:	f001 fcb4 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <processKeypadInput+0x10e>
		{
			checkBuf('8');
 8000f2e:	2038      	movs	r0, #56	; 0x38
 8000f30:	f000 f888 	bl	8001044 <checkBuf>
		{
 8000f34:	e01e      	b.n	8000f74 <processKeypadInput+0x14c>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f3c:	d10b      	bne.n	8000f56 <processKeypadInput+0x12e>
 8000f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f42:	483f      	ldr	r0, [pc, #252]	; (8001040 <processKeypadInput+0x218>)
 8000f44:	f001 fca4 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <processKeypadInput+0x12e>
		{
			checkBuf('5');
 8000f4e:	2035      	movs	r0, #53	; 0x35
 8000f50:	f000 f878 	bl	8001044 <checkBuf>
		{
 8000f54:	e00e      	b.n	8000f74 <processKeypadInput+0x14c>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f5c:	d10a      	bne.n	8000f74 <processKeypadInput+0x14c>
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	4837      	ldr	r0, [pc, #220]	; (8001040 <processKeypadInput+0x218>)
 8000f64:	f001 fc94 	bl	8002890 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d002      	beq.n	8000f74 <processKeypadInput+0x14c>
		{
			checkBuf('2');
 8000f6e:	2032      	movs	r0, #50	; 0x32
 8000f70:	f000 f868 	bl	8001044 <checkBuf>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2108      	movs	r1, #8
 8000f78:	4831      	ldr	r0, [pc, #196]	; (8001040 <processKeypadInput+0x218>)
 8000f7a:	f001 fca1 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2110      	movs	r1, #16
 8000f82:	482f      	ldr	r0, [pc, #188]	; (8001040 <processKeypadInput+0x218>)
 8000f84:	f001 fc9c 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <processKeypadInput+0x218>)
 8000f8e:	f001 fc97 	bl	80028c0 <HAL_GPIO_WritePin>
		if(GPIO_Pin == GPIO_PIN_6 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6))
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	2b40      	cmp	r3, #64	; 0x40
 8000f96:	d10a      	bne.n	8000fae <processKeypadInput+0x186>
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4829      	ldr	r0, [pc, #164]	; (8001040 <processKeypadInput+0x218>)
 8000f9c:	f001 fc78 	bl	8002890 <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <processKeypadInput+0x186>
		{
			checkBuf('*');
 8000fa6:	202a      	movs	r0, #42	; 0x2a
 8000fa8:	f000 f84c 	bl	8001044 <checkBuf>
		{
 8000fac:	e02c      	b.n	8001008 <processKeypadInput+0x1e0>
		}
		else if(GPIO_Pin == GPIO_PIN_7 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	2b80      	cmp	r3, #128	; 0x80
 8000fb2:	d10a      	bne.n	8000fca <processKeypadInput+0x1a2>
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	4822      	ldr	r0, [pc, #136]	; (8001040 <processKeypadInput+0x218>)
 8000fb8:	f001 fc6a 	bl	8002890 <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <processKeypadInput+0x1a2>
		{
			checkBuf('7');
 8000fc2:	2037      	movs	r0, #55	; 0x37
 8000fc4:	f000 f83e 	bl	8001044 <checkBuf>
		{
 8000fc8:	e01e      	b.n	8001008 <processKeypadInput+0x1e0>
		}
		else if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fd0:	d10b      	bne.n	8000fea <processKeypadInput+0x1c2>
 8000fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd6:	481a      	ldr	r0, [pc, #104]	; (8001040 <processKeypadInput+0x218>)
 8000fd8:	f001 fc5a 	bl	8002890 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <processKeypadInput+0x1c2>
		{
			checkBuf('4');
 8000fe2:	2034      	movs	r0, #52	; 0x34
 8000fe4:	f000 f82e 	bl	8001044 <checkBuf>
		{
 8000fe8:	e00e      	b.n	8001008 <processKeypadInput+0x1e0>
		}
		else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9))
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff0:	d10a      	bne.n	8001008 <processKeypadInput+0x1e0>
 8000ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff6:	4812      	ldr	r0, [pc, #72]	; (8001040 <processKeypadInput+0x218>)
 8000ff8:	f001 fc4a 	bl	8002890 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <processKeypadInput+0x1e0>
		{
			checkBuf('1');
 8001002:	2031      	movs	r0, #49	; 0x31
 8001004:	f000 f81e 	bl	8001044 <checkBuf>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <processKeypadInput+0x218>)
 800100e:	f001 fc57 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <processKeypadInput+0x218>)
 8001018:	f001 fc52 	bl	80028c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	2120      	movs	r1, #32
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <processKeypadInput+0x218>)
 8001022:	f001 fc4d 	bl	80028c0 <HAL_GPIO_WritePin>
		/*Configure GPIO pins : PB6 PB7 PB8 PB9 back to EXTI*/
//		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
//		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
//		HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
		previousMillis = currentMillis;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <processKeypadInput+0x210>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <processKeypadInput+0x214>)
 800102c:	6013      	str	r3, [r2, #0]
	}
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000328 	.word	0x20000328
 800103c:	20000324 	.word	0x20000324
 8001040:	40020400 	.word	0x40020400

08001044 <checkBuf>:

void checkBuf(uint8_t pressed_key) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	if(pressed_key == '*') {
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b2a      	cmp	r3, #42	; 0x2a
 8001052:	d103      	bne.n	800105c <checkBuf+0x18>
		buf_pos = 0;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <checkBuf+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
		return;
 800105a:	e023      	b.n	80010a4 <checkBuf+0x60>
	}

	password_buf[buf_pos] = pressed_key;
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <checkBuf+0x68>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <checkBuf+0x6c>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	5453      	strb	r3, [r2, r1]
	buf_pos += 1;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <checkBuf+0x68>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <checkBuf+0x68>)
 8001072:	701a      	strb	r2, [r3, #0]

	if(buf_pos == 4) {
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <checkBuf+0x68>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b04      	cmp	r3, #4
 800107a:	d113      	bne.n	80010a4 <checkBuf+0x60>
		buf_pos = 0;
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <checkBuf+0x68>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
		if(W5500_CheckPassword(password_buf)) {
 8001082:	480b      	ldr	r0, [pc, #44]	; (80010b0 <checkBuf+0x6c>)
 8001084:	f7ff fe18 	bl	8000cb8 <W5500_CheckPassword>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00a      	beq.n	80010a4 <checkBuf+0x60>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <checkBuf+0x70>)
 8001096:	f001 fc13 	bl	80028c0 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Start_IT(htim);
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <checkBuf+0x74>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 fe90 	bl	8003dc4 <HAL_TIM_Base_Start_IT>
		}
	}
}
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000330 	.word	0x20000330
 80010b0:	2000032c 	.word	0x2000032c
 80010b4:	40020800 	.word	0x40020800
 80010b8:	20000334 	.word	0x20000334

080010bc <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_UARTEx_RxEventCallback+0x40>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d110      	bne.n	80010f4 <HAL_UARTEx_RxEventCallback+0x38>
	{
		processBluetoothData(&huart1, RxBuf);
 80010d2:	490b      	ldr	r1, [pc, #44]	; (8001100 <HAL_UARTEx_RxEventCallback+0x44>)
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <HAL_UARTEx_RxEventCallback+0x48>)
 80010d6:	f7ff fa5d 	bl	8000594 <processBluetoothData>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 80010da:	2240      	movs	r2, #64	; 0x40
 80010dc:	4908      	ldr	r1, [pc, #32]	; (8001100 <HAL_UARTEx_RxEventCallback+0x44>)
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <HAL_UARTEx_RxEventCallback+0x48>)
 80010e0:	f003 fb73 	bl	80047ca <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_UARTEx_RxEventCallback+0x4c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_UARTEx_RxEventCallback+0x4c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0208 	bic.w	r2, r2, #8
 80010f2:	601a      	str	r2, [r3, #0]
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40011000 	.word	0x40011000
 8001100:	2000047c 	.word	0x2000047c
 8001104:	200003d8 	.word	0x200003d8
 8001108:	2000041c 	.word	0x2000041c

0800110c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
	processKeypadInput(GPIO_Pin);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fe85 	bl	8000e28 <processKeypadInput>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001138:	f001 fbc2 	bl	80028c0 <HAL_GPIO_WritePin>
    HAL_TIM_Base_Stop_IT(&htim2);
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800113e:	f002 fea3 	bl	8003e88 <HAL_TIM_Base_Stop_IT>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020800 	.word	0x40020800
 8001150:	20000390 	.word	0x20000390

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001158:	f000 fc6c 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115c:	f000 f828 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001160:	f000 f95c 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 8001164:	f000 f93a 	bl	80013dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001168:	f000 f90e 	bl	8001388 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800116c:	f000 f888 	bl	8001280 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001170:	f000 f8bc 	bl	80012ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  W5500_Init(&hspi1);
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <main+0x48>)
 8001176:	f7ff fb85 	bl	8000884 <W5500_Init>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 800117a:	2240      	movs	r2, #64	; 0x40
 800117c:	4908      	ldr	r1, [pc, #32]	; (80011a0 <main+0x4c>)
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <main+0x50>)
 8001180:	f003 fb23 	bl	80047ca <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <main+0x54>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <main+0x54>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0208 	bic.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]

  keypadInit(&htim2);
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <main+0x58>)
 8001196:	f7ff fe37 	bl	8000e08 <keypadInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800119a:	e7fe      	b.n	800119a <main+0x46>
 800119c:	20000338 	.word	0x20000338
 80011a0:	2000047c 	.word	0x2000047c
 80011a4:	200003d8 	.word	0x200003d8
 80011a8:	2000041c 	.word	0x2000041c
 80011ac:	20000390 	.word	0x20000390

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	; 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2230      	movs	r2, #48	; 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f006 fa9c 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <SystemClock_Config+0xc8>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a26      	ldr	r2, [pc, #152]	; (8001278 <SystemClock_Config+0xc8>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <SystemClock_Config+0xc8>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <SystemClock_Config+0xcc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a20      	ldr	r2, [pc, #128]	; (800127c <SystemClock_Config+0xcc>)
 80011fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <SystemClock_Config+0xcc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001214:	2310      	movs	r3, #16
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001218:	2302      	movs	r3, #2
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001220:	2310      	movs	r3, #16
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001224:	23c0      	movs	r3, #192	; 0xc0
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001228:	2302      	movs	r3, #2
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800122c:	2304      	movs	r3, #4
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fb75 	bl	8002924 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001240:	f000 f97e 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2103      	movs	r1, #3
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fdd7 	bl	8002e14 <HAL_RCC_ClockConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800126c:	f000 f968 	bl	8001540 <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	3750      	adds	r7, #80	; 0x50
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_SPI1_Init+0x64>)
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <MX_SPI1_Init+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_SPI1_Init+0x64>)
 800128c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001290:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_SPI1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012b4:	2208      	movs	r2, #8
 80012b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012cc:	220a      	movs	r2, #10
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_SPI1_Init+0x64>)
 80012d2:	f001 ff7f 	bl	80031d4 <HAL_SPI_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012dc:	f000 f930 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000338 	.word	0x20000338
 80012e8:	40013000 	.word	0x40013000

080012ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <MX_TIM2_Init+0x94>)
 800130a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_TIM2_Init+0x94>)
 8001312:	f242 720f 	movw	r2, #9999	; 0x270f
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <MX_TIM2_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_TIM2_Init+0x94>)
 8001320:	4a18      	ldr	r2, [pc, #96]	; (8001384 <MX_TIM2_Init+0x98>)
 8001322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_TIM2_Init+0x94>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_TIM2_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <MX_TIM2_Init+0x94>)
 8001332:	f002 fcf7 	bl	8003d24 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800133c:	f000 f900 	bl	8001540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <MX_TIM2_Init+0x94>)
 800134e:	f002 fed2 	bl	80040f6 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001358:	f000 f8f2 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_TIM2_Init+0x94>)
 800136a:	f003 f8cd 	bl	8004508 <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 f8e4 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000390 	.word	0x20000390
 8001384:	0001869f 	.word	0x0001869f

08001388 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_USART1_UART_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 8001394:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART1_UART_Init+0x4c>)
 80013c0:	f003 f924 	bl	800460c <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f000 f8b9 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200003d8 	.word	0x200003d8
 80013d8:	40011000 	.word	0x40011000

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_DMA_Init+0x3c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <MX_DMA_Init+0x3c>)
 80013ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_DMA_Init+0x3c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2044      	movs	r0, #68	; 0x44
 8001404:	f000 fc87 	bl	8001d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001408:	2044      	movs	r0, #68	; 0x44
 800140a:	f000 fca0 	bl	8001d4e <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <MX_GPIO_Init+0x114>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <MX_GPIO_Init+0x114>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <MX_GPIO_Init+0x114>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MX_GPIO_Init+0x114>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a36      	ldr	r2, [pc, #216]	; (8001530 <MX_GPIO_Init+0x114>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <MX_GPIO_Init+0x114>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_GPIO_Init+0x114>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a2f      	ldr	r2, [pc, #188]	; (8001530 <MX_GPIO_Init+0x114>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_GPIO_Init+0x114>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <MX_GPIO_Init+0x118>)
 800148e:	f001 fa17 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2118      	movs	r1, #24
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <MX_GPIO_Init+0x11c>)
 8001498:	f001 fa12 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2138      	movs	r1, #56	; 0x38
 80014a0:	4826      	ldr	r0, [pc, #152]	; (800153c <MX_GPIO_Init+0x120>)
 80014a2:	f001 fa0d 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	481d      	ldr	r0, [pc, #116]	; (8001534 <MX_GPIO_Init+0x118>)
 80014c0:	f001 f862 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80014c4:	2318      	movs	r3, #24
 80014c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	4817      	ldr	r0, [pc, #92]	; (8001538 <MX_GPIO_Init+0x11c>)
 80014dc:	f001 f854 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014e0:	2338      	movs	r3, #56	; 0x38
 80014e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <MX_GPIO_Init+0x120>)
 80014f8:	f001 f846 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80014fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001502:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001508:	2302      	movs	r3, #2
 800150a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	480a      	ldr	r0, [pc, #40]	; (800153c <MX_GPIO_Init+0x120>)
 8001514:	f001 f838 	bl	8002588 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2100      	movs	r1, #0
 800151c:	2017      	movs	r0, #23
 800151e:	f000 fbfa 	bl	8001d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001522:	2017      	movs	r0, #23
 8001524:	f000 fc13 	bl	8001d4e <HAL_NVIC_EnableIRQ>

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <HAL_MspInit+0x4c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_SPI_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12b      	bne.n	8001616 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_SPI_MspInit+0x88>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <HAL_SPI_MspInit+0x88>)
 80015c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_SPI_MspInit+0x88>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_SPI_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_SPI_MspInit+0x88>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_SPI_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015f6:	23e0      	movs	r3, #224	; 0xe0
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001606:	2305      	movs	r3, #5
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <HAL_SPI_MspInit+0x8c>)
 8001612:	f000 ffb9 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40013000 	.word	0x40013000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163c:	d115      	bne.n	800166a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_TIM_Base_MspInit+0x48>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_TIM_Base_MspInit+0x48>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_TIM_Base_MspInit+0x48>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	201c      	movs	r0, #28
 8001660:	f000 fb59 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001664:	201c      	movs	r0, #28
 8001666:	f000 fb72 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a34      	ldr	r2, [pc, #208]	; (8001768 <HAL_UART_MspInit+0xf0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d162      	bne.n	8001760 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_UART_MspInit+0xf4>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a32      	ldr	r2, [pc, #200]	; (800176c <HAL_UART_MspInit+0xf4>)
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b30      	ldr	r3, [pc, #192]	; (800176c <HAL_UART_MspInit+0xf4>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_UART_MspInit+0xf4>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a2b      	ldr	r2, [pc, #172]	; (800176c <HAL_UART_MspInit+0xf4>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_UART_MspInit+0xf4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e4:	2307      	movs	r3, #7
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4820      	ldr	r0, [pc, #128]	; (8001770 <HAL_UART_MspInit+0xf8>)
 80016f0:	f000 ff4a 	bl	8002588 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <HAL_UART_MspInit+0xfc>)
 80016f6:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_UART_MspInit+0x100>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_UART_MspInit+0xfc>)
 80016fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001700:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_UART_MspInit+0xfc>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_UART_MspInit+0xfc>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_UART_MspInit+0xfc>)
 8001710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001714:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_UART_MspInit+0xfc>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_UART_MspInit+0xfc>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_UART_MspInit+0xfc>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_UART_MspInit+0xfc>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_UART_MspInit+0xfc>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001734:	480f      	ldr	r0, [pc, #60]	; (8001774 <HAL_UART_MspInit+0xfc>)
 8001736:	f000 fb25 	bl	8001d84 <HAL_DMA_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001740:	f7ff fefe 	bl	8001540 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_UART_MspInit+0xfc>)
 8001748:	639a      	str	r2, [r3, #56]	; 0x38
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_UART_MspInit+0xfc>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2025      	movs	r0, #37	; 0x25
 8001756:	f000 fade 	bl	8001d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800175a:	2025      	movs	r0, #37	; 0x25
 800175c:	f000 faf7 	bl	8001d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40011000 	.word	0x40011000
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000
 8001774:	2000041c 	.word	0x2000041c
 8001778:	40026488 	.word	0x40026488

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 f986 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80017d4:	2040      	movs	r0, #64	; 0x40
 80017d6:	f001 f88d 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017da:	2080      	movs	r0, #128	; 0x80
 80017dc:	f001 f88a 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80017e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017e4:	f001 f886 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80017e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017ec:	f001 f882 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <TIM2_IRQHandler+0x10>)
 80017fa:	f002 fb74 	bl	8003ee6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000390 	.word	0x20000390

08001808 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART1_IRQHandler+0x10>)
 800180e:	f003 f841 	bl	8004894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200003d8 	.word	0x200003d8

0800181c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA2_Stream5_IRQHandler+0x10>)
 8001822:	f000 fc47 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000041c 	.word	0x2000041c

08001830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_kill>:

int _kill(int pid, int sig)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184a:	f005 ff13 	bl	8007674 <__errno>
 800184e:	4603      	mov	r3, r0
 8001850:	2216      	movs	r2, #22
 8001852:	601a      	str	r2, [r3, #0]
	return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_exit>:

void _exit (int status)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe7 	bl	8001840 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001872:	e7fe      	b.n	8001872 <_exit+0x12>

08001874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00a      	b.n	800189c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001886:	f3af 8000 	nop.w
 800188a:	4601      	mov	r1, r0
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf0      	blt.n	8001886 <_read+0x12>
	}

return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e009      	b.n	80018d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf1      	blt.n	80018c0 <_write+0x12>
	}
	return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f005 fe78 	bl	8007674 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20020000 	.word	0x20020000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	200004bc 	.word	0x200004bc
 80019b8:	200004f8 	.word	0x200004f8

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019fc:	4c0b      	ldr	r4, [pc, #44]	; (8001a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0a:	f7ff ffd7 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f005 fe37 	bl	8007680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff fb9f 	bl	8001154 <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8001a24:	08008e28 	.word	0x08008e28
  ldr r2, =_sbss
 8001a28:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8001a2c:	200004f4 	.word	0x200004f4

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_Init+0x40>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_Init+0x40>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_Init+0x40>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f94f 	bl	8001d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fd70 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f967 	bl	8001d6a <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 f92f 	bl	8001d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000001c 	.word	0x2000001c
 8001ad0:	20000024 	.word	0x20000024
 8001ad4:	20000020 	.word	0x20000020

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000024 	.word	0x20000024
 8001afc:	200004c0 	.word	0x200004c0

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	200004c0 	.word	0x200004c0

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000024 	.word	0x20000024

08001b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0a1b      	lsrs	r3, r3, #8
 8001bb2:	f003 0307 	and.w	r3, r3, #7
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db0b      	blt.n	8001bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 021f 	and.w	r2, r3, #31
 8001bdc:	4907      	ldr	r1, [pc, #28]	; (8001bfc <__NVIC_EnableIRQ+0x38>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	2001      	movs	r0, #1
 8001be6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ccc:	d301      	bcc.n	8001cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00f      	b.n	8001cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <SysTick_Config+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cda:	210f      	movs	r1, #15
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f7ff ff8e 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <SysTick_Config+0x40>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cea:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <SysTick_Config+0x40>)
 8001cec:	2207      	movs	r2, #7
 8001cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	e000e010 	.word	0xe000e010

08001d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ff29 	bl	8001b60 <__NVIC_SetPriorityGrouping>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d28:	f7ff ff3e 	bl	8001ba8 <__NVIC_GetPriorityGrouping>
 8001d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	6978      	ldr	r0, [r7, #20]
 8001d34:	f7ff ff8e 	bl	8001c54 <NVIC_EncodePriority>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff5d 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff31 	bl	8001bc4 <__NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffa2 	bl	8001cbc <SysTick_Config>
 8001d78:	4603      	mov	r3, r0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff feb6 	bl	8001b00 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e099      	b.n	8001ed4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc0:	e00f      	b.n	8001de2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc2:	f7ff fe9d 	bl	8001b00 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d908      	bls.n	8001de2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2203      	movs	r2, #3
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e078      	b.n	8001ed4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e8      	bne.n	8001dc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_DMA_Init+0x158>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d107      	bne.n	8001e4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	4313      	orrs	r3, r2
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f023 0307 	bic.w	r3, r3, #7
 8001e62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d117      	bne.n	8001ea6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 fb01 	bl	8002490 <DMA_CheckFifoParam>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e016      	b.n	8001ed4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fab8 	bl	8002424 <DMA_CalcBaseAndBitshift>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	223f      	movs	r2, #63	; 0x3f
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	f010803f 	.word	0xf010803f

08001ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Start_IT+0x26>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e040      	b.n	8001f88 <HAL_DMA_Start_IT+0xa8>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12f      	bne.n	8001f7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fa4a 	bl	80023c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	223f      	movs	r2, #63	; 0x3f
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0216 	orr.w	r2, r2, #22
 8001f4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0208 	orr.w	r2, r2, #8
 8001f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e005      	b.n	8001f86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
 8001f84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f9e:	f7ff fdaf 	bl	8001b00 <HAL_GetTick>
 8001fa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d008      	beq.n	8001fc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e052      	b.n	8002068 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0216 	bic.w	r2, r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <HAL_DMA_Abort+0x62>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002012:	e013      	b.n	800203c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002014:	f7ff fd74 	bl	8001b00 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b05      	cmp	r3, #5
 8002020:	d90c      	bls.n	800203c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2203      	movs	r2, #3
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e015      	b.n	8002068 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e4      	bne.n	8002014 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	223f      	movs	r2, #63	; 0x3f
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00c      	b.n	80020a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c0:	4b8e      	ldr	r3, [pc, #568]	; (80022fc <HAL_DMA_IRQHandler+0x248>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a8e      	ldr	r2, [pc, #568]	; (8002300 <HAL_DMA_IRQHandler+0x24c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2210      	movs	r2, #16
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e01f      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e016      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2220      	movs	r2, #32
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808f 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8087 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2220      	movs	r2, #32
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b05      	cmp	r3, #5
 800225c:	d136      	bne.n	80022cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_IRQHandler+0x1da>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	223f      	movs	r2, #63	; 0x3f
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07e      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
        }
        return;
 80022ca:	e079      	b.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e02c      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
 80022fa:	bf00      	nop
 80022fc:	2000001c 	.word	0x2000001c
 8002300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e01e      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0210 	bic.w	r2, r2, #16
 8002332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	2b00      	cmp	r3, #0
 800235a:	d032      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2205      	movs	r2, #5
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3301      	adds	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	d307      	bcc.n	800239c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f2      	bne.n	8002380 <HAL_DMA_IRQHandler+0x2cc>
 800239a:	e000      	b.n	800239e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800239c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
 80023be:	e000      	b.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c0:	bf00      	nop
    }
  }
}
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d108      	bne.n	8002408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002406:	e007      	b.n	8002418 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	60da      	str	r2, [r3, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	3b10      	subs	r3, #16
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <DMA_CalcBaseAndBitshift+0x64>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <DMA_CalcBaseAndBitshift+0x68>)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d909      	bls.n	8002466 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	1d1a      	adds	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	; 0x58
 8002464:	e007      	b.n	8002476 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	aaaaaaab 	.word	0xaaaaaaab
 800248c:	08008c6c 	.word	0x08008c6c

08002490 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11f      	bne.n	80024ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d856      	bhi.n	800255e <DMA_CheckFifoParam+0xce>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <DMA_CheckFifoParam+0x28>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024db 	.word	0x080024db
 80024c0:	080024c9 	.word	0x080024c9
 80024c4:	0800255f 	.word	0x0800255f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d046      	beq.n	8002562 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d8:	e043      	b.n	8002562 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e2:	d140      	bne.n	8002566 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e8:	e03d      	b.n	8002566 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	d121      	bne.n	8002538 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d837      	bhi.n	800256a <DMA_CheckFifoParam+0xda>
 80024fa:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <DMA_CheckFifoParam+0x70>)
 80024fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002500:	08002511 	.word	0x08002511
 8002504:	08002517 	.word	0x08002517
 8002508:	08002511 	.word	0x08002511
 800250c:	08002529 	.word	0x08002529
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e030      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d025      	beq.n	800256e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002526:	e022      	b.n	800256e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002530:	d11f      	bne.n	8002572 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002536:	e01c      	b.n	8002572 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d903      	bls.n	8002546 <DMA_CheckFifoParam+0xb6>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d003      	beq.n	800254c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002544:	e018      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	73fb      	strb	r3, [r7, #15]
      break;
 800254a:	e015      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00e      	beq.n	8002576 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e00b      	b.n	8002576 <DMA_CheckFifoParam+0xe6>
      break;
 800255e:	bf00      	nop
 8002560:	e00a      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002562:	bf00      	nop
 8002564:	e008      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002566:	bf00      	nop
 8002568:	e006      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 800256a:	bf00      	nop
 800256c:	e004      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;   
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <DMA_CheckFifoParam+0xe8>
      break;
 8002576:	bf00      	nop
    }
  } 
  
  return status; 
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e159      	b.n	8002858 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 8148 	bne.w	8002852 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d005      	beq.n	80025da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d130      	bne.n	800263c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 0201 	and.w	r2, r3, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b03      	cmp	r3, #3
 8002646:	d017      	beq.n	8002678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d123      	bne.n	80026cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a2 	beq.w	8002852 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b57      	ldr	r3, [pc, #348]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_GPIO_Init+0x2e8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272a:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x2ec>)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a49      	ldr	r2, [pc, #292]	; (8002878 <HAL_GPIO_Init+0x2f0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x202>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a48      	ldr	r2, [pc, #288]	; (800287c <HAL_GPIO_Init+0x2f4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x1fe>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a47      	ldr	r2, [pc, #284]	; (8002880 <HAL_GPIO_Init+0x2f8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x1fa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a46      	ldr	r2, [pc, #280]	; (8002884 <HAL_GPIO_Init+0x2fc>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x1f6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a45      	ldr	r2, [pc, #276]	; (8002888 <HAL_GPIO_Init+0x300>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x1f2>
 8002776:	2304      	movs	r3, #4
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x204>
 800277a:	2307      	movs	r3, #7
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x204>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x204>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x204>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x204>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	; (8002874 <HAL_GPIO_Init+0x2ec>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_GPIO_Init+0x304>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a2f      	ldr	r2, [pc, #188]	; (800288c <HAL_GPIO_Init+0x304>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_GPIO_Init+0x304>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_GPIO_Init+0x304>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_GPIO_Init+0x304>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002822:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_GPIO_Init+0x304>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_GPIO_Init+0x304>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <HAL_GPIO_Init+0x304>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f aea2 	bls.w	80025a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e001      	b.n	80028b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fbfa 	bl	800110c <HAL_GPIO_EXTI_Callback>
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e267      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d075      	beq.n	8002a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	4b88      	ldr	r3, [pc, #544]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d00c      	beq.n	8002968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294e:	4b85      	ldr	r3, [pc, #532]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002956:	2b08      	cmp	r3, #8
 8002958:	d112      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b82      	ldr	r3, [pc, #520]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05b      	beq.n	8002a2c <HAL_RCC_OscConfig+0x108>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d157      	bne.n	8002a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e242      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x74>
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a75      	ldr	r2, [pc, #468]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e01d      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6c      	ldr	r2, [pc, #432]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 80029bc:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a68      	ldr	r2, [pc, #416]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b66      	ldr	r3, [pc, #408]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff f890 	bl	8001b00 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff f88c 	bl	8001b00 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e207      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0xc0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff f87c 	bl	8001b00 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff f878 	bl	8001b00 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1f3      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0xe8>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d11c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1c7      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4937      	ldr	r1, [pc, #220]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a94:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7ff f831 	bl	8001b00 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7ff f82d 	bl	8001b00 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1a8      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4925      	ldr	r1, [pc, #148]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCC_OscConfig+0x244>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7ff f810 	bl	8001b00 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7ff f80c 	bl	8001b00 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e187      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d036      	beq.n	8002b7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_RCC_OscConfig+0x248>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fff0 	bl	8001b00 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fe ffec 	bl	8001b00 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e167      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x240>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x200>
 8002b42:	e01b      	b.n	8002b7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <HAL_RCC_OscConfig+0x248>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fe ffd9 	bl	8001b00 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	e00e      	b.n	8002b70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fe ffd5 	bl	8001b00 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d907      	bls.n	8002b70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e150      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	42470000 	.word	0x42470000
 8002b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	4b88      	ldr	r3, [pc, #544]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ea      	bne.n	8002b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8097 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8e:	4b81      	ldr	r3, [pc, #516]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	4b7d      	ldr	r3, [pc, #500]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a7c      	ldr	r2, [pc, #496]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b7a      	ldr	r3, [pc, #488]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b77      	ldr	r3, [pc, #476]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d118      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc6:	4b74      	ldr	r3, [pc, #464]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a73      	ldr	r2, [pc, #460]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe ff95 	bl	8001b00 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe ff91 	bl	8001b00 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e10c      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_OscConfig+0x474>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2ea>
 8002c00:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a63      	ldr	r2, [pc, #396]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0x324>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x30c>
 8002c16:	4b5f      	ldr	r3, [pc, #380]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a5e      	ldr	r2, [pc, #376]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	4b5c      	ldr	r3, [pc, #368]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a5b      	ldr	r2, [pc, #364]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0x324>
 8002c30:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a57      	ldr	r2, [pc, #348]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	4b55      	ldr	r3, [pc, #340]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fe ff56 	bl	8001b00 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe ff52 	bl	8001b00 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0cb      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ee      	beq.n	8002c58 <HAL_RCC_OscConfig+0x334>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe ff40 	bl	8001b00 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe ff3c 	bl	8001b00 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0b5      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9a:	4b3e      	ldr	r3, [pc, #248]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ee      	bne.n	8002c84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4b39      	ldr	r3, [pc, #228]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a1 	beq.w	8002e04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc2:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d05c      	beq.n	8002d88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d141      	bne.n	8002d5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_OscConfig+0x478>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe ff10 	bl	8001b00 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe ff0c 	bl	8001b00 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e087      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	491b      	ldr	r1, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_RCC_OscConfig+0x478>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fee5 	bl	8001b00 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe fee1 	bl	8001b00 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e05c      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x416>
 8002d58:	e054      	b.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_RCC_OscConfig+0x478>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fece 	bl	8001b00 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d68:	f7fe feca 	bl	8001b00 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e045      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x444>
 8002d86:	e03d      	b.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e038      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x4ec>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d028      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d121      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d11a      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d111      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	3b01      	subs	r3, #1
 8002dea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800

08002e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0cc      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d90c      	bls.n	8002e50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0b8      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e68:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e80:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	494d      	ldr	r1, [pc, #308]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d044      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d119      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e07f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e06f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e067      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4934      	ldr	r1, [pc, #208]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7fe fdfc 	bl	8001b00 <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7fe fdf8 	bl	8001b00 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e04f      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d20c      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e032      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4916      	ldr	r1, [pc, #88]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f9a:	f000 f821 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	490a      	ldr	r1, [pc, #40]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	5ccb      	ldrb	r3, [r1, r3]
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fd5c 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023c00 	.word	0x40023c00
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08008c54 	.word	0x08008c54
 8002fd8:	2000001c 	.word	0x2000001c
 8002fdc:	20000020 	.word	0x20000020

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b090      	sub	sp, #64	; 0x40
 8002fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
 8002fec:	2300      	movs	r3, #0
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff8:	4b59      	ldr	r3, [pc, #356]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	d00d      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x40>
 8003004:	2b08      	cmp	r3, #8
 8003006:	f200 80a1 	bhi.w	800314c <HAL_RCC_GetSysClockFreq+0x16c>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_RCC_GetSysClockFreq+0x34>
 800300e:	2b04      	cmp	r3, #4
 8003010:	d003      	beq.n	800301a <HAL_RCC_GetSysClockFreq+0x3a>
 8003012:	e09b      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_GetSysClockFreq+0x184>)
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003018:	e09b      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_GetSysClockFreq+0x188>)
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800301e:	e098      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302a:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d028      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003036:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	2200      	movs	r2, #0
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	627a      	str	r2, [r7, #36]	; 0x24
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003048:	2100      	movs	r1, #0
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_GetSysClockFreq+0x188>)
 800304c:	fb03 f201 	mul.w	r2, r3, r1
 8003050:	2300      	movs	r3, #0
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	4413      	add	r3, r2
 8003058:	4a43      	ldr	r2, [pc, #268]	; (8003168 <HAL_RCC_GetSysClockFreq+0x188>)
 800305a:	fba0 1202 	umull	r1, r2, r0, r2
 800305e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003060:	460a      	mov	r2, r1
 8003062:	62ba      	str	r2, [r7, #40]	; 0x28
 8003064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003066:	4413      	add	r3, r2
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	2200      	movs	r2, #0
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	61fa      	str	r2, [r7, #28]
 8003072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800307a:	f7fd f909 	bl	8000290 <__aeabi_uldivmod>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4613      	mov	r3, r2
 8003084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003086:	e053      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003088:	4b35      	ldr	r3, [pc, #212]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	2200      	movs	r2, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	617a      	str	r2, [r7, #20]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800309a:	f04f 0b00 	mov.w	fp, #0
 800309e:	4652      	mov	r2, sl
 80030a0:	465b      	mov	r3, fp
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	0159      	lsls	r1, r3, #5
 80030ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b0:	0150      	lsls	r0, r2, #5
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	ebb2 080a 	subs.w	r8, r2, sl
 80030ba:	eb63 090b 	sbc.w	r9, r3, fp
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030d2:	ebb2 0408 	subs.w	r4, r2, r8
 80030d6:	eb63 0509 	sbc.w	r5, r3, r9
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	00eb      	lsls	r3, r5, #3
 80030e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e8:	00e2      	lsls	r2, r4, #3
 80030ea:	4614      	mov	r4, r2
 80030ec:	461d      	mov	r5, r3
 80030ee:	eb14 030a 	adds.w	r3, r4, sl
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	eb45 030b 	adc.w	r3, r5, fp
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003106:	4629      	mov	r1, r5
 8003108:	028b      	lsls	r3, r1, #10
 800310a:	4621      	mov	r1, r4
 800310c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003110:	4621      	mov	r1, r4
 8003112:	028a      	lsls	r2, r1, #10
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311a:	2200      	movs	r2, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	60fa      	str	r2, [r7, #12]
 8003120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003124:	f7fd f8b4 	bl	8000290 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_GetSysClockFreq+0x180>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	3301      	adds	r3, #1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800314a:	e002      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetSysClockFreq+0x184>)
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003154:	4618      	mov	r0, r3
 8003156:	3740      	adds	r7, #64	; 0x40
 8003158:	46bd      	mov	sp, r7
 800315a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	00f42400 	.word	0x00f42400
 8003168:	017d7840 	.word	0x017d7840

0800316c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_RCC_GetHCLKFreq+0x14>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	2000001c 	.word	0x2000001c

08003184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003188:	f7ff fff0 	bl	800316c <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0a9b      	lsrs	r3, r3, #10
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4903      	ldr	r1, [pc, #12]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	08008c64 	.word	0x08008c64

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b0:	f7ff ffdc 	bl	800316c <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0b5b      	lsrs	r3, r3, #13
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	08008c64 	.word	0x08008c64

080031d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07b      	b.n	80032de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f6:	d009      	beq.n	800320c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	61da      	str	r2, [r3, #28]
 80031fe:	e005      	b.n	800320c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe f9b8 	bl	800159c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	f003 0104 	and.w	r1, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f003 0210 	and.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b088      	sub	sp, #32
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_SPI_Transmit+0x22>
 8003304:	2302      	movs	r3, #2
 8003306:	e126      	b.n	8003556 <HAL_SPI_Transmit+0x270>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003310:	f7fe fbf6 	bl	8001b00 <HAL_GetTick>
 8003314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d002      	beq.n	800332c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800332a:	e10b      	b.n	8003544 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_Transmit+0x52>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800333c:	e102      	b.n	8003544 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2203      	movs	r2, #3
 8003342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003384:	d10f      	bne.n	80033a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d007      	beq.n	80033c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033cc:	d14b      	bne.n	8003466 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_SPI_Transmit+0xf6>
 80033d6:	8afb      	ldrh	r3, [r7, #22]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d13e      	bne.n	800345a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	881a      	ldrh	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	1c9a      	adds	r2, r3, #2
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003400:	e02b      	b.n	800345a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d112      	bne.n	8003436 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	86da      	strh	r2, [r3, #54]	; 0x36
 8003434:	e011      	b.n	800345a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003436:	f7fe fb63 	bl	8001b00 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d803      	bhi.n	800344e <HAL_SPI_Transmit+0x168>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d102      	bne.n	8003454 <HAL_SPI_Transmit+0x16e>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003458:	e074      	b.n	8003544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ce      	bne.n	8003402 <HAL_SPI_Transmit+0x11c>
 8003464:	e04c      	b.n	8003500 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_SPI_Transmit+0x18e>
 800346e:	8afb      	ldrh	r3, [r7, #22]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d140      	bne.n	80034f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	7812      	ldrb	r2, [r2, #0]
 8003480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800349a:	e02c      	b.n	80034f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d113      	bne.n	80034d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80034d0:	e011      	b.n	80034f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d2:	f7fe fb15 	bl	8001b00 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d803      	bhi.n	80034ea <HAL_SPI_Transmit+0x204>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d102      	bne.n	80034f0 <HAL_SPI_Transmit+0x20a>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034f4:	e026      	b.n	8003544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1cd      	bne.n	800349c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	6839      	ldr	r1, [r7, #0]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fbcb 	bl	8003ca0 <SPI_EndRxTxTransaction>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e000      	b.n	8003544 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003554:	7ffb      	ldrb	r3, [r7, #31]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b088      	sub	sp, #32
 8003562:	af02      	add	r7, sp, #8
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d112      	bne.n	80035a2 <HAL_SPI_Receive+0x44>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10e      	bne.n	80035a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2204      	movs	r2, #4
 8003588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f8f1 	bl	8003780 <HAL_SPI_TransmitReceive>
 800359e:	4603      	mov	r3, r0
 80035a0:	e0ea      	b.n	8003778 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_SPI_Receive+0x52>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0e3      	b.n	8003778 <HAL_SPI_Receive+0x21a>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035b8:	f7fe faa2 	bl	8001b00 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
 80035cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ce:	e0ca      	b.n	8003766 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_SPI_Receive+0x7e>
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035e0:	e0c1      	b.n	8003766 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2204      	movs	r2, #4
 80035e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	88fa      	ldrh	r2, [r7, #6]
 80035fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003628:	d10f      	bne.n	800364a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d007      	beq.n	8003668 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003666:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d162      	bne.n	8003736 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003670:	e02e      	b.n	80036d0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b01      	cmp	r3, #1
 800367e:	d115      	bne.n	80036ac <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f103 020c 	add.w	r2, r3, #12
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036aa:	e011      	b.n	80036d0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ac:	f7fe fa28 	bl	8001b00 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d803      	bhi.n	80036c4 <HAL_SPI_Receive+0x166>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_Receive+0x16c>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036ce:	e04a      	b.n	8003766 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1cb      	bne.n	8003672 <HAL_SPI_Receive+0x114>
 80036da:	e031      	b.n	8003740 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d113      	bne.n	8003712 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	b292      	uxth	r2, r2
 80036f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	1c9a      	adds	r2, r3, #2
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003710:	e011      	b.n	8003736 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003712:	f7fe f9f5 	bl	8001b00 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d803      	bhi.n	800372a <HAL_SPI_Receive+0x1cc>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d102      	bne.n	8003730 <HAL_SPI_Receive+0x1d2>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003734:	e017      	b.n	8003766 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1cd      	bne.n	80036dc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fa45 	bl	8003bd4 <SPI_EndRxTransaction>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
 8003762:	e000      	b.n	8003766 <HAL_SPI_Receive+0x208>
  }

error :
 8003764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	; 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800378e:	2301      	movs	r3, #1
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x26>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e18a      	b.n	8003abc <HAL_SPI_TransmitReceive+0x33c>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ae:	f7fe f9a7 	bl	8001b00 <HAL_GetTick>
 80037b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037c4:	887b      	ldrh	r3, [r7, #2]
 80037c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d00f      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x70>
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d6:	d107      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x68>
 80037e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d003      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037ee:	e15b      	b.n	8003aa8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x82>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x82>
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003808:	e14e      	b.n	8003aa8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b04      	cmp	r3, #4
 8003814:	d003      	beq.n	800381e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2205      	movs	r2, #5
 800381a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	887a      	ldrh	r2, [r7, #2]
 800382e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	887a      	ldrh	r2, [r7, #2]
 8003846:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d007      	beq.n	8003872 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	d178      	bne.n	800396e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_SPI_TransmitReceive+0x10a>
 8003884:	8b7b      	ldrh	r3, [r7, #26]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d166      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	1c9a      	adds	r2, r3, #2
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ae:	e053      	b.n	8003958 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d11b      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x176>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d016      	beq.n	80038f6 <HAL_SPI_TransmitReceive+0x176>
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d113      	bne.n	80038f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d119      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x1b8>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d014      	beq.n	8003938 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003918:	b292      	uxth	r2, r2
 800391a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003934:	2301      	movs	r3, #1
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003938:	f7fe f8e2 	bl	8001b00 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003944:	429a      	cmp	r2, r3
 8003946:	d807      	bhi.n	8003958 <HAL_SPI_TransmitReceive+0x1d8>
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d003      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003956:	e0a7      	b.n	8003aa8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1a6      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x130>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1a1      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x130>
 800396c:	e07c      	b.n	8003a68 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_TransmitReceive+0x1fc>
 8003976:	8b7b      	ldrh	r3, [r7, #26]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d16b      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a2:	e057      	b.n	8003a54 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d11c      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x26c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d017      	beq.n	80039ec <HAL_SPI_TransmitReceive+0x26c>
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d114      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d119      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x2ae>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d014      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a2e:	f7fe f867 	bl	8001b00 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d803      	bhi.n	8003a46 <HAL_SPI_TransmitReceive+0x2c6>
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d102      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x2cc>
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a52:	e029      	b.n	8003aa8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1a2      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x224>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d19d      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f917 	bl	8003ca0 <SPI_EndRxTxTransaction>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a84:	e010      	b.n	8003aa8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	e000      	b.n	8003aa8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003aa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3730      	adds	r7, #48	; 0x30
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad4:	f7fe f814 	bl	8001b00 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ae4:	f7fe f80c 	bl	8001b00 <HAL_GetTick>
 8003ae8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	015b      	lsls	r3, r3, #5
 8003af0:	0d1b      	lsrs	r3, r3, #20
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003afa:	e054      	b.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d050      	beq.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b04:	f7fd fffc 	bl	8001b00 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d902      	bls.n	8003b1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d13d      	bne.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b32:	d111      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d004      	beq.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d107      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b60:	d10f      	bne.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e017      	b.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d19b      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000001c 	.word	0x2000001c

08003bd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be8:	d111      	bne.n	8003c0e <SPI_EndRxTransaction+0x3a>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf2:	d004      	beq.n	8003bfe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d107      	bne.n	8003c0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c16:	d12a      	bne.n	8003c6e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c20:	d012      	beq.n	8003c48 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2180      	movs	r1, #128	; 0x80
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ff49 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02d      	beq.n	8003c94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e026      	b.n	8003c96 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2101      	movs	r1, #1
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff ff36 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01a      	beq.n	8003c94 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	f043 0220 	orr.w	r2, r3, #32
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e013      	b.n	8003c96 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2101      	movs	r1, #1
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff ff23 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f043 0220 	orr.w	r2, r3, #32
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e000      	b.n	8003c96 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <SPI_EndRxTxTransaction+0x7c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <SPI_EndRxTxTransaction+0x80>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	0d5b      	lsrs	r3, r3, #21
 8003cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cca:	d112      	bne.n	8003cf2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fef4 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00f      	b.n	8003d12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b80      	cmp	r3, #128	; 0x80
 8003d0a:	d0f2      	beq.n	8003cf2 <SPI_EndRxTxTransaction+0x52>
 8003d0c:	e000      	b.n	8003d10 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d0e:	bf00      	nop
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	2000001c 	.word	0x2000001c
 8003d20:	165e9f81 	.word	0x165e9f81

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e041      	b.n	8003dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fc6e 	bl	800162c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fab6 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e044      	b.n	8003e66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_TIM_Base_Start_IT+0xb0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d018      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x6c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d013      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x6c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x6c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_TIM_Base_Start_IT+0xb8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d009      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x6c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a17      	ldr	r2, [pc, #92]	; (8003e80 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x6c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d111      	bne.n	8003e54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d010      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	e007      	b.n	8003e64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40014000 	.word	0x40014000

08003e88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6a1a      	ldr	r2, [r3, #32]
 8003ea6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10f      	bne.n	8003ed0 <HAL_TIM_Base_Stop_IT+0x48>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a1a      	ldr	r2, [r3, #32]
 8003eb6:	f240 4344 	movw	r3, #1092	; 0x444
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d107      	bne.n	8003ed0 <HAL_TIM_Base_Stop_IT+0x48>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d122      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d11b      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0202 	mvn.w	r2, #2
 8003f12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f9b5 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 8003f2e:	e005      	b.n	8003f3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f9a7 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9b8 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d122      	bne.n	8003f96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d11b      	bne.n	8003f96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0204 	mvn.w	r2, #4
 8003f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f98b 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 8003f82:	e005      	b.n	8003f90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f97d 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f98e 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d122      	bne.n	8003fea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11b      	bne.n	8003fea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0208 	mvn.w	r2, #8
 8003fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f961 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 8003fd6:	e005      	b.n	8003fe4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f953 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f964 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d122      	bne.n	800403e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b10      	cmp	r3, #16
 8004004:	d11b      	bne.n	800403e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0210 	mvn.w	r2, #16
 800400e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2208      	movs	r2, #8
 8004014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f937 	bl	8004298 <HAL_TIM_IC_CaptureCallback>
 800402a:	e005      	b.n	8004038 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f929 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f93a 	bl	80042ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10e      	bne.n	800406a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f06f 0201 	mvn.w	r2, #1
 8004062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7fd f85f 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b80      	cmp	r3, #128	; 0x80
 8004076:	d10e      	bne.n	8004096 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d107      	bne.n	8004096 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800408e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fab1 	bl	80045f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d10e      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d107      	bne.n	80040c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f8ff 	bl	80042c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d10e      	bne.n	80040ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d107      	bne.n	80040ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0220 	mvn.w	r2, #32
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fa7b 	bl	80045e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_ConfigClockSource+0x1c>
 800410e:	2302      	movs	r3, #2
 8004110:	e0b4      	b.n	800427c <HAL_TIM_ConfigClockSource+0x186>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004130:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004138:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414a:	d03e      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0xd4>
 800414c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004150:	f200 8087 	bhi.w	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	f000 8086 	beq.w	8004268 <HAL_TIM_ConfigClockSource+0x172>
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004160:	d87f      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004162:	2b70      	cmp	r3, #112	; 0x70
 8004164:	d01a      	beq.n	800419c <HAL_TIM_ConfigClockSource+0xa6>
 8004166:	2b70      	cmp	r3, #112	; 0x70
 8004168:	d87b      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 800416a:	2b60      	cmp	r3, #96	; 0x60
 800416c:	d050      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0x11a>
 800416e:	2b60      	cmp	r3, #96	; 0x60
 8004170:	d877      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	2b50      	cmp	r3, #80	; 0x50
 8004174:	d03c      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0xfa>
 8004176:	2b50      	cmp	r3, #80	; 0x50
 8004178:	d873      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d058      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x13a>
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d86f      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004182:	2b30      	cmp	r3, #48	; 0x30
 8004184:	d064      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 8004186:	2b30      	cmp	r3, #48	; 0x30
 8004188:	d86b      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 800418a:	2b20      	cmp	r3, #32
 800418c:	d060      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 800418e:	2b20      	cmp	r3, #32
 8004190:	d867      	bhi.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d05c      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 8004196:	2b10      	cmp	r3, #16
 8004198:	d05a      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x15a>
 800419a:	e062      	b.n	8004262 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f000 f98c 	bl	80044c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
      break;
 80041c8:	e04f      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	6899      	ldr	r1, [r3, #8]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f000 f975 	bl	80044c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ec:	609a      	str	r2, [r3, #8]
      break;
 80041ee:	e03c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	461a      	mov	r2, r3
 80041fe:	f000 f8e9 	bl	80043d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2150      	movs	r1, #80	; 0x50
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f942 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 800420e:	e02c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	461a      	mov	r2, r3
 800421e:	f000 f908 	bl	8004432 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2160      	movs	r1, #96	; 0x60
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f932 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 800422e:	e01c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6818      	ldr	r0, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	461a      	mov	r2, r3
 800423e:	f000 f8c9 	bl	80043d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2140      	movs	r1, #64	; 0x40
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f922 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 800424e:	e00c      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f000 f919 	bl	8004492 <TIM_ITRx_SetConfig>
      break;
 8004260:	e003      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      break;
 8004266:	e000      	b.n	800426a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800427a:	7bfb      	ldrb	r3, [r7, #15]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a34      	ldr	r2, [pc, #208]	; (80043b8 <TIM_Base_SetConfig+0xe4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a31      	ldr	r2, [pc, #196]	; (80043bc <TIM_Base_SetConfig+0xe8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a30      	ldr	r2, [pc, #192]	; (80043c0 <TIM_Base_SetConfig+0xec>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <TIM_Base_SetConfig+0xf0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <TIM_Base_SetConfig+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01b      	beq.n	800435e <TIM_Base_SetConfig+0x8a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d017      	beq.n	800435e <TIM_Base_SetConfig+0x8a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a22      	ldr	r2, [pc, #136]	; (80043bc <TIM_Base_SetConfig+0xe8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <TIM_Base_SetConfig+0x8a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a21      	ldr	r2, [pc, #132]	; (80043c0 <TIM_Base_SetConfig+0xec>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00f      	beq.n	800435e <TIM_Base_SetConfig+0x8a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <TIM_Base_SetConfig+0xf0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <TIM_Base_SetConfig+0x8a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <TIM_Base_SetConfig+0xf4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d007      	beq.n	800435e <TIM_Base_SetConfig+0x8a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <TIM_Base_SetConfig+0xf8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_Base_SetConfig+0x8a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <TIM_Base_SetConfig+0xfc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <TIM_Base_SetConfig+0xe4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	615a      	str	r2, [r3, #20]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800

080043d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 030a 	bic.w	r3, r3, #10
 8004410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004432:	b480      	push	{r7}
 8004434:	b087      	sub	sp, #28
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0210 	bic.w	r2, r3, #16
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800446e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f043 0307 	orr.w	r3, r3, #7
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	609a      	str	r2, [r3, #8]
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800451c:	2302      	movs	r3, #2
 800451e:	e050      	b.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1c      	ldr	r2, [pc, #112]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d018      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d013      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a18      	ldr	r2, [pc, #96]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00e      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10c      	bne.n	80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40014000 	.word	0x40014000

080045e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e03f      	b.n	800469e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fd f820 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2224      	movs	r2, #36	; 0x24
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 ff9b 	bl	800558c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b08a      	sub	sp, #40	; 0x28
 80046aa:	af02      	add	r7, sp, #8
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d17c      	bne.n	80047c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_UART_Transmit+0x2c>
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e075      	b.n	80047c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_UART_Transmit+0x3e>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e06e      	b.n	80047c2 <HAL_UART_Transmit+0x11c>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2221      	movs	r2, #33	; 0x21
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fa:	f7fd fa01 	bl	8001b00 <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	88fa      	ldrh	r2, [r7, #6]
 800470a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004714:	d108      	bne.n	8004728 <HAL_UART_Transmit+0x82>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e003      	b.n	8004730 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004738:	e02a      	b.n	8004790 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2200      	movs	r2, #0
 8004742:	2180      	movs	r1, #128	; 0x80
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fc53 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e036      	b.n	80047c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10b      	bne.n	8004772 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004768:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	3302      	adds	r3, #2
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	e007      	b.n	8004782 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	3301      	adds	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1cf      	bne.n	800473a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2140      	movs	r1, #64	; 0x40
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fc23 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e006      	b.n	80047c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b08c      	sub	sp, #48	; 0x30
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	4613      	mov	r3, r2
 80047d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d152      	bne.n	800488a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e04b      	b.n	800488c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80047fe:	2302      	movs	r3, #2
 8004800:	e044      	b.n	800488c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	461a      	mov	r2, r3
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fc58 	bl	80050cc <UART_Start_Receive_DMA>
 800481c:	4603      	mov	r3, r0
 800481e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004826:	2b00      	cmp	r3, #0
 8004828:	d12c      	bne.n	8004884 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	2b01      	cmp	r3, #1
 8004830:	d125      	bne.n	800487e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004832:	2300      	movs	r3, #0
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	617b      	str	r3, [r7, #20]
   return(result);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f043 0310 	orr.w	r3, r3, #16
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004868:	627a      	str	r2, [r7, #36]	; 0x24
 800486a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6a39      	ldr	r1, [r7, #32]
 800486e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	61fb      	str	r3, [r7, #28]
   return(result);
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800487c:	e002      	b.n	8004884 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004888:	e000      	b.n	800488c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	3730      	adds	r7, #48	; 0x30
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b0ba      	sub	sp, #232	; 0xe8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10f      	bne.n	80048fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_UART_IRQHandler+0x66>
 80048e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fd8f 	bl	8005416 <UART_Receive_IT>
      return;
 80048f8:	e256      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80de 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x22c>
 8004904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004914:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80d1 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_UART_IRQHandler+0xae>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0201 	orr.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0xd2>
 800494e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_UART_IRQHandler+0xf6>
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f043 0204 	orr.w	r2, r3, #4
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d011      	beq.n	80049ba <HAL_UART_IRQHandler+0x126>
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d105      	bne.n	80049ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 81ed 	beq.w	8004d9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_UART_IRQHandler+0x14e>
 80049d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fd1a 	bl	8005416 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_UART_IRQHandler+0x17a>
 8004a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d04f      	beq.n	8004aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fc22 	bl	8005258 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d141      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1d9      	bne.n	8004a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d013      	beq.n	8004a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4a7d      	ldr	r2, [pc, #500]	; (8004c70 <HAL_UART_IRQHandler+0x3dc>)
 8004a7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd faf4 	bl	8002070 <HAL_DMA_Abort_IT>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00e      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9a4 	bl	8004dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e00a      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9a0 	bl	8004dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	e006      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f99c 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aba:	e170      	b.n	8004d9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	bf00      	nop
    return;
 8004abe:	e16e      	b.n	8004d9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 814a 	bne.w	8004d5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8143 	beq.w	8004d5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 813c 	beq.w	8004d5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	f040 80b4 	bne.w	8004c74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8140 	beq.w	8004da2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	f080 8139 	bcs.w	8004da2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	f000 8088 	beq.w	8004c56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1d9      	bne.n	8004b46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3314      	adds	r3, #20
 8004b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e1      	bne.n	8004b92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e3      	bne.n	8004bce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c26:	f023 0310 	bic.w	r3, r3, #16
 8004c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c38:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e3      	bne.n	8004c14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd f99d 	bl	8001f90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc fa28 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c6c:	e099      	b.n	8004da2 <HAL_UART_IRQHandler+0x50e>
 8004c6e:	bf00      	nop
 8004c70:	0800531f 	.word	0x0800531f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 808b 	beq.w	8004da6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8086 	beq.w	8004da6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cbe:	647a      	str	r2, [r7, #68]	; 0x44
 8004cc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3314      	adds	r3, #20
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3314      	adds	r3, #20
 8004cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e3      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0310 	bic.w	r3, r3, #16
 8004d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d3c:	61fa      	str	r2, [r7, #28]
 8004d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	617b      	str	r3, [r7, #20]
   return(result);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e3      	bne.n	8004d18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fc f9b0 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d5c:	e023      	b.n	8004da6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_UART_IRQHandler+0x4ea>
 8004d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fae5 	bl	8005346 <UART_Transmit_IT>
    return;
 8004d7c:	e014      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00e      	beq.n	8004da8 <HAL_UART_IRQHandler+0x514>
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fb25 	bl	80053e6 <UART_EndTransmit_IT>
    return;
 8004d9c:	e004      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
    return;
 8004d9e:	bf00      	nop
 8004da0:	e002      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
      return;
 8004da2:	bf00      	nop
 8004da4:	e000      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
      return;
 8004da6:	bf00      	nop
  }
}
 8004da8:	37e8      	adds	r7, #232	; 0xe8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop

08004db0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b09c      	sub	sp, #112	; 0x70
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d172      	bne.n	8004f02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	2200      	movs	r2, #0
 8004e20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2c:	e853 3f00 	ldrex	r3, [r3]
 8004e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e42:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3314      	adds	r3, #20
 8004e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3314      	adds	r3, #20
 8004e74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e76:	647a      	str	r2, [r7, #68]	; 0x44
 8004e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d119      	bne.n	8004f02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	330c      	adds	r3, #12
 8004ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0310 	bic.w	r3, r3, #16
 8004ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eee:	61fa      	str	r2, [r7, #28]
 8004ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	69b9      	ldr	r1, [r7, #24]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	617b      	str	r3, [r7, #20]
   return(result);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d106      	bne.n	8004f18 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f12:	f7fc f8d3 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f16:	e002      	b.n	8004f1e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f1a:	f7ff ff53 	bl	8004dc4 <HAL_UART_RxCpltCallback>
}
 8004f1e:	bf00      	nop
 8004f20:	3770      	adds	r7, #112	; 0x70
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d108      	bne.n	8004f4e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4619      	mov	r1, r3
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7fc f8b8 	bl	80010bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f4c:	e002      	b.n	8004f54 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff ff42 	bl	8004dd8 <HAL_UART_RxHalfCpltCallback>
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b80      	cmp	r3, #128	; 0x80
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b21      	cmp	r3, #33	; 0x21
 8004f8e:	d108      	bne.n	8004fa2 <UART_DMAError+0x46>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f9c:	68b8      	ldr	r0, [r7, #8]
 8004f9e:	f000 f933 	bl	8005208 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b22      	cmp	r3, #34	; 0x22
 8004fc2:	d108      	bne.n	8004fd6 <UART_DMAError+0x7a>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fd0:	68b8      	ldr	r0, [r7, #8]
 8004fd2:	f000 f941 	bl	8005258 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f043 0210 	orr.w	r2, r3, #16
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe2:	68b8      	ldr	r0, [r7, #8]
 8004fe4:	f7ff ff02 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b090      	sub	sp, #64	; 0x40
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005000:	e050      	b.n	80050a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d04c      	beq.n	80050a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0x30>
 8005010:	f7fc fd76 	bl	8001b00 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800501c:	429a      	cmp	r2, r3
 800501e:	d241      	bcs.n	80050a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	330c      	adds	r3, #12
 800503e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005040:	637a      	str	r2, [r7, #52]	; 0x34
 8005042:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e5      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3314      	adds	r3, #20
 800505a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3314      	adds	r3, #20
 8005072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005074:	623a      	str	r2, [r7, #32]
 8005076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	61bb      	str	r3, [r7, #24]
   return(result);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e5      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e00f      	b.n	80050c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d09f      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3740      	adds	r7, #64	; 0x40
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b098      	sub	sp, #96	; 0x60
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	88fa      	ldrh	r2, [r7, #6]
 80050e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2222      	movs	r2, #34	; 0x22
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	4a40      	ldr	r2, [pc, #256]	; (80051fc <UART_Start_Receive_DMA+0x130>)
 80050fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	4a3f      	ldr	r2, [pc, #252]	; (8005200 <UART_Start_Receive_DMA+0x134>)
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	4a3e      	ldr	r2, [pc, #248]	; (8005204 <UART_Start_Receive_DMA+0x138>)
 800510a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	2200      	movs	r2, #0
 8005112:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	f7fc fed8 	bl	8001ee0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d019      	beq.n	800518a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	330c      	adds	r3, #12
 800515c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	65bb      	str	r3, [r7, #88]	; 0x58
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005176:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005178:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800517c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e5      	bne.n	8005156 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3314      	adds	r3, #20
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	657b      	str	r3, [r7, #84]	; 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	617b      	str	r3, [r7, #20]
   return(result);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d4:	653b      	str	r3, [r7, #80]	; 0x50
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051de:	627a      	str	r2, [r7, #36]	; 0x24
 80051e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6a39      	ldr	r1, [r7, #32]
 80051e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3760      	adds	r7, #96	; 0x60
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	08004e01 	.word	0x08004e01
 8005200:	08004f27 	.word	0x08004f27
 8005204:	08004f5d 	.word	0x08004f5d

08005208 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b089      	sub	sp, #36	; 0x24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	330c      	adds	r3, #12
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	61ba      	str	r2, [r7, #24]
 8005232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6979      	ldr	r1, [r7, #20]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	613b      	str	r3, [r7, #16]
   return(result);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e5      	bne.n	8005210 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800524c:	bf00      	nop
 800524e:	3724      	adds	r7, #36	; 0x24
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b095      	sub	sp, #84	; 0x54
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005280:	643a      	str	r2, [r7, #64]	; 0x40
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3314      	adds	r3, #20
 800529a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e5      	bne.n	8005294 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d119      	bne.n	8005304 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	647b      	str	r3, [r7, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	330c      	adds	r3, #12
 80052ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052f0:	61ba      	str	r2, [r7, #24]
 80052f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6979      	ldr	r1, [r7, #20]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	613b      	str	r3, [r7, #16]
   return(result);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e5      	bne.n	80052d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005312:	bf00      	nop
 8005314:	3754      	adds	r7, #84	; 0x54
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff fd57 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b21      	cmp	r3, #33	; 0x21
 8005358:	d13e      	bne.n	80053d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005362:	d114      	bne.n	800538e <UART_Transmit_IT+0x48>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d110      	bne.n	800538e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005380:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	1c9a      	adds	r2, r3, #2
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]
 800538c:	e008      	b.n	80053a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6211      	str	r1, [r2, #32]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4619      	mov	r1, r3
 80053ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10f      	bne.n	80053d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fcd2 	bl	8004db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b08c      	sub	sp, #48	; 0x30
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b22      	cmp	r3, #34	; 0x22
 8005428:	f040 80ab 	bne.w	8005582 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d117      	bne.n	8005466 <UART_Receive_IT+0x50>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d113      	bne.n	8005466 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005454:	b29a      	uxth	r2, r3
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	1c9a      	adds	r2, r3, #2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28
 8005464:	e026      	b.n	80054b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d007      	beq.n	800548a <UART_Receive_IT+0x74>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <UART_Receive_IT+0x82>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e008      	b.n	80054aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29b      	uxth	r3, r3
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4619      	mov	r1, r3
 80054c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d15a      	bne.n	800557e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0220 	bic.w	r2, r2, #32
 80054d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	2b01      	cmp	r3, #1
 8005506:	d135      	bne.n	8005574 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	613b      	str	r3, [r7, #16]
   return(result);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f023 0310 	bic.w	r3, r3, #16
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	330c      	adds	r3, #12
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	623a      	str	r2, [r7, #32]
 8005530:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	69f9      	ldr	r1, [r7, #28]
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	61bb      	str	r3, [r7, #24]
   return(result);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e5      	bne.n	800550e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b10      	cmp	r3, #16
 800554e:	d10a      	bne.n	8005566 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fb fda5 	bl	80010bc <HAL_UARTEx_RxEventCallback>
 8005572:	e002      	b.n	800557a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fc25 	bl	8004dc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	e002      	b.n	8005584 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
  }
}
 8005584:	4618      	mov	r0, r3
 8005586:	3730      	adds	r7, #48	; 0x30
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005590:	b0c0      	sub	sp, #256	; 0x100
 8005592:	af00      	add	r7, sp, #0
 8005594:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	68d9      	ldr	r1, [r3, #12]
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	ea40 0301 	orr.w	r3, r0, r1
 80055b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055e4:	f021 010c 	bic.w	r1, r1, #12
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055f2:	430b      	orrs	r3, r1
 80055f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005606:	6999      	ldr	r1, [r3, #24]
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	ea40 0301 	orr.w	r3, r0, r1
 8005612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b8f      	ldr	r3, [pc, #572]	; (8005858 <UART_SetConfig+0x2cc>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d005      	beq.n	800562c <UART_SetConfig+0xa0>
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b8d      	ldr	r3, [pc, #564]	; (800585c <UART_SetConfig+0x2d0>)
 8005628:	429a      	cmp	r2, r3
 800562a:	d104      	bne.n	8005636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800562c:	f7fd fdbe 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8005630:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005634:	e003      	b.n	800563e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005636:	f7fd fda5 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 800563a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005648:	f040 810c 	bne.w	8005864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800564c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005650:	2200      	movs	r2, #0
 8005652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005656:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800565a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	1891      	adds	r1, r2, r2
 8005664:	65b9      	str	r1, [r7, #88]	; 0x58
 8005666:	415b      	adcs	r3, r3
 8005668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800566a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800566e:	4621      	mov	r1, r4
 8005670:	eb12 0801 	adds.w	r8, r2, r1
 8005674:	4629      	mov	r1, r5
 8005676:	eb43 0901 	adc.w	r9, r3, r1
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800568a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568e:	4690      	mov	r8, r2
 8005690:	4699      	mov	r9, r3
 8005692:	4623      	mov	r3, r4
 8005694:	eb18 0303 	adds.w	r3, r8, r3
 8005698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800569c:	462b      	mov	r3, r5
 800569e:	eb49 0303 	adc.w	r3, r9, r3
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056ba:	460b      	mov	r3, r1
 80056bc:	18db      	adds	r3, r3, r3
 80056be:	653b      	str	r3, [r7, #80]	; 0x50
 80056c0:	4613      	mov	r3, r2
 80056c2:	eb42 0303 	adc.w	r3, r2, r3
 80056c6:	657b      	str	r3, [r7, #84]	; 0x54
 80056c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056d0:	f7fa fdde 	bl	8000290 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4b61      	ldr	r3, [pc, #388]	; (8005860 <UART_SetConfig+0x2d4>)
 80056da:	fba3 2302 	umull	r2, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	011c      	lsls	r4, r3, #4
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80056fc:	415b      	adcs	r3, r3
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005704:	4641      	mov	r1, r8
 8005706:	eb12 0a01 	adds.w	sl, r2, r1
 800570a:	4649      	mov	r1, r9
 800570c:	eb43 0b01 	adc.w	fp, r3, r1
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800571c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005724:	4692      	mov	sl, r2
 8005726:	469b      	mov	fp, r3
 8005728:	4643      	mov	r3, r8
 800572a:	eb1a 0303 	adds.w	r3, sl, r3
 800572e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005732:	464b      	mov	r3, r9
 8005734:	eb4b 0303 	adc.w	r3, fp, r3
 8005738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005748:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800574c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005750:	460b      	mov	r3, r1
 8005752:	18db      	adds	r3, r3, r3
 8005754:	643b      	str	r3, [r7, #64]	; 0x40
 8005756:	4613      	mov	r3, r2
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	647b      	str	r3, [r7, #68]	; 0x44
 800575e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005766:	f7fa fd93 	bl	8000290 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4611      	mov	r1, r2
 8005770:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <UART_SetConfig+0x2d4>)
 8005772:	fba3 2301 	umull	r2, r3, r3, r1
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2264      	movs	r2, #100	; 0x64
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	1acb      	subs	r3, r1, r3
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <UART_SetConfig+0x2d4>)
 8005788:	fba3 2302 	umull	r2, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005794:	441c      	add	r4, r3
 8005796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80057b0:	415b      	adcs	r3, r3
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6339      	str	r1, [r7, #48]	; 0x30
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057ec:	464b      	mov	r3, r9
 80057ee:	460a      	mov	r2, r1
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005804:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800580c:	460b      	mov	r3, r1
 800580e:	18db      	adds	r3, r3, r3
 8005810:	62bb      	str	r3, [r7, #40]	; 0x28
 8005812:	4613      	mov	r3, r2
 8005814:	eb42 0303 	adc.w	r3, r2, r3
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800581a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800581e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005822:	f7fa fd35 	bl	8000290 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <UART_SetConfig+0x2d4>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	; 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	3332      	adds	r3, #50	; 0x32
 800583e:	4a08      	ldr	r2, [pc, #32]	; (8005860 <UART_SetConfig+0x2d4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 0207 	and.w	r2, r3, #7
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4422      	add	r2, r4
 8005852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005854:	e105      	b.n	8005a62 <UART_SetConfig+0x4d6>
 8005856:	bf00      	nop
 8005858:	40011000 	.word	0x40011000
 800585c:	40011400 	.word	0x40011400
 8005860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005868:	2200      	movs	r2, #0
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800586e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	1891      	adds	r1, r2, r2
 800587c:	6239      	str	r1, [r7, #32]
 800587e:	415b      	adcs	r3, r3
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
 8005882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005886:	4641      	mov	r1, r8
 8005888:	1854      	adds	r4, r2, r1
 800588a:	4649      	mov	r1, r9
 800588c:	eb43 0501 	adc.w	r5, r3, r1
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	00eb      	lsls	r3, r5, #3
 800589a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800589e:	00e2      	lsls	r2, r4, #3
 80058a0:	4614      	mov	r4, r2
 80058a2:	461d      	mov	r5, r3
 80058a4:	4643      	mov	r3, r8
 80058a6:	18e3      	adds	r3, r4, r3
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058ac:	464b      	mov	r3, r9
 80058ae:	eb45 0303 	adc.w	r3, r5, r3
 80058b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058d2:	4629      	mov	r1, r5
 80058d4:	008b      	lsls	r3, r1, #2
 80058d6:	4621      	mov	r1, r4
 80058d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058dc:	4621      	mov	r1, r4
 80058de:	008a      	lsls	r2, r1, #2
 80058e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058e4:	f7fa fcd4 	bl	8000290 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4b60      	ldr	r3, [pc, #384]	; (8005a70 <UART_SetConfig+0x4e4>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	011c      	lsls	r4, r3, #4
 80058f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005908:	4642      	mov	r2, r8
 800590a:	464b      	mov	r3, r9
 800590c:	1891      	adds	r1, r2, r2
 800590e:	61b9      	str	r1, [r7, #24]
 8005910:	415b      	adcs	r3, r3
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005918:	4641      	mov	r1, r8
 800591a:	1851      	adds	r1, r2, r1
 800591c:	6139      	str	r1, [r7, #16]
 800591e:	4649      	mov	r1, r9
 8005920:	414b      	adcs	r3, r1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005930:	4659      	mov	r1, fp
 8005932:	00cb      	lsls	r3, r1, #3
 8005934:	4651      	mov	r1, sl
 8005936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593a:	4651      	mov	r1, sl
 800593c:	00ca      	lsls	r2, r1, #3
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	4603      	mov	r3, r0
 8005944:	4642      	mov	r2, r8
 8005946:	189b      	adds	r3, r3, r2
 8005948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800594c:	464b      	mov	r3, r9
 800594e:	460a      	mov	r2, r1
 8005950:	eb42 0303 	adc.w	r3, r2, r3
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	67bb      	str	r3, [r7, #120]	; 0x78
 8005962:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005970:	4649      	mov	r1, r9
 8005972:	008b      	lsls	r3, r1, #2
 8005974:	4641      	mov	r1, r8
 8005976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597a:	4641      	mov	r1, r8
 800597c:	008a      	lsls	r2, r1, #2
 800597e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005982:	f7fa fc85 	bl	8000290 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <UART_SetConfig+0x4e4>)
 800598c:	fba3 1302 	umull	r1, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	2164      	movs	r1, #100	; 0x64
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3332      	adds	r3, #50	; 0x32
 800599e:	4a34      	ldr	r2, [pc, #208]	; (8005a70 <UART_SetConfig+0x4e4>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059aa:	441c      	add	r4, r3
 80059ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b0:	2200      	movs	r2, #0
 80059b2:	673b      	str	r3, [r7, #112]	; 0x70
 80059b4:	677a      	str	r2, [r7, #116]	; 0x74
 80059b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059ba:	4642      	mov	r2, r8
 80059bc:	464b      	mov	r3, r9
 80059be:	1891      	adds	r1, r2, r2
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	415b      	adcs	r3, r3
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059ca:	4641      	mov	r1, r8
 80059cc:	1851      	adds	r1, r2, r1
 80059ce:	6039      	str	r1, [r7, #0]
 80059d0:	4649      	mov	r1, r9
 80059d2:	414b      	adcs	r3, r1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059e2:	4659      	mov	r1, fp
 80059e4:	00cb      	lsls	r3, r1, #3
 80059e6:	4651      	mov	r1, sl
 80059e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ec:	4651      	mov	r1, sl
 80059ee:	00ca      	lsls	r2, r1, #3
 80059f0:	4610      	mov	r0, r2
 80059f2:	4619      	mov	r1, r3
 80059f4:	4603      	mov	r3, r0
 80059f6:	4642      	mov	r2, r8
 80059f8:	189b      	adds	r3, r3, r2
 80059fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80059fc:	464b      	mov	r3, r9
 80059fe:	460a      	mov	r2, r1
 8005a00:	eb42 0303 	adc.w	r3, r2, r3
 8005a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a10:	667a      	str	r2, [r7, #100]	; 0x64
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a1e:	4649      	mov	r1, r9
 8005a20:	008b      	lsls	r3, r1, #2
 8005a22:	4641      	mov	r1, r8
 8005a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a28:	4641      	mov	r1, r8
 8005a2a:	008a      	lsls	r2, r1, #2
 8005a2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a30:	f7fa fc2e 	bl	8000290 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <UART_SetConfig+0x4e4>)
 8005a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2164      	movs	r1, #100	; 0x64
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	3332      	adds	r3, #50	; 0x32
 8005a4c:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <UART_SetConfig+0x4e4>)
 8005a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f003 020f 	and.w	r2, r3, #15
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4422      	add	r2, r4
 8005a60:	609a      	str	r2, [r3, #8]
}
 8005a62:	bf00      	nop
 8005a64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6e:	bf00      	nop
 8005a70:	51eb851f 	.word	0x51eb851f

08005a74 <md5Init>:
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	ctx->size = (uint64_t)0;
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	e9c1 2300 	strd	r2, r3, [r1]

	ctx->buffer[0] = (uint32_t)A;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <md5Init+0x3c>)
 8005a8e:	609a      	str	r2, [r3, #8]
	ctx->buffer[1] = (uint32_t)B;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a08      	ldr	r2, [pc, #32]	; (8005ab4 <md5Init+0x40>)
 8005a94:	60da      	str	r2, [r3, #12]
	ctx->buffer[2] = (uint32_t)C;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <md5Init+0x44>)
 8005a9a:	611a      	str	r2, [r3, #16]
	ctx->buffer[3] = (uint32_t)D;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a07      	ldr	r2, [pc, #28]	; (8005abc <md5Init+0x48>)
 8005aa0:	615a      	str	r2, [r3, #20]
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	67452301 	.word	0x67452301
 8005ab4:	efcdab89 	.word	0xefcdab89
 8005ab8:	98badcfe 	.word	0x98badcfe
 8005abc:	10325476 	.word	0x10325476

08005ac0 <md5Update>:
 * Add some amount of input to the context
 *
 * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
 * and save the result in the buffer. Also updates the overall size.
 */
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
 8005ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ac4:	b098      	sub	sp, #96	; 0x60
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
	uint32_t input[16];
	unsigned int offset = ctx->size % 64;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ada:	65fb      	str	r3, [r7, #92]	; 0x5c
	ctx->size += (uint64_t)input_len;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	4605      	mov	r5, r0
 8005aea:	eb12 0804 	adds.w	r8, r2, r4
 8005aee:	eb43 0905 	adc.w	r9, r3, r5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	e9c3 8900 	strd	r8, r9, [r3]

	// Copy each byte in input_buffer into the next space in our context input
	for(unsigned int i = 0; i < input_len; ++i){
 8005af8:	2300      	movs	r3, #0
 8005afa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005afc:	e048      	b.n	8005b90 <md5Update+0xd0>
		ctx->input[offset++] = (uint8_t)*(input_buffer + i);
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b02:	441a      	add	r2, r3
 8005b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	65f9      	str	r1, [r7, #92]	; 0x5c
 8005b0a:	7811      	ldrb	r1, [r2, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	460a      	mov	r2, r1
 8005b12:	761a      	strb	r2, [r3, #24]

		// If we've filled our context input, copy it into our local array input
		// then reset the offset to 0 and fill in a new buffer.
		// Every time we fill out a chunk, we run it through the algorithm
		// to enable some back and forth between cpu and i/o
		if(offset % 64 == 0){
 8005b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d135      	bne.n	8005b8a <md5Update+0xca>
			for(unsigned int j = 0; j < 16; ++j){
 8005b1e:	2300      	movs	r3, #0
 8005b20:	657b      	str	r3, [r7, #84]	; 0x54
 8005b22:	e025      	b.n	8005b70 <md5Update+0xb0>
				// Convert to little-endian
				// The local variable `input` our 512-bit chunk separated into 32-bit words
				// we can use in calculations
				input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8005b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	3303      	adds	r3, #3
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	7e1b      	ldrb	r3, [r3, #24]
 8005b30:	061a      	lsls	r2, r3, #24
						   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8005b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	3302      	adds	r3, #2
 8005b38:	68f9      	ldr	r1, [r7, #12]
 8005b3a:	440b      	add	r3, r1
 8005b3c:	7e1b      	ldrb	r3, [r3, #24]
 8005b3e:	041b      	lsls	r3, r3, #16
				input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8005b40:	431a      	orrs	r2, r3
						   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8005b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	3301      	adds	r3, #1
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	440b      	add	r3, r1
 8005b4c:	7e1b      	ldrb	r3, [r3, #24]
 8005b4e:	021b      	lsls	r3, r3, #8
						   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8005b50:	4313      	orrs	r3, r2
						   (uint32_t)(ctx->input[(j * 4)]);
 8005b52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b54:	0092      	lsls	r2, r2, #2
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	440a      	add	r2, r1
 8005b5a:	7e12      	ldrb	r2, [r2, #24]
						   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8005b5c:	431a      	orrs	r2, r3
				input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	3360      	adds	r3, #96	; 0x60
 8005b64:	443b      	add	r3, r7
 8005b66:	f843 2c4c 	str.w	r2, [r3, #-76]
			for(unsigned int j = 0; j < 16; ++j){
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b72:	2b0f      	cmp	r3, #15
 8005b74:	d9d6      	bls.n	8005b24 <md5Update+0x64>
			}
			md5Step(ctx->buffer, input);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3308      	adds	r3, #8
 8005b7a:	f107 0214 	add.w	r2, r7, #20
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f8d1 	bl	8005d28 <md5Step>
			offset = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(unsigned int i = 0; i < input_len; ++i){
 8005b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d3b2      	bcc.n	8005afe <md5Update+0x3e>
		}
	}
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	3760      	adds	r7, #96	; 0x60
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005ba4 <md5Finalize>:

/*
 * Pad the current input to get to 448 bytes, append the size in bits to the very end,
 * and save the result of the final iteration into digest.
 */
void md5Finalize(MD5Context *ctx){
 8005ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ba8:	b096      	sub	sp, #88	; 0x58
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	uint32_t input[16];
	unsigned int offset = ctx->size % 64;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bba:	64fb      	str	r3, [r7, #76]	; 0x4c
	unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	2b37      	cmp	r3, #55	; 0x37
 8005bc0:	d803      	bhi.n	8005bca <md5Finalize+0x26>
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005bc8:	e002      	b.n	8005bd0 <md5Finalize+0x2c>
 8005bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bcc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005bd0:	64bb      	str	r3, [r7, #72]	; 0x48

	// Fill in the padding andndo the changes to size that resulted from the update
	md5Update(ctx, PADDING, padding_length);
 8005bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd4:	4953      	ldr	r1, [pc, #332]	; (8005d24 <md5Finalize+0x180>)
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff ff72 	bl	8005ac0 <md5Update>
	ctx->size -= (uint64_t)padding_length;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005be4:	2000      	movs	r0, #0
 8005be6:	460c      	mov	r4, r1
 8005be8:	4605      	mov	r5, r0
 8005bea:	ebb2 0804 	subs.w	r8, r2, r4
 8005bee:	eb63 0905 	sbc.w	r9, r3, r5
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	e9c3 8900 	strd	r8, r9, [r3]

	// Do a final update (internal to this function)
	// Last two 32-bit words are the two halves of the size (converted from bytes to bits)
	for(unsigned int j = 0; j < 14; ++j){
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8005bfc:	e025      	b.n	8005c4a <md5Finalize+0xa6>
		input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8005bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	3303      	adds	r3, #3
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	4413      	add	r3, r2
 8005c08:	7e1b      	ldrb	r3, [r3, #24]
 8005c0a:	061a      	lsls	r2, r3, #24
		           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	3302      	adds	r3, #2
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	440b      	add	r3, r1
 8005c16:	7e1b      	ldrb	r3, [r3, #24]
 8005c18:	041b      	lsls	r3, r3, #16
		input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8005c1a:	431a      	orrs	r2, r3
		           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8005c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	3301      	adds	r3, #1
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	440b      	add	r3, r1
 8005c26:	7e1b      	ldrb	r3, [r3, #24]
 8005c28:	021b      	lsls	r3, r3, #8
		           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8005c2a:	4313      	orrs	r3, r2
		           (uint32_t)(ctx->input[(j * 4)]);
 8005c2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c2e:	0092      	lsls	r2, r2, #2
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	440a      	add	r2, r1
 8005c34:	7e12      	ldrb	r2, [r2, #24]
		           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8005c36:	431a      	orrs	r2, r3
		input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8005c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	3358      	adds	r3, #88	; 0x58
 8005c3e:	443b      	add	r3, r7
 8005c40:	f843 2c50 	str.w	r2, [r3, #-80]
	for(unsigned int j = 0; j < 14; ++j){
 8005c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c46:	3301      	adds	r3, #1
 8005c48:	657b      	str	r3, [r7, #84]	; 0x54
 8005c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c4c:	2b0d      	cmp	r3, #13
 8005c4e:	d9d6      	bls.n	8005bfe <md5Finalize+0x5a>
	}
	input[14] = (uint32_t)(ctx->size * 8);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	643b      	str	r3, [r7, #64]	; 0x40
	input[15] = (uint32_t)((ctx->size * 8) >> 32);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	00cb      	lsls	r3, r1, #3
 8005c6c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005c70:	00c2      	lsls	r2, r0, #3
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	647b      	str	r3, [r7, #68]	; 0x44

	md5Step(ctx->buffer, input);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3308      	adds	r3, #8
 8005c86:	f107 0208 	add.w	r2, r7, #8
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f84b 	bl	8005d28 <md5Step>

	// Move the result into digest (convert from little-endian)
	for(unsigned int i = 0; i < 4; ++i){
 8005c92:	2300      	movs	r3, #0
 8005c94:	653b      	str	r3, [r7, #80]	; 0x50
 8005c96:	e03c      	b.n	8005d12 <md5Finalize+0x16e>
		ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c9c:	3202      	adds	r2, #2
 8005c9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	b2d1      	uxtb	r1, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	460a      	mov	r2, r1
 8005cae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cb6:	3202      	adds	r2, #2
 8005cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbc:	0a1a      	lsrs	r2, r3, #8
 8005cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	b2d1      	uxtb	r1, r2
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	460a      	mov	r2, r1
 8005ccc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cd4:	3202      	adds	r2, #2
 8005cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cda:	0c1a      	lsrs	r2, r3, #16
 8005cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	b2d1      	uxtb	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	460a      	mov	r2, r1
 8005cea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cf2:	3202      	adds	r2, #2
 8005cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf8:	0e1a      	lsrs	r2, r3, #24
 8005cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	3303      	adds	r3, #3
 8005d00:	b2d1      	uxtb	r1, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	4413      	add	r3, r2
 8005d06:	460a      	mov	r2, r1
 8005d08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	for(unsigned int i = 0; i < 4; ++i){
 8005d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0e:	3301      	adds	r3, #1
 8005d10:	653b      	str	r3, [r7, #80]	; 0x50
 8005d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d9bf      	bls.n	8005c98 <md5Finalize+0xf4>
	}
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	3758      	adds	r7, #88	; 0x58
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d24:	20000228 	.word	0x20000228

08005d28 <md5Step>:

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
	uint32_t AA = buffer[0];
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t BB = buffer[1];
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	623b      	str	r3, [r7, #32]
	uint32_t CC = buffer[2];
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	61fb      	str	r3, [r7, #28]
	uint32_t DD = buffer[3];
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	61bb      	str	r3, [r7, #24]

	uint32_t E;

	unsigned int j;

	for(unsigned int i = 0; i < 64; ++i){
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	e06b      	b.n	8005e28 <md5Step+0x100>
		switch(i / 16){
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d024      	beq.n	8005da2 <md5Step+0x7a>
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d831      	bhi.n	8005dc0 <md5Step+0x98>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <md5Step+0x3e>
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d00c      	beq.n	8005d7e <md5Step+0x56>
 8005d64:	e02c      	b.n	8005dc0 <md5Step+0x98>
			case 0:
				E = F(BB, CC, DD);
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	43d9      	mvns	r1, r3
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	400b      	ands	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
				j = i;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	613b      	str	r3, [r7, #16]
				break;
 8005d7c:	e02f      	b.n	8005dde <md5Step+0xb6>
			case 1:
				E = G(BB, CC, DD);
 8005d7e:	6a3a      	ldr	r2, [r7, #32]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	401a      	ands	r2, r3
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	43d9      	mvns	r1, r3
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	400b      	ands	r3, r1
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
				j = ((i * 5) + 1) % 16;
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	3301      	adds	r3, #1
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	613b      	str	r3, [r7, #16]
				break;
 8005da0:	e01d      	b.n	8005dde <md5Step+0xb6>
			case 2:
				E = H(BB, CC, DD);
 8005da2:	6a3a      	ldr	r2, [r7, #32]
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4053      	eors	r3, r2
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	4053      	eors	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
				j = ((i * 3) + 5) % 16;
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4613      	mov	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	3305      	adds	r3, #5
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	613b      	str	r3, [r7, #16]
				break;
 8005dbe:	e00e      	b.n	8005dde <md5Step+0xb6>
			default:
				E = I(BB, CC, DD);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	43da      	mvns	r2, r3
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	4053      	eors	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
				j = (i * 7) % 16;
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	613b      	str	r3, [r7, #16]
				break;
 8005ddc:	bf00      	nop
		}

		uint32_t temp = DD;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	60bb      	str	r3, [r7, #8]
		DD = CC;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	61bb      	str	r3, [r7, #24]
		CC = BB;
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	61fb      	str	r3, [r7, #28]
		BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
 8005dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	441a      	add	r2, r3
 8005df0:	4920      	ldr	r1, [pc, #128]	; (8005e74 <md5Step+0x14c>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005df8:	441a      	add	r2, r3
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	440b      	add	r3, r1
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	441a      	add	r2, r3
 8005e06:	491c      	ldr	r1, [pc, #112]	; (8005e78 <md5Step+0x150>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f000 f85e 	bl	8005ed2 <rotateLeft>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	623b      	str	r3, [r7, #32]
		AA = temp;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
	for(unsigned int i = 0; i < 64; ++i){
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b3f      	cmp	r3, #63	; 0x3f
 8005e2c:	d990      	bls.n	8005d50 <md5Step+0x28>
	}

	buffer[0] += AA;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
	buffer[1] += BB;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	6a3a      	ldr	r2, [r7, #32]
 8005e46:	440a      	add	r2, r1
 8005e48:	601a      	str	r2, [r3, #0]
	buffer[2] += CC;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3308      	adds	r3, #8
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]
	buffer[3] += DD;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	330c      	adds	r3, #12
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	440a      	add	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	3728      	adds	r7, #40	; 0x28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000128 	.word	0x20000128
 8005e78:	20000028 	.word	0x20000028

08005e7c <md5String>:

/*
 * Functions that will return a pointer to the hash of the provided input
 */
uint8_t* md5String(char *input){
 8005e7c:	b5b0      	push	{r4, r5, r7, lr}
 8005e7e:	b09e      	sub	sp, #120	; 0x78
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	MD5Context ctx;
	md5Init(&ctx);
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fdf3 	bl	8005a74 <md5Init>
	md5Update(&ctx, (uint8_t *)input, strlen(input));
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fa f9a6 	bl	80001e0 <strlen>
 8005e94:	4602      	mov	r2, r0
 8005e96:	f107 0308 	add.w	r3, r7, #8
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fe0f 	bl	8005ac0 <md5Update>
	md5Finalize(&ctx);
 8005ea2:	f107 0308 	add.w	r3, r7, #8
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fe7c 	bl	8005ba4 <md5Finalize>

	uint8_t *result = malloc(16);
 8005eac:	2010      	movs	r0, #16
 8005eae:	f001 fc0f 	bl	80076d0 <malloc>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	677b      	str	r3, [r7, #116]	; 0x74
	memcpy(result, ctx.digest, 16);
 8005eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb8:	461d      	mov	r5, r3
 8005eba:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8005ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ec0:	6028      	str	r0, [r5, #0]
 8005ec2:	6069      	str	r1, [r5, #4]
 8005ec4:	60aa      	str	r2, [r5, #8]
 8005ec6:	60eb      	str	r3, [r5, #12]
	return result;
 8005ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3778      	adds	r7, #120	; 0x78
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bdb0      	pop	{r4, r5, r7, pc}

08005ed2 <rotateLeft>:
}

/*
 * Rotates a 32-bit word left by n bits
 */
uint32_t rotateLeft(uint32_t x, uint32_t n){
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	6039      	str	r1, [r7, #0]
	return (x << n) | (x >> (32 - n));
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f1c3 0320 	rsb	r3, r3, #32
 8005ee4:	fa62 f303 	ror.w	r3, r2, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <rand_string>:


char *rand_string(char *str, size_t size)
{
 8005ef4:	b5b0      	push	{r4, r5, r7, lr}
 8005ef6:	b092      	sub	sp, #72	; 0x48
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXZ";
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <rand_string+0x8c>)
 8005f00:	f107 040c 	add.w	r4, r7, #12
 8005f04:	461d      	mov	r5, r3
 8005f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	6023      	str	r3, [r4, #0]
    if (size) {
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d02b      	beq.n	8005f74 <rand_string+0x80>
        --size;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	603b      	str	r3, [r7, #0]
        for (size_t n = 0; n < size; n++) {
 8005f22:	2300      	movs	r3, #0
 8005f24:	647b      	str	r3, [r7, #68]	; 0x44
 8005f26:	e01c      	b.n	8005f62 <rand_string+0x6e>
            int key = rand() % (int) (sizeof charset - 1);
 8005f28:	f001 fcd0 	bl	80078cc <rand>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4b15      	ldr	r3, [pc, #84]	; (8005f84 <rand_string+0x90>)
 8005f30:	fb83 1302 	smull	r1, r3, r3, r2
 8005f34:	4413      	add	r3, r2
 8005f36:	1159      	asrs	r1, r3, #5
 8005f38:	17d3      	asrs	r3, r2, #31
 8005f3a:	1ac9      	subs	r1, r1, r3
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	440b      	add	r3, r1
 8005f42:	0119      	lsls	r1, r3, #4
 8005f44:	440b      	add	r3, r1
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	643b      	str	r3, [r7, #64]	; 0x40
            str[n] = charset[key];
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4e:	4413      	add	r3, r2
 8005f50:	f107 010c 	add.w	r1, r7, #12
 8005f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f56:	440a      	add	r2, r1
 8005f58:	7812      	ldrb	r2, [r2, #0]
 8005f5a:	701a      	strb	r2, [r3, #0]
        for (size_t n = 0; n < size; n++) {
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5e:	3301      	adds	r3, #1
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
 8005f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d3de      	bcc.n	8005f28 <rand_string+0x34>
        }
        str[size] = '\0';
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	4413      	add	r3, r2
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
    }
    return str;
 8005f74:	687b      	ldr	r3, [r7, #4]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3748      	adds	r7, #72	; 0x48
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	08008c20 	.word	0x08008c20
 8005f84:	a0a0a0a1 	.word	0xa0a0a0a1

08005f88 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	461a      	mov	r2, r3
 8005f96:	4623      	mov	r3, r4
 8005f98:	71fb      	strb	r3, [r7, #7]
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	71bb      	strb	r3, [r7, #6]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	80bb      	strh	r3, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d902      	bls.n	8005fb2 <socket+0x2a>
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	e0f2      	b.n	8006198 <socket+0x210>
	switch(protocol)
 8005fb2:	79bb      	ldrb	r3, [r7, #6]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d005      	beq.n	8005fc4 <socket+0x3c>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	dd11      	ble.n	8005fe0 <socket+0x58>
 8005fbc:	3b02      	subs	r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d80e      	bhi.n	8005fe0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8005fc2:	e011      	b.n	8005fe8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	2204      	movs	r2, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005fd0:	f000 fc84 	bl	80068dc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <socket+0x5e>
 8005fda:	f06f 0302 	mvn.w	r3, #2
 8005fde:	e0db      	b.n	8006198 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8005fe0:	f06f 0304 	mvn.w	r3, #4
 8005fe4:	e0d8      	b.n	8006198 <socket+0x210>
	    break;
 8005fe6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <socket+0x70>
 8005ff2:	f06f 0305 	mvn.w	r3, #5
 8005ff6:	e0cf      	b.n	8006198 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d025      	beq.n	800604a <socket+0xc2>
	{
   	switch(protocol)
 8005ffe:	79bb      	ldrb	r3, [r7, #6]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d002      	beq.n	800600a <socket+0x82>
 8006004:	2b02      	cmp	r3, #2
 8006006:	d008      	beq.n	800601a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8006008:	e024      	b.n	8006054 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800600a:	78fb      	ldrb	r3, [r7, #3]
 800600c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006010:	2b00      	cmp	r3, #0
 8006012:	d11c      	bne.n	800604e <socket+0xc6>
 8006014:	f06f 0305 	mvn.w	r3, #5
 8006018:	e0be      	b.n	8006198 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	f003 0320 	and.w	r3, r3, #32
 8006020:	2b00      	cmp	r3, #0
 8006022:	d006      	beq.n	8006032 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8006024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006028:	2b00      	cmp	r3, #0
 800602a:	db02      	blt.n	8006032 <socket+0xaa>
 800602c:	f06f 0305 	mvn.w	r3, #5
 8006030:	e0b2      	b.n	8006198 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800603c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006040:	2b00      	cmp	r3, #0
 8006042:	db06      	blt.n	8006052 <socket+0xca>
 8006044:	f06f 0305 	mvn.w	r3, #5
 8006048:	e0a6      	b.n	8006198 <socket+0x210>
   	}
   }
 800604a:	bf00      	nop
 800604c:	e002      	b.n	8006054 <socket+0xcc>
   	      break;
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <socket+0xcc>
   	      break;
 8006052:	bf00      	nop
	close(sn);
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f8ac 	bl	80061b4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	3301      	adds	r3, #1
 8006062:	00db      	lsls	r3, r3, #3
 8006064:	4618      	mov	r0, r3
 8006066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800606a:	f023 030f 	bic.w	r3, r3, #15
 800606e:	b25a      	sxtb	r2, r3
 8006070:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006074:	4313      	orrs	r3, r2
 8006076:	b25b      	sxtb	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	4619      	mov	r1, r3
 800607c:	f000 fbe0 	bl	8006840 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8006080:	88bb      	ldrh	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d110      	bne.n	80060a8 <socket+0x120>
	{
	   port = sock_any_port++;
 8006086:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <socket+0x218>)
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	b291      	uxth	r1, r2
 800608e:	4a44      	ldr	r2, [pc, #272]	; (80061a0 <socket+0x218>)
 8006090:	8011      	strh	r1, [r2, #0]
 8006092:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8006094:	4b42      	ldr	r3, [pc, #264]	; (80061a0 <socket+0x218>)
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800609c:	4293      	cmp	r3, r2
 800609e:	d103      	bne.n	80060a8 <socket+0x120>
 80060a0:	4b3f      	ldr	r3, [pc, #252]	; (80061a0 <socket+0x218>)
 80060a2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80060a6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	3301      	adds	r3, #1
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b4:	461a      	mov	r2, r3
 80060b6:	88bb      	ldrh	r3, [r7, #4]
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f000 fbbd 	bl	8006840 <WIZCHIP_WRITE>
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	3301      	adds	r3, #1
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d2:	461a      	mov	r2, r3
 80060d4:	88bb      	ldrh	r3, [r7, #4]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	4619      	mov	r1, r3
 80060da:	4610      	mov	r0, r2
 80060dc:	f000 fbb0 	bl	8006840 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	3301      	adds	r3, #1
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80060ec:	2101      	movs	r1, #1
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fba6 	bl	8006840 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80060f4:	bf00      	nop
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	3301      	adds	r3, #1
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fb50 	bl	80067a8 <WIZCHIP_READ>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f3      	bne.n	80060f6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	2201      	movs	r2, #1
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	b21b      	sxth	r3, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	b21a      	sxth	r2, r3
 800611c:	4b21      	ldr	r3, [pc, #132]	; (80061a4 <socket+0x21c>)
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b21b      	sxth	r3, r3
 8006122:	4013      	ands	r3, r2
 8006124:	b21b      	sxth	r3, r3
 8006126:	b29a      	uxth	r2, r3
 8006128:	4b1e      	ldr	r3, [pc, #120]	; (80061a4 <socket+0x21c>)
 800612a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	f003 0201 	and.w	r2, r3, #1
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	b21a      	sxth	r2, r3
 800613a:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <socket+0x21c>)
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b21b      	sxth	r3, r3
 8006140:	4313      	orrs	r3, r2
 8006142:	b21b      	sxth	r3, r3
 8006144:	b29a      	uxth	r2, r3
 8006146:	4b17      	ldr	r3, [pc, #92]	; (80061a4 <socket+0x21c>)
 8006148:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	2201      	movs	r2, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	b21b      	sxth	r3, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	b21a      	sxth	r2, r3
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <socket+0x220>)
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b21b      	sxth	r3, r3
 800615e:	4013      	ands	r3, r2
 8006160:	b21b      	sxth	r3, r3
 8006162:	b29a      	uxth	r2, r3
 8006164:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <socket+0x220>)
 8006166:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	4a10      	ldr	r2, [pc, #64]	; (80061ac <socket+0x224>)
 800616c:	2100      	movs	r1, #0
 800616e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	4a0e      	ldr	r2, [pc, #56]	; (80061b0 <socket+0x228>)
 8006176:	2100      	movs	r1, #0
 8006178:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800617a:	bf00      	nop
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	3301      	adds	r3, #1
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fb0d 	bl	80067a8 <WIZCHIP_READ>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f3      	beq.n	800617c <socket+0x1f4>
   return (int8_t)sn;
 8006194:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	bd90      	pop	{r4, r7, pc}
 80061a0:	20000268 	.word	0x20000268
 80061a4:	200004c4 	.word	0x200004c4
 80061a8:	200004c6 	.word	0x200004c6
 80061ac:	200004c8 	.word	0x200004c8
 80061b0:	200004d8 	.word	0x200004d8

080061b4 <close>:

int8_t close(uint8_t sn)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d902      	bls.n	80061ca <close+0x16>
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295
 80061c8:	e055      	b.n	8006276 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	3301      	adds	r3, #1
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061d6:	2110      	movs	r1, #16
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fb31 	bl	8006840 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80061de:	bf00      	nop
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	3301      	adds	r3, #1
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fadb 	bl	80067a8 <WIZCHIP_READ>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f3      	bne.n	80061e0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	3301      	adds	r3, #1
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006204:	211f      	movs	r1, #31
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fb1a 	bl	8006840 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	2201      	movs	r2, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	b21b      	sxth	r3, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	b21a      	sxth	r2, r3
 800621a:	4b19      	ldr	r3, [pc, #100]	; (8006280 <close+0xcc>)
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b21b      	sxth	r3, r3
 8006220:	4013      	ands	r3, r2
 8006222:	b21b      	sxth	r3, r3
 8006224:	b29a      	uxth	r2, r3
 8006226:	4b16      	ldr	r3, [pc, #88]	; (8006280 <close+0xcc>)
 8006228:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	2201      	movs	r2, #1
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	b21b      	sxth	r3, r3
 8006234:	43db      	mvns	r3, r3
 8006236:	b21a      	sxth	r2, r3
 8006238:	4b12      	ldr	r3, [pc, #72]	; (8006284 <close+0xd0>)
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b21b      	sxth	r3, r3
 800623e:	4013      	ands	r3, r2
 8006240:	b21b      	sxth	r3, r3
 8006242:	b29a      	uxth	r2, r3
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <close+0xd0>)
 8006246:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	4a0f      	ldr	r2, [pc, #60]	; (8006288 <close+0xd4>)
 800624c:	2100      	movs	r1, #0
 800624e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	4a0d      	ldr	r2, [pc, #52]	; (800628c <close+0xd8>)
 8006256:	2100      	movs	r1, #0
 8006258:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800625a:	bf00      	nop
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	3301      	adds	r3, #1
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fa9d 	bl	80067a8 <WIZCHIP_READ>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f3      	bne.n	800625c <close+0xa8>
	return SOCK_OK;
 8006274:	2301      	movs	r3, #1
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200004c4 	.word	0x200004c4
 8006284:	200004c6 	.word	0x200004c6
 8006288:	200004c8 	.word	0x200004c8
 800628c:	200004d8 	.word	0x200004d8

08006290 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
 800629c:	4613      	mov	r3, r2
 800629e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d902      	bls.n	80062ac <connect+0x1c>
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	e0c6      	b.n	800643a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	3301      	adds	r3, #1
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fa77 	bl	80067a8 <WIZCHIP_READ>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d002      	beq.n	80062ca <connect+0x3a>
 80062c4:	f06f 0304 	mvn.w	r3, #4
 80062c8:	e0b7      	b.n	800643a <connect+0x1aa>
   CHECK_SOCKINIT();
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	3301      	adds	r3, #1
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fa66 	bl	80067a8 <WIZCHIP_READ>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b13      	cmp	r3, #19
 80062e0:	d002      	beq.n	80062e8 <connect+0x58>
 80062e2:	f06f 0302 	mvn.w	r3, #2
 80062e6:	e0a8      	b.n	800643a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	3201      	adds	r2, #1
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	4413      	add	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	3202      	adds	r2, #2
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	4413      	add	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	3203      	adds	r2, #3
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	4413      	add	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d002      	beq.n	8006326 <connect+0x96>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <connect+0x9c>
 8006326:	f06f 030b 	mvn.w	r3, #11
 800632a:	e086      	b.n	800643a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800632c:	88bb      	ldrh	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <connect+0xa8>
 8006332:	f06f 030a 	mvn.w	r3, #10
 8006336:	e080      	b.n	800643a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	3301      	adds	r3, #1
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006344:	2204      	movs	r2, #4
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fb27 	bl	800699c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800634e:	79fb      	ldrb	r3, [r7, #7]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	3301      	adds	r3, #1
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635a:	461a      	mov	r2, r3
 800635c:	88bb      	ldrh	r3, [r7, #4]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	b29b      	uxth	r3, r3
 8006362:	b2db      	uxtb	r3, r3
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f000 fa6a 	bl	8006840 <WIZCHIP_WRITE>
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	3301      	adds	r3, #1
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006378:	461a      	mov	r2, r3
 800637a:	88bb      	ldrh	r3, [r7, #4]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f000 fa5d 	bl	8006840 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	3301      	adds	r3, #1
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006392:	2104      	movs	r1, #4
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fa53 	bl	8006840 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800639a:	bf00      	nop
 800639c:	79fb      	ldrb	r3, [r7, #7]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	3301      	adds	r3, #1
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 f9fd 	bl	80067a8 <WIZCHIP_READ>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f3      	bne.n	800639c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80063b4:	4b23      	ldr	r3, [pc, #140]	; (8006444 <connect+0x1b4>)
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	fa42 f303 	asr.w	r3, r2, r3
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02b      	beq.n	8006420 <connect+0x190>
 80063c8:	2300      	movs	r3, #0
 80063ca:	e036      	b.n	800643a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	3301      	adds	r3, #1
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 f9e5 	bl	80067a8 <WIZCHIP_READ>
 80063de:	4603      	mov	r3, r0
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00c      	beq.n	8006402 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	3301      	adds	r3, #1
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80063f4:	2108      	movs	r1, #8
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fa22 	bl	8006840 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80063fc:	f06f 030c 	mvn.w	r3, #12
 8006400:	e01b      	b.n	800643a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3301      	adds	r3, #1
 8006408:	00db      	lsls	r3, r3, #3
 800640a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f9ca 	bl	80067a8 <WIZCHIP_READ>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d102      	bne.n	8006420 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800641a:	f06f 0303 	mvn.w	r3, #3
 800641e:	e00c      	b.n	800643a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	3301      	adds	r3, #1
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800642c:	4618      	mov	r0, r3
 800642e:	f000 f9bb 	bl	80067a8 <WIZCHIP_READ>
 8006432:	4603      	mov	r3, r0
 8006434:	2b17      	cmp	r3, #23
 8006436:	d1c9      	bne.n	80063cc <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8006438:	2301      	movs	r3, #1
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200004c4 	.word	0x200004c4

08006448 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	6039      	str	r1, [r7, #0]
 8006452:	71fb      	strb	r3, [r7, #7]
 8006454:	4613      	mov	r3, r2
 8006456:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800645c:	2300      	movs	r3, #0
 800645e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	2b08      	cmp	r3, #8
 8006464:	d902      	bls.n	800646c <send+0x24>
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	e0de      	b.n	800662a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	3301      	adds	r3, #1
 8006472:	00db      	lsls	r3, r3, #3
 8006474:	4618      	mov	r0, r3
 8006476:	f000 f997 	bl	80067a8 <WIZCHIP_READ>
 800647a:	4603      	mov	r3, r0
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	2b01      	cmp	r3, #1
 8006482:	d002      	beq.n	800648a <send+0x42>
 8006484:	f06f 0304 	mvn.w	r3, #4
 8006488:	e0cf      	b.n	800662a <send+0x1e2>
   CHECK_SOCKDATA();
 800648a:	88bb      	ldrh	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d102      	bne.n	8006496 <send+0x4e>
 8006490:	f06f 030d 	mvn.w	r3, #13
 8006494:	e0c9      	b.n	800662a <send+0x1e2>
   tmp = getSn_SR(sn);
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	3301      	adds	r3, #1
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f980 	bl	80067a8 <WIZCHIP_READ>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	2b17      	cmp	r3, #23
 80064b0:	d005      	beq.n	80064be <send+0x76>
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b1c      	cmp	r3, #28
 80064b6:	d002      	beq.n	80064be <send+0x76>
 80064b8:	f06f 0306 	mvn.w	r3, #6
 80064bc:	e0b5      	b.n	800662a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 80064be:	4b5d      	ldr	r3, [pc, #372]	; (8006634 <send+0x1ec>)
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	fa42 f303 	asr.w	r3, r2, r3
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d039      	beq.n	8006546 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	3301      	adds	r3, #1
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f962 	bl	80067a8 <WIZCHIP_READ>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d019      	beq.n	800652a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	3301      	adds	r3, #1
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006502:	2110      	movs	r1, #16
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f99b 	bl	8006840 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	2201      	movs	r2, #1
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	b21b      	sxth	r3, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	b21a      	sxth	r2, r3
 8006518:	4b46      	ldr	r3, [pc, #280]	; (8006634 <send+0x1ec>)
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b21b      	sxth	r3, r3
 800651e:	4013      	ands	r3, r2
 8006520:	b21b      	sxth	r3, r3
 8006522:	b29a      	uxth	r2, r3
 8006524:	4b43      	ldr	r3, [pc, #268]	; (8006634 <send+0x1ec>)
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e00d      	b.n	8006546 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <send+0xfa>
      {
         close(sn);
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fe3c 	bl	80061b4 <close>
         return SOCKERR_TIMEOUT;
 800653c:	f06f 030c 	mvn.w	r3, #12
 8006540:	e073      	b.n	800662a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8006542:	2300      	movs	r3, #0
 8006544:	e071      	b.n	800662a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3301      	adds	r3, #1
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8006552:	4618      	mov	r0, r3
 8006554:	f000 f928 	bl	80067a8 <WIZCHIP_READ>
 8006558:	4603      	mov	r3, r0
 800655a:	b29b      	uxth	r3, r3
 800655c:	029b      	lsls	r3, r3, #10
 800655e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8006560:	88ba      	ldrh	r2, [r7, #4]
 8006562:	89bb      	ldrh	r3, [r7, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d901      	bls.n	800656c <send+0x124>
 8006568:	89bb      	ldrh	r3, [r7, #12]
 800656a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fa74 	bl	8006a5c <getSn_TX_FSR>
 8006574:	4603      	mov	r3, r0
 8006576:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	3301      	adds	r3, #1
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006584:	4618      	mov	r0, r3
 8006586:	f000 f90f 	bl	80067a8 <WIZCHIP_READ>
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	2b17      	cmp	r3, #23
 8006592:	d009      	beq.n	80065a8 <send+0x160>
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b1c      	cmp	r3, #28
 8006598:	d006      	beq.n	80065a8 <send+0x160>
      {
         close(sn);
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	4618      	mov	r0, r3
 800659e:	f7ff fe09 	bl	80061b4 <close>
         return SOCKERR_SOCKSTATUS;
 80065a2:	f06f 0306 	mvn.w	r3, #6
 80065a6:	e040      	b.n	800662a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80065a8:	4b23      	ldr	r3, [pc, #140]	; (8006638 <send+0x1f0>)
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	fa42 f303 	asr.w	r3, r2, r3
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <send+0x180>
 80065bc:	88ba      	ldrh	r2, [r7, #4]
 80065be:	89bb      	ldrh	r3, [r7, #12]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d901      	bls.n	80065c8 <send+0x180>
 80065c4:	2300      	movs	r3, #0
 80065c6:	e030      	b.n	800662a <send+0x1e2>
      if(len <= freesize) break;
 80065c8:	88ba      	ldrh	r2, [r7, #4]
 80065ca:	89bb      	ldrh	r3, [r7, #12]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d900      	bls.n	80065d2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80065d0:	e7cc      	b.n	800656c <send+0x124>
      if(len <= freesize) break;
 80065d2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80065d4:	88ba      	ldrh	r2, [r7, #4]
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fad4 	bl	8006b88 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	3301      	adds	r3, #1
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80065ec:	2120      	movs	r1, #32
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 f926 	bl	8006840 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80065f4:	bf00      	nop
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	3301      	adds	r3, #1
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f8d0 	bl	80067a8 <WIZCHIP_READ>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f3      	bne.n	80065f6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2201      	movs	r2, #1
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	b21a      	sxth	r2, r3
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <send+0x1ec>)
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b21b      	sxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b21b      	sxth	r3, r3
 8006622:	b29a      	uxth	r2, r3
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <send+0x1ec>)
 8006626:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006628:	88bb      	ldrh	r3, [r7, #4]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200004c6 	.word	0x200004c6
 8006638:	200004c4 	.word	0x200004c4

0800663c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	6039      	str	r1, [r7, #0]
 8006646:	71fb      	strb	r3, [r7, #7]
 8006648:	4613      	mov	r3, r2
 800664a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	2b08      	cmp	r3, #8
 8006658:	d902      	bls.n	8006660 <recv+0x24>
 800665a:	f04f 33ff 	mov.w	r3, #4294967295
 800665e:	e09c      	b.n	800679a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	3301      	adds	r3, #1
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f89d 	bl	80067a8 <WIZCHIP_READ>
 800666e:	4603      	mov	r3, r0
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	2b01      	cmp	r3, #1
 8006676:	d002      	beq.n	800667e <recv+0x42>
 8006678:	f06f 0304 	mvn.w	r3, #4
 800667c:	e08d      	b.n	800679a <recv+0x15e>
   CHECK_SOCKDATA();
 800667e:	88bb      	ldrh	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <recv+0x4e>
 8006684:	f06f 030d 	mvn.w	r3, #13
 8006688:	e087      	b.n	800679a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	3301      	adds	r3, #1
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f886 	bl	80067a8 <WIZCHIP_READ>
 800669c:	4603      	mov	r3, r0
 800669e:	b29b      	uxth	r3, r3
 80066a0:	029b      	lsls	r3, r3, #10
 80066a2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80066a4:	89ba      	ldrh	r2, [r7, #12]
 80066a6:	88bb      	ldrh	r3, [r7, #4]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d201      	bcs.n	80066b0 <recv+0x74>
 80066ac:	89bb      	ldrh	r3, [r7, #12]
 80066ae:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fa1d 	bl	8006af2 <getSn_RX_RSR>
 80066b8:	4603      	mov	r3, r0
 80066ba:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	3301      	adds	r3, #1
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 f86d 	bl	80067a8 <WIZCHIP_READ>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b17      	cmp	r3, #23
 80066d6:	d026      	beq.n	8006726 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b1c      	cmp	r3, #28
 80066dc:	d11c      	bne.n	8006718 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80066de:	89bb      	ldrh	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d133      	bne.n	800674c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 f9b8 	bl	8006a5c <getSn_TX_FSR>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461c      	mov	r4, r3
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	3301      	adds	r3, #1
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f853 	bl	80067a8 <WIZCHIP_READ>
 8006702:	4603      	mov	r3, r0
 8006704:	029b      	lsls	r3, r3, #10
 8006706:	429c      	cmp	r4, r3
 8006708:	d10d      	bne.n	8006726 <recv+0xea>
               {
                  close(sn);
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fd51 	bl	80061b4 <close>
                  return SOCKERR_SOCKSTATUS;
 8006712:	f06f 0306 	mvn.w	r3, #6
 8006716:	e040      	b.n	800679a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fd4a 	bl	80061b4 <close>
               return SOCKERR_SOCKSTATUS;
 8006720:	f06f 0306 	mvn.w	r3, #6
 8006724:	e039      	b.n	800679a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8006726:	4b1f      	ldr	r3, [pc, #124]	; (80067a4 <recv+0x168>)
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	fa42 f303 	asr.w	r3, r2, r3
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <recv+0x108>
 800673a:	89bb      	ldrh	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <recv+0x108>
 8006740:	2300      	movs	r3, #0
 8006742:	e02a      	b.n	800679a <recv+0x15e>
         if(recvsize != 0) break;
 8006744:	89bb      	ldrh	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800674a:	e7b1      	b.n	80066b0 <recv+0x74>
               if(recvsize != 0) break;
 800674c:	bf00      	nop
 800674e:	e000      	b.n	8006752 <recv+0x116>
         if(recvsize != 0) break;
 8006750:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8006752:	89ba      	ldrh	r2, [r7, #12]
 8006754:	88bb      	ldrh	r3, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d201      	bcs.n	800675e <recv+0x122>
 800675a:	89bb      	ldrh	r3, [r7, #12]
 800675c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800675e:	88ba      	ldrh	r2, [r7, #4]
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fa6b 	bl	8006c40 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	3301      	adds	r3, #1
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006776:	2140      	movs	r1, #64	; 0x40
 8006778:	4618      	mov	r0, r3
 800677a:	f000 f861 	bl	8006840 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800677e:	bf00      	nop
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	3301      	adds	r3, #1
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800678c:	4618      	mov	r0, r3
 800678e:	f000 f80b 	bl	80067a8 <WIZCHIP_READ>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f3      	bne.n	8006780 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006798:	88bb      	ldrh	r3, [r7, #4]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200004c4 	.word	0x200004c4

080067a8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80067b0:	4b22      	ldr	r3, [pc, #136]	; (800683c <WIZCHIP_READ+0x94>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80067b6:	4b21      	ldr	r3, [pc, #132]	; (800683c <WIZCHIP_READ+0x94>)
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80067bc:	4b1f      	ldr	r3, [pc, #124]	; (800683c <WIZCHIP_READ+0x94>)
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <WIZCHIP_READ+0x24>
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <WIZCHIP_READ+0x94>)
 80067c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d114      	bne.n	80067f6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80067cc:	4b1b      	ldr	r3, [pc, #108]	; (800683c <WIZCHIP_READ+0x94>)
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	0c12      	lsrs	r2, r2, #16
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	4610      	mov	r0, r2
 80067d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80067da:	4b18      	ldr	r3, [pc, #96]	; (800683c <WIZCHIP_READ+0x94>)
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	0a12      	lsrs	r2, r2, #8
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80067e8:	4b14      	ldr	r3, [pc, #80]	; (800683c <WIZCHIP_READ+0x94>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	4610      	mov	r0, r2
 80067f2:	4798      	blx	r3
 80067f4:	e011      	b.n	800681a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	0a1b      	lsrs	r3, r3, #8
 8006802:	b2db      	uxtb	r3, r3
 8006804:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <WIZCHIP_READ+0x94>)
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	f107 020c 	add.w	r2, r7, #12
 8006814:	2103      	movs	r1, #3
 8006816:	4610      	mov	r0, r2
 8006818:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <WIZCHIP_READ+0x94>)
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <WIZCHIP_READ+0x94>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800682a:	4b04      	ldr	r3, [pc, #16]	; (800683c <WIZCHIP_READ+0x94>)
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	4798      	blx	r3
   return ret;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000026c 	.word	0x2000026c

08006840 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800684c:	4b22      	ldr	r3, [pc, #136]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006852:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f043 0304 	orr.w	r3, r3, #4
 800685e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006860:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d119      	bne.n	800689c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	0c12      	lsrs	r2, r2, #16
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	4610      	mov	r0, r2
 8006874:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006876:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	0a12      	lsrs	r2, r2, #8
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006884:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	78fa      	ldrb	r2, [r7, #3]
 8006896:	4610      	mov	r0, r2
 8006898:	4798      	blx	r3
 800689a:	e013      	b.n	80068c4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	f107 020c 	add.w	r2, r7, #12
 80068be:	2104      	movs	r1, #4
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80068ca:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <WIZCHIP_WRITE+0x98>)
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	4798      	blx	r3
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	2000026c 	.word	0x2000026c

080068dc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80068ea:	4b2b      	ldr	r3, [pc, #172]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	4798      	blx	r3
   WIZCHIP.CS._select();
 80068f0:	4b29      	ldr	r3, [pc, #164]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80068f6:	4b28      	ldr	r3, [pc, #160]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <WIZCHIP_READ_BUF+0x2a>
 80068fe:	4b26      	ldr	r3, [pc, #152]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	2b00      	cmp	r3, #0
 8006904:	d126      	bne.n	8006954 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	0c12      	lsrs	r2, r2, #16
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006914:	4b20      	ldr	r3, [pc, #128]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	0a12      	lsrs	r2, r2, #8
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	4610      	mov	r0, r2
 8006920:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006922:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	4610      	mov	r0, r2
 800692c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	82fb      	strh	r3, [r7, #22]
 8006932:	e00a      	b.n	800694a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8006934:	4b18      	ldr	r3, [pc, #96]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	8afa      	ldrh	r2, [r7, #22]
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	188c      	adds	r4, r1, r2
 800693e:	4798      	blx	r3
 8006940:	4603      	mov	r3, r0
 8006942:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8006944:	8afb      	ldrh	r3, [r7, #22]
 8006946:	3301      	adds	r3, #1
 8006948:	82fb      	strh	r3, [r7, #22]
 800694a:	8afa      	ldrh	r2, [r7, #22]
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	429a      	cmp	r2, r3
 8006950:	d3f0      	bcc.n	8006934 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006952:	e017      	b.n	8006984 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	b2db      	uxtb	r3, r3
 800695a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	b2db      	uxtb	r3, r3
 8006962:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 800696c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696e:	f107 0210 	add.w	r2, r7, #16
 8006972:	2103      	movs	r1, #3
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	88fa      	ldrh	r2, [r7, #6]
 800697e:	4611      	mov	r1, r2
 8006980:	68b8      	ldr	r0, [r7, #8]
 8006982:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800698a:	4b03      	ldr	r3, [pc, #12]	; (8006998 <WIZCHIP_READ_BUF+0xbc>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	4798      	blx	r3
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	bd90      	pop	{r4, r7, pc}
 8006998:	2000026c 	.word	0x2000026c

0800699c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80069aa:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	4798      	blx	r3
   WIZCHIP.CS._select();
 80069b0:	4b29      	ldr	r3, [pc, #164]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f043 0304 	orr.w	r3, r3, #4
 80069bc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80069be:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d126      	bne.n	8006a14 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80069c6:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	0c12      	lsrs	r2, r2, #16
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80069d4:	4b20      	ldr	r3, [pc, #128]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	0a12      	lsrs	r2, r2, #8
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	4610      	mov	r0, r2
 80069e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80069e2:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	b2d2      	uxtb	r2, r2
 80069ea:	4610      	mov	r0, r2
 80069ec:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80069ee:	2300      	movs	r3, #0
 80069f0:	82fb      	strh	r3, [r7, #22]
 80069f2:	e00a      	b.n	8006a0a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80069f4:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	8afa      	ldrh	r2, [r7, #22]
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	440a      	add	r2, r1
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006a04:	8afb      	ldrh	r3, [r7, #22]
 8006a06:	3301      	adds	r3, #1
 8006a08:	82fb      	strh	r3, [r7, #22]
 8006a0a:	8afa      	ldrh	r2, [r7, #22]
 8006a0c:	88fb      	ldrh	r3, [r7, #6]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d3f0      	bcc.n	80069f4 <WIZCHIP_WRITE_BUF+0x58>
 8006a12:	e017      	b.n	8006a44 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	0c1b      	lsrs	r3, r3, #16
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	f107 0210 	add.w	r2, r7, #16
 8006a32:	2103      	movs	r1, #3
 8006a34:	4610      	mov	r0, r2
 8006a36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8006a38:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	88fa      	ldrh	r2, [r7, #6]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	68b8      	ldr	r0, [r7, #8]
 8006a42:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006a44:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006a4a:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <WIZCHIP_WRITE_BUF+0xbc>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	4798      	blx	r3
}
 8006a50:	bf00      	nop
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	2000026c 	.word	0x2000026c

08006a5c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	81fb      	strh	r3, [r7, #14]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	3301      	adds	r3, #1
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fe94 	bl	80067a8 <WIZCHIP_READ>
 8006a80:	4603      	mov	r3, r0
 8006a82:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8006a84:	89bb      	ldrh	r3, [r7, #12]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	b29c      	uxth	r4, r3
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	3301      	adds	r3, #1
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fe86 	bl	80067a8 <WIZCHIP_READ>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	4423      	add	r3, r4
 8006aa2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8006aa4:	89bb      	ldrh	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01a      	beq.n	8006ae0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	3301      	adds	r3, #1
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fe76 	bl	80067a8 <WIZCHIP_READ>
 8006abc:	4603      	mov	r3, r0
 8006abe:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8006ac0:	89fb      	ldrh	r3, [r7, #14]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	b29c      	uxth	r4, r3
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	3301      	adds	r3, #1
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fe68 	bl	80067a8 <WIZCHIP_READ>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	4423      	add	r3, r4
 8006ade:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8006ae0:	89fa      	ldrh	r2, [r7, #14]
 8006ae2:	89bb      	ldrh	r3, [r7, #12]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d1c2      	bne.n	8006a6e <getSn_TX_FSR+0x12>
   return val;
 8006ae8:	89fb      	ldrh	r3, [r7, #14]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd90      	pop	{r4, r7, pc}

08006af2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8006af2:	b590      	push	{r4, r7, lr}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	4603      	mov	r3, r0
 8006afa:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	81fb      	strh	r3, [r7, #14]
 8006b00:	2300      	movs	r3, #0
 8006b02:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	3301      	adds	r3, #1
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fe49 	bl	80067a8 <WIZCHIP_READ>
 8006b16:	4603      	mov	r3, r0
 8006b18:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006b1a:	89bb      	ldrh	r3, [r7, #12]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	b29c      	uxth	r4, r3
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	3301      	adds	r3, #1
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7ff fe3b 	bl	80067a8 <WIZCHIP_READ>
 8006b32:	4603      	mov	r3, r0
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	4423      	add	r3, r4
 8006b38:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8006b3a:	89bb      	ldrh	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01a      	beq.n	8006b76 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	3301      	adds	r3, #1
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fe2b 	bl	80067a8 <WIZCHIP_READ>
 8006b52:	4603      	mov	r3, r0
 8006b54:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8006b56:	89fb      	ldrh	r3, [r7, #14]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	b29c      	uxth	r4, r3
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	3301      	adds	r3, #1
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fe1d 	bl	80067a8 <WIZCHIP_READ>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4423      	add	r3, r4
 8006b74:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8006b76:	89fa      	ldrh	r2, [r7, #14]
 8006b78:	89bb      	ldrh	r3, [r7, #12]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1c2      	bne.n	8006b04 <getSn_RX_RSR+0x12>
   return val;
 8006b7e:	89fb      	ldrh	r3, [r7, #14]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd90      	pop	{r4, r7, pc}

08006b88 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8006b88:	b590      	push	{r4, r7, lr}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
 8006b94:	4613      	mov	r3, r2
 8006b96:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8006ba0:	88bb      	ldrh	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d048      	beq.n	8006c38 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	3301      	adds	r3, #1
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff fdf8 	bl	80067a8 <WIZCHIP_READ>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	b29c      	uxth	r4, r3
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fdeb 	bl	80067a8 <WIZCHIP_READ>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4423      	add	r3, r4
 8006bd8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8006bda:	89fb      	ldrh	r3, [r7, #14]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	79fa      	ldrb	r2, [r7, #7]
 8006be0:	0092      	lsls	r2, r2, #2
 8006be2:	3202      	adds	r2, #2
 8006be4:	00d2      	lsls	r2, r2, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8006bea:	88bb      	ldrh	r3, [r7, #4]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	68b8      	ldr	r0, [r7, #8]
 8006bf2:	f7ff fed3 	bl	800699c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8006bf6:	89fa      	ldrh	r2, [r7, #14]
 8006bf8:	88bb      	ldrh	r3, [r7, #4]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	3301      	adds	r3, #1
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	89fb      	ldrh	r3, [r7, #14]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	4619      	mov	r1, r3
 8006c16:	4610      	mov	r0, r2
 8006c18:	f7ff fe12 	bl	8006840 <WIZCHIP_WRITE>
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	3301      	adds	r3, #1
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8006c28:	461a      	mov	r2, r3
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f7ff fe05 	bl	8006840 <WIZCHIP_WRITE>
 8006c36:	e000      	b.n	8006c3a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8006c38:	bf00      	nop
}
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd90      	pop	{r4, r7, pc}

08006c40 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8006c40:	b590      	push	{r4, r7, lr}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	6039      	str	r1, [r7, #0]
 8006c4a:	71fb      	strb	r3, [r7, #7]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8006c58:	88bb      	ldrh	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d048      	beq.n	8006cf0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	3301      	adds	r3, #1
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fd9c 	bl	80067a8 <WIZCHIP_READ>
 8006c70:	4603      	mov	r3, r0
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	b29c      	uxth	r4, r3
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fd8f 	bl	80067a8 <WIZCHIP_READ>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	4423      	add	r3, r4
 8006c90:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8006c92:	89fb      	ldrh	r3, [r7, #14]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	79fa      	ldrb	r2, [r7, #7]
 8006c98:	0092      	lsls	r2, r2, #2
 8006c9a:	3203      	adds	r2, #3
 8006c9c:	00d2      	lsls	r2, r2, #3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8006ca2:	88bb      	ldrh	r3, [r7, #4]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	68b8      	ldr	r0, [r7, #8]
 8006caa:	f7ff fe17 	bl	80068dc <WIZCHIP_READ_BUF>
   ptr += len;
 8006cae:	89fa      	ldrh	r2, [r7, #14]
 8006cb0:	88bb      	ldrh	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	3301      	adds	r3, #1
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	89fb      	ldrh	r3, [r7, #14]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f7ff fdb6 	bl	8006840 <WIZCHIP_WRITE>
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	3301      	adds	r3, #1
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	89fb      	ldrh	r3, [r7, #14]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7ff fda9 	bl	8006840 <WIZCHIP_WRITE>
 8006cee:	e000      	b.n	8006cf2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8006cf0:	bf00      	nop
}
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd90      	pop	{r4, r7, pc}

08006cf8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8006d06:	b480      	push	{r7}
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	bf00      	nop
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8006d22:	b480      	push	{r7}
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	bf00      	nop
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	78fa      	ldrb	r2, [r7, #3]
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8006d68:	b480      	push	{r7}
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	807b      	strh	r3, [r7, #2]
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	807b      	strh	r3, [r7, #2]
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <reg_wizchip_cs_cbfunc+0x16>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <reg_wizchip_cs_cbfunc+0x40>)
 8006dd8:	4a0a      	ldr	r2, [pc, #40]	; (8006e04 <reg_wizchip_cs_cbfunc+0x44>)
 8006dda:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8006ddc:	4b08      	ldr	r3, [pc, #32]	; (8006e00 <reg_wizchip_cs_cbfunc+0x40>)
 8006dde:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <reg_wizchip_cs_cbfunc+0x48>)
 8006de0:	619a      	str	r2, [r3, #24]
 8006de2:	e006      	b.n	8006df2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8006de4:	4a06      	ldr	r2, [pc, #24]	; (8006e00 <reg_wizchip_cs_cbfunc+0x40>)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8006dea:	4a05      	ldr	r2, [pc, #20]	; (8006e00 <reg_wizchip_cs_cbfunc+0x40>)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6193      	str	r3, [r2, #24]
   }
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	2000026c 	.word	0x2000026c
 8006e04:	08006d15 	.word	0x08006d15
 8006e08:	08006d23 	.word	0x08006d23

08006e0c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8006e16:	bf00      	nop
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <reg_wizchip_spi_cbfunc+0x4c>)
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f9      	beq.n	8006e18 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <reg_wizchip_spi_cbfunc+0x24>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <reg_wizchip_spi_cbfunc+0x4c>)
 8006e32:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <reg_wizchip_spi_cbfunc+0x50>)
 8006e34:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8006e36:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <reg_wizchip_spi_cbfunc+0x4c>)
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <reg_wizchip_spi_cbfunc+0x54>)
 8006e3a:	621a      	str	r2, [r3, #32]
 8006e3c:	e006      	b.n	8006e4c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8006e3e:	4a06      	ldr	r2, [pc, #24]	; (8006e58 <reg_wizchip_spi_cbfunc+0x4c>)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8006e44:	4a04      	ldr	r2, [pc, #16]	; (8006e58 <reg_wizchip_spi_cbfunc+0x4c>)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	6213      	str	r3, [r2, #32]
   }
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	2000026c 	.word	0x2000026c
 8006e5c:	08006d69 	.word	0x08006d69
 8006e60:	08006d79 	.word	0x08006d79

08006e64 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8006e6e:	bf00      	nop
 8006e70:	4b0f      	ldr	r3, [pc, #60]	; (8006eb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f9      	beq.n	8006e70 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <reg_wizchip_spiburst_cbfunc+0x24>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8006e88:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006e8a:	4a0a      	ldr	r2, [pc, #40]	; (8006eb4 <reg_wizchip_spiburst_cbfunc+0x50>)
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8006e8e:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006e90:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8006e92:	629a      	str	r2, [r3, #40]	; 0x28
 8006e94:	e006      	b.n	8006ea4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8006e96:	4a06      	ldr	r2, [pc, #24]	; (8006eb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8006e9c:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	2000026c 	.word	0x2000026c
 8006eb4:	08006d8f 	.word	0x08006d8f
 8006eb8:	08006da7 	.word	0x08006da7

08006ebc <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	f200 80c7 	bhi.w	800706a <ctlwizchip+0x1ae>
 8006edc:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <ctlwizchip+0x28>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006f25 	.word	0x08006f25
 8006ee8:	08006f2b 	.word	0x08006f2b
 8006eec:	08006f57 	.word	0x08006f57
 8006ef0:	08006f4b 	.word	0x08006f4b
 8006ef4:	08006f65 	.word	0x08006f65
 8006ef8:	08006f71 	.word	0x08006f71
 8006efc:	08006f7f 	.word	0x08006f7f
 8006f00:	08006fa5 	.word	0x08006fa5
 8006f04:	08006fcb 	.word	0x08006fcb
 8006f08:	0800700f 	.word	0x0800700f
 8006f0c:	08007015 	.word	0x08007015
 8006f10:	0800701d 	.word	0x0800701d
 8006f14:	08007071 	.word	0x08007071
 8006f18:	08007025 	.word	0x08007025
 8006f1c:	08007033 	.word	0x08007033
 8006f20:	0800704f 	.word	0x0800704f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8006f24:	f000 f8ac 	bl	8007080 <wizchip_sw_reset>
         break;
 8006f28:	e0a3      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3308      	adds	r3, #8
 8006f38:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 f8e9 	bl	8007118 <wizchip_init>
 8006f46:	4603      	mov	r3, r0
 8006f48:	e094      	b.n	8007074 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 f96e 	bl	8007230 <wizchip_clrinterrupt>
         break;
 8006f54:	e08d      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8006f56:	f000 f99f 	bl	8007298 <wizchip_getinterrupt>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	801a      	strh	r2, [r3, #0]
         break;
 8006f62:	e086      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 f9ba 	bl	80072e2 <wizchip_setinterruptmask>
         break;         
 8006f6e:	e080      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8006f70:	f000 f9d2 	bl	8007318 <wizchip_getinterruptmask>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	801a      	strh	r2, [r3, #0]
         break;
 8006f7c:	e079      	b.n	8007072 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8006f8e:	f7ff fc57 	bl	8006840 <WIZCHIP_WRITE>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8006f9e:	f7ff fc4f 	bl	8006840 <WIZCHIP_WRITE>
         break;
 8006fa2:	e066      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8006fa4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8006fa8:	f7ff fbfe 	bl	80067a8 <WIZCHIP_READ>
 8006fac:	4603      	mov	r3, r0
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	b29c      	uxth	r4, r3
 8006fb4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8006fb8:	f7ff fbf6 	bl	80067a8 <WIZCHIP_READ>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	4423      	add	r3, r4
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	801a      	strh	r2, [r3, #0]
         break;
 8006fc8:	e053      	b.n	8007072 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8006fca:	4b2c      	ldr	r3, [pc, #176]	; (800707c <ctlwizchip+0x1c0>)
 8006fcc:	789a      	ldrb	r2, [r3, #2]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	4a29      	ldr	r2, [pc, #164]	; (800707c <ctlwizchip+0x1c0>)
 8006fd8:	78d2      	ldrb	r2, [r2, #3]
 8006fda:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	3302      	adds	r3, #2
 8006fe0:	4a26      	ldr	r2, [pc, #152]	; (800707c <ctlwizchip+0x1c0>)
 8006fe2:	7912      	ldrb	r2, [r2, #4]
 8006fe4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	3303      	adds	r3, #3
 8006fea:	4a24      	ldr	r2, [pc, #144]	; (800707c <ctlwizchip+0x1c0>)
 8006fec:	7952      	ldrb	r2, [r2, #5]
 8006fee:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4a21      	ldr	r2, [pc, #132]	; (800707c <ctlwizchip+0x1c0>)
 8006ff6:	7992      	ldrb	r2, [r2, #6]
 8006ff8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	3305      	adds	r3, #5
 8006ffe:	4a1f      	ldr	r2, [pc, #124]	; (800707c <ctlwizchip+0x1c0>)
 8007000:	79d2      	ldrb	r2, [r2, #7]
 8007002:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	3306      	adds	r3, #6
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
         break;
 800700c:	e031      	b.n	8007072 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800700e:	f000 f9d5 	bl	80073bc <wizphy_reset>
         break;
 8007012:	e02e      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8007014:	6838      	ldr	r0, [r7, #0]
 8007016:	f000 f9f8 	bl	800740a <wizphy_setphyconf>
         break;
 800701a:	e02a      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800701c:	6838      	ldr	r0, [r7, #0]
 800701e:	f000 fa36 	bl	800748e <wizphy_getphyconf>
         break;
 8007022:	e026      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fa99 	bl	8007560 <wizphy_setphypmode>
 800702e:	4603      	mov	r3, r0
 8007030:	e020      	b.n	8007074 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8007032:	f000 f9aa 	bl	800738a <wizphy_getphypmode>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2bff      	cmp	r3, #255	; 0xff
 800703e:	d102      	bne.n	8007046 <ctlwizchip+0x18a>
 8007040:	f04f 33ff 	mov.w	r3, #4294967295
 8007044:	e016      	b.n	8007074 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	7dfa      	ldrb	r2, [r7, #23]
 800704a:	701a      	strb	r2, [r3, #0]
         break;
 800704c:	e011      	b.n	8007072 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800704e:	f000 f986 	bl	800735e <wizphy_getphylink>
 8007052:	4603      	mov	r3, r0
 8007054:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	2bff      	cmp	r3, #255	; 0xff
 800705a:	d102      	bne.n	8007062 <ctlwizchip+0x1a6>
 800705c:	f04f 33ff 	mov.w	r3, #4294967295
 8007060:	e008      	b.n	8007074 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	7dfa      	ldrb	r2, [r7, #23]
 8007066:	701a      	strb	r2, [r3, #0]
         break;
 8007068:	e003      	b.n	8007072 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800706a:	f04f 33ff 	mov.w	r3, #4294967295
 800706e:	e001      	b.n	8007074 <ctlwizchip+0x1b8>
         break;
 8007070:	bf00      	nop
   }
   return 0;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd90      	pop	{r4, r7, pc}
 800707c:	2000026c 	.word	0x2000026c

08007080 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8007086:	1d3b      	adds	r3, r7, #4
 8007088:	2206      	movs	r2, #6
 800708a:	4619      	mov	r1, r3
 800708c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8007090:	f7ff fc24 	bl	80068dc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	2204      	movs	r2, #4
 800709a:	4619      	mov	r1, r3
 800709c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070a0:	f7ff fc1c 	bl	80068dc <WIZCHIP_READ_BUF>
 80070a4:	f107 0310 	add.w	r3, r7, #16
 80070a8:	2204      	movs	r2, #4
 80070aa:	4619      	mov	r1, r3
 80070ac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80070b0:	f7ff fc14 	bl	80068dc <WIZCHIP_READ_BUF>
 80070b4:	f107 030c 	add.w	r3, r7, #12
 80070b8:	2204      	movs	r2, #4
 80070ba:	4619      	mov	r1, r3
 80070bc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80070c0:	f7ff fc0c 	bl	80068dc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80070c4:	2180      	movs	r1, #128	; 0x80
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7ff fbba 	bl	8006840 <WIZCHIP_WRITE>
   getMR(); // for delay
 80070cc:	2000      	movs	r0, #0
 80070ce:	f7ff fb6b 	bl	80067a8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80070d2:	1d3b      	adds	r3, r7, #4
 80070d4:	2206      	movs	r2, #6
 80070d6:	4619      	mov	r1, r3
 80070d8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80070dc:	f7ff fc5e 	bl	800699c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80070e0:	f107 0314 	add.w	r3, r7, #20
 80070e4:	2204      	movs	r2, #4
 80070e6:	4619      	mov	r1, r3
 80070e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070ec:	f7ff fc56 	bl	800699c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80070f0:	f107 0310 	add.w	r3, r7, #16
 80070f4:	2204      	movs	r2, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80070fc:	f7ff fc4e 	bl	800699c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8007100:	f107 030c 	add.w	r3, r7, #12
 8007104:	2204      	movs	r2, #4
 8007106:	4619      	mov	r1, r3
 8007108:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800710c:	f7ff fc46 	bl	800699c <WIZCHIP_WRITE_BUF>
}
 8007110:	bf00      	nop
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8007126:	f7ff ffab 	bl	8007080 <wizchip_sw_reset>
   if(txsize)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d03b      	beq.n	80071a8 <wizchip_init+0x90>
   {
      tmp = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
 8007138:	e015      	b.n	8007166 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800713a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4413      	add	r3, r2
 8007142:	781a      	ldrb	r2, [r3, #0]
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	4413      	add	r3, r2
 8007148:	b2db      	uxtb	r3, r3
 800714a:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 800714c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007150:	2b10      	cmp	r3, #16
 8007152:	dd02      	ble.n	800715a <wizchip_init+0x42>
 8007154:	f04f 33ff 	mov.w	r3, #4294967295
 8007158:	e066      	b.n	8007228 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800715a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	3301      	adds	r3, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	73fb      	strb	r3, [r7, #15]
 8007166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800716a:	2b07      	cmp	r3, #7
 800716c:	dde5      	ble.n	800713a <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
 8007172:	e015      	b.n	80071a0 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8007174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	3301      	adds	r3, #1
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8007182:	4618      	mov	r0, r3
 8007184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	4619      	mov	r1, r3
 8007190:	f7ff fb56 	bl	8006840 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	3301      	adds	r3, #1
 800719c:	b2db      	uxtb	r3, r3
 800719e:	73fb      	strb	r3, [r7, #15]
 80071a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071a4:	2b07      	cmp	r3, #7
 80071a6:	dde5      	ble.n	8007174 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d03b      	beq.n	8007226 <wizchip_init+0x10e>
   {
      tmp = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
 80071b6:	e015      	b.n	80071e4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80071b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	4413      	add	r3, r2
 80071c0:	781a      	ldrb	r2, [r3, #0]
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	4413      	add	r3, r2
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80071ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	dd02      	ble.n	80071d8 <wizchip_init+0xc0>
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	e027      	b.n	8007228 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80071d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	3301      	adds	r3, #1
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	dde5      	ble.n	80071b8 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]
 80071f0:	e015      	b.n	800721e <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80071f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	3301      	adds	r3, #1
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8007200:	4618      	mov	r0, r3
 8007202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	4619      	mov	r1, r3
 800720e:	f7ff fb17 	bl	8006840 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	3301      	adds	r3, #1
 800721a:	b2db      	uxtb	r3, r3
 800721c:	73fb      	strb	r3, [r7, #15]
 800721e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007222:	2b07      	cmp	r3, #7
 8007224:	dde5      	ble.n	80071f2 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	0a1b      	lsrs	r3, r3, #8
 8007242:	b29b      	uxth	r3, r3
 8007244:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	f023 030f 	bic.w	r3, r3, #15
 800724c:	b2db      	uxtb	r3, r3
 800724e:	4619      	mov	r1, r3
 8007250:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8007254:	f7ff faf4 	bl	8006840 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e014      	b.n	8007288 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800725e:	7bba      	ldrb	r2, [r7, #14]
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	fa42 f303 	asr.w	r3, r2, r3
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <wizchip_clrinterrupt+0x52>
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	3301      	adds	r3, #1
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800727a:	211f      	movs	r1, #31
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fadf 	bl	8006840 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	3301      	adds	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b07      	cmp	r3, #7
 800728c:	d9e7      	bls.n	800725e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800728e:	bf00      	nop
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80072aa:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80072ae:	f7ff fa7b 	bl	80067a8 <WIZCHIP_READ>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f023 030f 	bic.w	r3, r3, #15
 80072b8:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80072ba:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80072be:	f7ff fa73 	bl	80067a8 <WIZCHIP_READ>
 80072c2:	4603      	mov	r3, r0
 80072c4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80072c6:	79bb      	ldrb	r3, [r7, #6]
 80072c8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80072ca:	88bb      	ldrh	r3, [r7, #4]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80072d8:	88bb      	ldrh	r3, [r7, #4]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	4603      	mov	r3, r0
 80072ea:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80072ec:	88fb      	ldrh	r3, [r7, #6]
 80072ee:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	4619      	mov	r1, r3
 80072fc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8007300:	f7ff fa9e 	bl	8006840 <WIZCHIP_WRITE>
   setSIMR(simr);
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	4619      	mov	r1, r3
 8007308:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800730c:	f7ff fa98 	bl	8006840 <WIZCHIP_WRITE>
#endif   
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800731e:	2300      	movs	r3, #0
 8007320:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8007326:	2300      	movs	r3, #0
 8007328:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800732a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800732e:	f7ff fa3b 	bl	80067a8 <WIZCHIP_READ>
 8007332:	4603      	mov	r3, r0
 8007334:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8007336:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800733a:	f7ff fa35 	bl	80067a8 <WIZCHIP_READ>
 800733e:	4603      	mov	r3, r0
 8007340:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8007342:	79bb      	ldrb	r3, [r7, #6]
 8007344:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8007346:	88bb      	ldrh	r3, [r7, #4]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	b29a      	uxth	r2, r3
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	b29b      	uxth	r3, r3
 8007350:	4413      	add	r3, r2
 8007352:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8007354:	88bb      	ldrh	r3, [r7, #4]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8007364:	2300      	movs	r3, #0
 8007366:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8007368:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800736c:	f7ff fa1c 	bl	80067a8 <WIZCHIP_READ>
 8007370:	4603      	mov	r3, r0
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800737a:	2301      	movs	r3, #1
 800737c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800737e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8007394:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8007398:	f7ff fa06 	bl	80067a8 <WIZCHIP_READ>
 800739c:	4603      	mov	r3, r0
 800739e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a2:	2b30      	cmp	r3, #48	; 0x30
 80073a4:	d102      	bne.n	80073ac <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80073a6:	2301      	movs	r3, #1
 80073a8:	71fb      	strb	r3, [r7, #7]
 80073aa:	e001      	b.n	80073b0 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80073ac:	2300      	movs	r3, #0
 80073ae:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80073b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80073c2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80073c6:	f7ff f9ef 	bl	80067a8 <WIZCHIP_READ>
 80073ca:	4603      	mov	r3, r0
 80073cc:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	4619      	mov	r1, r3
 80073da:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80073de:	f7ff fa2f 	bl	8006840 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80073e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80073e6:	f7ff f9df 	bl	80067a8 <WIZCHIP_READ>
 80073ea:	4603      	mov	r3, r0
 80073ec:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073f4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80073fe:	f7ff fa1f 	bl	8006840 <WIZCHIP_WRITE>
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d104      	bne.n	8007428 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007424:	73fb      	strb	r3, [r7, #15]
 8007426:	e003      	b.n	8007430 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800742e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d104      	bne.n	8007442 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800743e:	73fb      	strb	r3, [r7, #15]
 8007440:	e019      	b.n	8007476 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	78db      	ldrb	r3, [r3, #3]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d10d      	bne.n	8007466 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	789b      	ldrb	r3, [r3, #2]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d104      	bne.n	800745c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	f043 0318 	orr.w	r3, r3, #24
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	e00c      	b.n	8007476 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	f043 0308 	orr.w	r3, r3, #8
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	e007      	b.n	8007476 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	789b      	ldrb	r3, [r3, #2]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d103      	bne.n	8007476 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	f043 0310 	orr.w	r3, r3, #16
 8007474:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	4619      	mov	r1, r3
 800747a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800747e:	f7ff f9df 	bl	8006840 <WIZCHIP_WRITE>
   wizphy_reset();
 8007482:	f7ff ff9b 	bl	80073bc <wizphy_reset>
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800749a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800749e:	f7ff f983 	bl	80067a8 <WIZCHIP_READ>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	119b      	asrs	r3, r3, #6
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d001      	beq.n	80074c4 <wizphy_getphyconf+0x36>
 80074c0:	2b38      	cmp	r3, #56	; 0x38
 80074c2:	d103      	bne.n	80074cc <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	705a      	strb	r2, [r3, #1]
         break;
 80074ca:	e003      	b.n	80074d4 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	705a      	strb	r2, [r3, #1]
         break;
 80074d2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074da:	3b10      	subs	r3, #16
 80074dc:	2b10      	cmp	r3, #16
 80074de:	bf8c      	ite	hi
 80074e0:	2201      	movhi	r2, #1
 80074e2:	2200      	movls	r2, #0
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	2a00      	cmp	r2, #0
 80074e8:	d111      	bne.n	800750e <wizphy_getphyconf+0x80>
 80074ea:	2201      	movs	r2, #1
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80074f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bf14      	ite	ne
 80074fc:	2301      	movne	r3, #1
 80074fe:	2300      	moveq	r3, #0
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	709a      	strb	r2, [r3, #2]
         break;
 800750c:	e003      	b.n	8007516 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	709a      	strb	r2, [r3, #2]
         break;
 8007514:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800751c:	3b08      	subs	r3, #8
 800751e:	2b18      	cmp	r3, #24
 8007520:	bf8c      	ite	hi
 8007522:	2201      	movhi	r2, #1
 8007524:	2200      	movls	r2, #0
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	2a00      	cmp	r2, #0
 800752a:	d111      	bne.n	8007550 <wizphy_getphyconf+0xc2>
 800752c:	2201      	movs	r2, #1
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf14      	ite	ne
 800753e:	2301      	movne	r3, #1
 8007540:	2300      	moveq	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	70da      	strb	r2, [r3, #3]
         break;
 800754e:	e003      	b.n	8007558 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	70da      	strb	r2, [r3, #3]
         break;
 8007556:	bf00      	nop
   }
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800756e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8007572:	f7ff f919 	bl	80067a8 <WIZCHIP_READ>
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <wizphy_setphypmode+0x2a>
 8007584:	f04f 33ff 	mov.w	r3, #4294967295
 8007588:	e030      	b.n	80075ec <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007590:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d104      	bne.n	80075a2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	e003      	b.n	80075aa <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80075a8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	4619      	mov	r1, r3
 80075ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80075b2:	f7ff f945 	bl	8006840 <WIZCHIP_WRITE>
   wizphy_reset();
 80075b6:	f7ff ff01 	bl	80073bc <wizphy_reset>
   tmp = getPHYCFGR();
 80075ba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80075be:	f7ff f8f3 	bl	80067a8 <WIZCHIP_READ>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d106      	bne.n	80075da <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d008      	beq.n	80075e8 <wizphy_setphypmode+0x88>
 80075d6:	2300      	movs	r3, #0
 80075d8:	e008      	b.n	80075ec <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <wizphy_setphypmode+0x88>
 80075e4:	2300      	movs	r3, #0
 80075e6:	e001      	b.n	80075ec <wizphy_setphypmode+0x8c>
   }
   return -1;
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2206      	movs	r2, #6
 8007600:	4619      	mov	r1, r3
 8007602:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8007606:	f7ff f9c9 	bl	800699c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	330e      	adds	r3, #14
 800760e:	2204      	movs	r2, #4
 8007610:	4619      	mov	r1, r3
 8007612:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007616:	f7ff f9c1 	bl	800699c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	330a      	adds	r3, #10
 800761e:	2204      	movs	r2, #4
 8007620:	4619      	mov	r1, r3
 8007622:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8007626:	f7ff f9b9 	bl	800699c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3306      	adds	r3, #6
 800762e:	2204      	movs	r2, #4
 8007630:	4619      	mov	r1, r3
 8007632:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007636:	f7ff f9b1 	bl	800699c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7c9a      	ldrb	r2, [r3, #18]
 800763e:	4b0b      	ldr	r3, [pc, #44]	; (800766c <wizchip_setnetinfo+0x78>)
 8007640:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7cda      	ldrb	r2, [r3, #19]
 8007646:	4b09      	ldr	r3, [pc, #36]	; (800766c <wizchip_setnetinfo+0x78>)
 8007648:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7d1a      	ldrb	r2, [r3, #20]
 800764e:	4b07      	ldr	r3, [pc, #28]	; (800766c <wizchip_setnetinfo+0x78>)
 8007650:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7d5a      	ldrb	r2, [r3, #21]
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <wizchip_setnetinfo+0x78>)
 8007658:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7d9a      	ldrb	r2, [r3, #22]
 800765e:	4b04      	ldr	r3, [pc, #16]	; (8007670 <wizchip_setnetinfo+0x7c>)
 8007660:	701a      	strb	r2, [r3, #0]
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200004e0 	.word	0x200004e0
 8007670:	200004e4 	.word	0x200004e4

08007674 <__errno>:
 8007674:	4b01      	ldr	r3, [pc, #4]	; (800767c <__errno+0x8>)
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000298 	.word	0x20000298

08007680 <__libc_init_array>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4d0d      	ldr	r5, [pc, #52]	; (80076b8 <__libc_init_array+0x38>)
 8007684:	4c0d      	ldr	r4, [pc, #52]	; (80076bc <__libc_init_array+0x3c>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	2600      	movs	r6, #0
 800768c:	42a6      	cmp	r6, r4
 800768e:	d109      	bne.n	80076a4 <__libc_init_array+0x24>
 8007690:	4d0b      	ldr	r5, [pc, #44]	; (80076c0 <__libc_init_array+0x40>)
 8007692:	4c0c      	ldr	r4, [pc, #48]	; (80076c4 <__libc_init_array+0x44>)
 8007694:	f001 fa90 	bl	8008bb8 <_init>
 8007698:	1b64      	subs	r4, r4, r5
 800769a:	10a4      	asrs	r4, r4, #2
 800769c:	2600      	movs	r6, #0
 800769e:	42a6      	cmp	r6, r4
 80076a0:	d105      	bne.n	80076ae <__libc_init_array+0x2e>
 80076a2:	bd70      	pop	{r4, r5, r6, pc}
 80076a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a8:	4798      	blx	r3
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7ee      	b.n	800768c <__libc_init_array+0xc>
 80076ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b2:	4798      	blx	r3
 80076b4:	3601      	adds	r6, #1
 80076b6:	e7f2      	b.n	800769e <__libc_init_array+0x1e>
 80076b8:	08008e20 	.word	0x08008e20
 80076bc:	08008e20 	.word	0x08008e20
 80076c0:	08008e20 	.word	0x08008e20
 80076c4:	08008e24 	.word	0x08008e24

080076c8 <__retarget_lock_init_recursive>:
 80076c8:	4770      	bx	lr

080076ca <__retarget_lock_acquire_recursive>:
 80076ca:	4770      	bx	lr

080076cc <__retarget_lock_release_recursive>:
 80076cc:	4770      	bx	lr
	...

080076d0 <malloc>:
 80076d0:	4b02      	ldr	r3, [pc, #8]	; (80076dc <malloc+0xc>)
 80076d2:	4601      	mov	r1, r0
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	f000 b885 	b.w	80077e4 <_malloc_r>
 80076da:	bf00      	nop
 80076dc:	20000298 	.word	0x20000298

080076e0 <memcpy>:
 80076e0:	440a      	add	r2, r1
 80076e2:	4291      	cmp	r1, r2
 80076e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076e8:	d100      	bne.n	80076ec <memcpy+0xc>
 80076ea:	4770      	bx	lr
 80076ec:	b510      	push	{r4, lr}
 80076ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076f6:	4291      	cmp	r1, r2
 80076f8:	d1f9      	bne.n	80076ee <memcpy+0xe>
 80076fa:	bd10      	pop	{r4, pc}

080076fc <memset>:
 80076fc:	4402      	add	r2, r0
 80076fe:	4603      	mov	r3, r0
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	f803 1b01 	strb.w	r1, [r3], #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>

0800770c <_free_r>:
 800770c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800770e:	2900      	cmp	r1, #0
 8007710:	d044      	beq.n	800779c <_free_r+0x90>
 8007712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007716:	9001      	str	r0, [sp, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f1a1 0404 	sub.w	r4, r1, #4
 800771e:	bfb8      	it	lt
 8007720:	18e4      	addlt	r4, r4, r3
 8007722:	f000 fbe9 	bl	8007ef8 <__malloc_lock>
 8007726:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <_free_r+0x94>)
 8007728:	9801      	ldr	r0, [sp, #4]
 800772a:	6813      	ldr	r3, [r2, #0]
 800772c:	b933      	cbnz	r3, 800773c <_free_r+0x30>
 800772e:	6063      	str	r3, [r4, #4]
 8007730:	6014      	str	r4, [r2, #0]
 8007732:	b003      	add	sp, #12
 8007734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007738:	f000 bbe4 	b.w	8007f04 <__malloc_unlock>
 800773c:	42a3      	cmp	r3, r4
 800773e:	d908      	bls.n	8007752 <_free_r+0x46>
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	1961      	adds	r1, r4, r5
 8007744:	428b      	cmp	r3, r1
 8007746:	bf01      	itttt	eq
 8007748:	6819      	ldreq	r1, [r3, #0]
 800774a:	685b      	ldreq	r3, [r3, #4]
 800774c:	1949      	addeq	r1, r1, r5
 800774e:	6021      	streq	r1, [r4, #0]
 8007750:	e7ed      	b.n	800772e <_free_r+0x22>
 8007752:	461a      	mov	r2, r3
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b10b      	cbz	r3, 800775c <_free_r+0x50>
 8007758:	42a3      	cmp	r3, r4
 800775a:	d9fa      	bls.n	8007752 <_free_r+0x46>
 800775c:	6811      	ldr	r1, [r2, #0]
 800775e:	1855      	adds	r5, r2, r1
 8007760:	42a5      	cmp	r5, r4
 8007762:	d10b      	bne.n	800777c <_free_r+0x70>
 8007764:	6824      	ldr	r4, [r4, #0]
 8007766:	4421      	add	r1, r4
 8007768:	1854      	adds	r4, r2, r1
 800776a:	42a3      	cmp	r3, r4
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	d1e0      	bne.n	8007732 <_free_r+0x26>
 8007770:	681c      	ldr	r4, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	6053      	str	r3, [r2, #4]
 8007776:	4421      	add	r1, r4
 8007778:	6011      	str	r1, [r2, #0]
 800777a:	e7da      	b.n	8007732 <_free_r+0x26>
 800777c:	d902      	bls.n	8007784 <_free_r+0x78>
 800777e:	230c      	movs	r3, #12
 8007780:	6003      	str	r3, [r0, #0]
 8007782:	e7d6      	b.n	8007732 <_free_r+0x26>
 8007784:	6825      	ldr	r5, [r4, #0]
 8007786:	1961      	adds	r1, r4, r5
 8007788:	428b      	cmp	r3, r1
 800778a:	bf04      	itt	eq
 800778c:	6819      	ldreq	r1, [r3, #0]
 800778e:	685b      	ldreq	r3, [r3, #4]
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	bf04      	itt	eq
 8007794:	1949      	addeq	r1, r1, r5
 8007796:	6021      	streq	r1, [r4, #0]
 8007798:	6054      	str	r4, [r2, #4]
 800779a:	e7ca      	b.n	8007732 <_free_r+0x26>
 800779c:	b003      	add	sp, #12
 800779e:	bd30      	pop	{r4, r5, pc}
 80077a0:	200004e8 	.word	0x200004e8

080077a4 <sbrk_aligned>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	4e0e      	ldr	r6, [pc, #56]	; (80077e0 <sbrk_aligned+0x3c>)
 80077a8:	460c      	mov	r4, r1
 80077aa:	6831      	ldr	r1, [r6, #0]
 80077ac:	4605      	mov	r5, r0
 80077ae:	b911      	cbnz	r1, 80077b6 <sbrk_aligned+0x12>
 80077b0:	f000 f8ca 	bl	8007948 <_sbrk_r>
 80077b4:	6030      	str	r0, [r6, #0]
 80077b6:	4621      	mov	r1, r4
 80077b8:	4628      	mov	r0, r5
 80077ba:	f000 f8c5 	bl	8007948 <_sbrk_r>
 80077be:	1c43      	adds	r3, r0, #1
 80077c0:	d00a      	beq.n	80077d8 <sbrk_aligned+0x34>
 80077c2:	1cc4      	adds	r4, r0, #3
 80077c4:	f024 0403 	bic.w	r4, r4, #3
 80077c8:	42a0      	cmp	r0, r4
 80077ca:	d007      	beq.n	80077dc <sbrk_aligned+0x38>
 80077cc:	1a21      	subs	r1, r4, r0
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 f8ba 	bl	8007948 <_sbrk_r>
 80077d4:	3001      	adds	r0, #1
 80077d6:	d101      	bne.n	80077dc <sbrk_aligned+0x38>
 80077d8:	f04f 34ff 	mov.w	r4, #4294967295
 80077dc:	4620      	mov	r0, r4
 80077de:	bd70      	pop	{r4, r5, r6, pc}
 80077e0:	200004ec 	.word	0x200004ec

080077e4 <_malloc_r>:
 80077e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	1ccd      	adds	r5, r1, #3
 80077ea:	f025 0503 	bic.w	r5, r5, #3
 80077ee:	3508      	adds	r5, #8
 80077f0:	2d0c      	cmp	r5, #12
 80077f2:	bf38      	it	cc
 80077f4:	250c      	movcc	r5, #12
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	4607      	mov	r7, r0
 80077fa:	db01      	blt.n	8007800 <_malloc_r+0x1c>
 80077fc:	42a9      	cmp	r1, r5
 80077fe:	d905      	bls.n	800780c <_malloc_r+0x28>
 8007800:	230c      	movs	r3, #12
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	2600      	movs	r6, #0
 8007806:	4630      	mov	r0, r6
 8007808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800780c:	4e2e      	ldr	r6, [pc, #184]	; (80078c8 <_malloc_r+0xe4>)
 800780e:	f000 fb73 	bl	8007ef8 <__malloc_lock>
 8007812:	6833      	ldr	r3, [r6, #0]
 8007814:	461c      	mov	r4, r3
 8007816:	bb34      	cbnz	r4, 8007866 <_malloc_r+0x82>
 8007818:	4629      	mov	r1, r5
 800781a:	4638      	mov	r0, r7
 800781c:	f7ff ffc2 	bl	80077a4 <sbrk_aligned>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	4604      	mov	r4, r0
 8007824:	d14d      	bne.n	80078c2 <_malloc_r+0xde>
 8007826:	6834      	ldr	r4, [r6, #0]
 8007828:	4626      	mov	r6, r4
 800782a:	2e00      	cmp	r6, #0
 800782c:	d140      	bne.n	80078b0 <_malloc_r+0xcc>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	4631      	mov	r1, r6
 8007832:	4638      	mov	r0, r7
 8007834:	eb04 0803 	add.w	r8, r4, r3
 8007838:	f000 f886 	bl	8007948 <_sbrk_r>
 800783c:	4580      	cmp	r8, r0
 800783e:	d13a      	bne.n	80078b6 <_malloc_r+0xd2>
 8007840:	6821      	ldr	r1, [r4, #0]
 8007842:	3503      	adds	r5, #3
 8007844:	1a6d      	subs	r5, r5, r1
 8007846:	f025 0503 	bic.w	r5, r5, #3
 800784a:	3508      	adds	r5, #8
 800784c:	2d0c      	cmp	r5, #12
 800784e:	bf38      	it	cc
 8007850:	250c      	movcc	r5, #12
 8007852:	4629      	mov	r1, r5
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff ffa5 	bl	80077a4 <sbrk_aligned>
 800785a:	3001      	adds	r0, #1
 800785c:	d02b      	beq.n	80078b6 <_malloc_r+0xd2>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	442b      	add	r3, r5
 8007862:	6023      	str	r3, [r4, #0]
 8007864:	e00e      	b.n	8007884 <_malloc_r+0xa0>
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	1b52      	subs	r2, r2, r5
 800786a:	d41e      	bmi.n	80078aa <_malloc_r+0xc6>
 800786c:	2a0b      	cmp	r2, #11
 800786e:	d916      	bls.n	800789e <_malloc_r+0xba>
 8007870:	1961      	adds	r1, r4, r5
 8007872:	42a3      	cmp	r3, r4
 8007874:	6025      	str	r5, [r4, #0]
 8007876:	bf18      	it	ne
 8007878:	6059      	strne	r1, [r3, #4]
 800787a:	6863      	ldr	r3, [r4, #4]
 800787c:	bf08      	it	eq
 800787e:	6031      	streq	r1, [r6, #0]
 8007880:	5162      	str	r2, [r4, r5]
 8007882:	604b      	str	r3, [r1, #4]
 8007884:	4638      	mov	r0, r7
 8007886:	f104 060b 	add.w	r6, r4, #11
 800788a:	f000 fb3b 	bl	8007f04 <__malloc_unlock>
 800788e:	f026 0607 	bic.w	r6, r6, #7
 8007892:	1d23      	adds	r3, r4, #4
 8007894:	1af2      	subs	r2, r6, r3
 8007896:	d0b6      	beq.n	8007806 <_malloc_r+0x22>
 8007898:	1b9b      	subs	r3, r3, r6
 800789a:	50a3      	str	r3, [r4, r2]
 800789c:	e7b3      	b.n	8007806 <_malloc_r+0x22>
 800789e:	6862      	ldr	r2, [r4, #4]
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	bf0c      	ite	eq
 80078a4:	6032      	streq	r2, [r6, #0]
 80078a6:	605a      	strne	r2, [r3, #4]
 80078a8:	e7ec      	b.n	8007884 <_malloc_r+0xa0>
 80078aa:	4623      	mov	r3, r4
 80078ac:	6864      	ldr	r4, [r4, #4]
 80078ae:	e7b2      	b.n	8007816 <_malloc_r+0x32>
 80078b0:	4634      	mov	r4, r6
 80078b2:	6876      	ldr	r6, [r6, #4]
 80078b4:	e7b9      	b.n	800782a <_malloc_r+0x46>
 80078b6:	230c      	movs	r3, #12
 80078b8:	603b      	str	r3, [r7, #0]
 80078ba:	4638      	mov	r0, r7
 80078bc:	f000 fb22 	bl	8007f04 <__malloc_unlock>
 80078c0:	e7a1      	b.n	8007806 <_malloc_r+0x22>
 80078c2:	6025      	str	r5, [r4, #0]
 80078c4:	e7de      	b.n	8007884 <_malloc_r+0xa0>
 80078c6:	bf00      	nop
 80078c8:	200004e8 	.word	0x200004e8

080078cc <rand>:
 80078cc:	4b16      	ldr	r3, [pc, #88]	; (8007928 <rand+0x5c>)
 80078ce:	b510      	push	{r4, lr}
 80078d0:	681c      	ldr	r4, [r3, #0]
 80078d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078d4:	b9b3      	cbnz	r3, 8007904 <rand+0x38>
 80078d6:	2018      	movs	r0, #24
 80078d8:	f7ff fefa 	bl	80076d0 <malloc>
 80078dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80078de:	b928      	cbnz	r0, 80078ec <rand+0x20>
 80078e0:	4602      	mov	r2, r0
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <rand+0x60>)
 80078e4:	4812      	ldr	r0, [pc, #72]	; (8007930 <rand+0x64>)
 80078e6:	214e      	movs	r1, #78	; 0x4e
 80078e8:	f000 f8ba 	bl	8007a60 <__assert_func>
 80078ec:	4a11      	ldr	r2, [pc, #68]	; (8007934 <rand+0x68>)
 80078ee:	4b12      	ldr	r3, [pc, #72]	; (8007938 <rand+0x6c>)
 80078f0:	e9c0 2300 	strd	r2, r3, [r0]
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <rand+0x70>)
 80078f6:	6083      	str	r3, [r0, #8]
 80078f8:	230b      	movs	r3, #11
 80078fa:	8183      	strh	r3, [r0, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	2300      	movs	r3, #0
 8007900:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007904:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007906:	4a0e      	ldr	r2, [pc, #56]	; (8007940 <rand+0x74>)
 8007908:	6920      	ldr	r0, [r4, #16]
 800790a:	6963      	ldr	r3, [r4, #20]
 800790c:	490d      	ldr	r1, [pc, #52]	; (8007944 <rand+0x78>)
 800790e:	4342      	muls	r2, r0
 8007910:	fb01 2203 	mla	r2, r1, r3, r2
 8007914:	fba0 0101 	umull	r0, r1, r0, r1
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	eb42 0001 	adc.w	r0, r2, r1
 800791e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007922:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007926:	bd10      	pop	{r4, pc}
 8007928:	20000298 	.word	0x20000298
 800792c:	08008c78 	.word	0x08008c78
 8007930:	08008c8f 	.word	0x08008c8f
 8007934:	abcd330e 	.word	0xabcd330e
 8007938:	e66d1234 	.word	0xe66d1234
 800793c:	0005deec 	.word	0x0005deec
 8007940:	5851f42d 	.word	0x5851f42d
 8007944:	4c957f2d 	.word	0x4c957f2d

08007948 <_sbrk_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d06      	ldr	r5, [pc, #24]	; (8007964 <_sbrk_r+0x1c>)
 800794c:	2300      	movs	r3, #0
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	f7f9 fffc 	bl	8001950 <_sbrk>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_sbrk_r+0x1a>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_sbrk_r+0x1a>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	200004f0 	.word	0x200004f0

08007968 <siprintf>:
 8007968:	b40e      	push	{r1, r2, r3}
 800796a:	b500      	push	{lr}
 800796c:	b09c      	sub	sp, #112	; 0x70
 800796e:	ab1d      	add	r3, sp, #116	; 0x74
 8007970:	9002      	str	r0, [sp, #8]
 8007972:	9006      	str	r0, [sp, #24]
 8007974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007978:	4809      	ldr	r0, [pc, #36]	; (80079a0 <siprintf+0x38>)
 800797a:	9107      	str	r1, [sp, #28]
 800797c:	9104      	str	r1, [sp, #16]
 800797e:	4909      	ldr	r1, [pc, #36]	; (80079a4 <siprintf+0x3c>)
 8007980:	f853 2b04 	ldr.w	r2, [r3], #4
 8007984:	9105      	str	r1, [sp, #20]
 8007986:	6800      	ldr	r0, [r0, #0]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	a902      	add	r1, sp, #8
 800798c:	f000 fb1c 	bl	8007fc8 <_svfiprintf_r>
 8007990:	9b02      	ldr	r3, [sp, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	b01c      	add	sp, #112	; 0x70
 8007998:	f85d eb04 	ldr.w	lr, [sp], #4
 800799c:	b003      	add	sp, #12
 800799e:	4770      	bx	lr
 80079a0:	20000298 	.word	0x20000298
 80079a4:	ffff0208 	.word	0xffff0208

080079a8 <strtok>:
 80079a8:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <strtok+0x5c>)
 80079aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079ac:	681e      	ldr	r6, [r3, #0]
 80079ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80079b0:	4605      	mov	r5, r0
 80079b2:	b9fc      	cbnz	r4, 80079f4 <strtok+0x4c>
 80079b4:	2050      	movs	r0, #80	; 0x50
 80079b6:	9101      	str	r1, [sp, #4]
 80079b8:	f7ff fe8a 	bl	80076d0 <malloc>
 80079bc:	9901      	ldr	r1, [sp, #4]
 80079be:	65b0      	str	r0, [r6, #88]	; 0x58
 80079c0:	4602      	mov	r2, r0
 80079c2:	b920      	cbnz	r0, 80079ce <strtok+0x26>
 80079c4:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <strtok+0x60>)
 80079c6:	4811      	ldr	r0, [pc, #68]	; (8007a0c <strtok+0x64>)
 80079c8:	2157      	movs	r1, #87	; 0x57
 80079ca:	f000 f849 	bl	8007a60 <__assert_func>
 80079ce:	e9c0 4400 	strd	r4, r4, [r0]
 80079d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80079d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80079da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80079de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80079e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80079e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80079ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80079ee:	6184      	str	r4, [r0, #24]
 80079f0:	7704      	strb	r4, [r0, #28]
 80079f2:	6244      	str	r4, [r0, #36]	; 0x24
 80079f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80079f6:	2301      	movs	r3, #1
 80079f8:	4628      	mov	r0, r5
 80079fa:	b002      	add	sp, #8
 80079fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a00:	f000 b806 	b.w	8007a10 <__strtok_r>
 8007a04:	20000298 	.word	0x20000298
 8007a08:	08008c78 	.word	0x08008c78
 8007a0c:	08008cea 	.word	0x08008cea

08007a10 <__strtok_r>:
 8007a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a12:	b908      	cbnz	r0, 8007a18 <__strtok_r+0x8>
 8007a14:	6810      	ldr	r0, [r2, #0]
 8007a16:	b188      	cbz	r0, 8007a3c <__strtok_r+0x2c>
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007a20:	460f      	mov	r7, r1
 8007a22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007a26:	b91e      	cbnz	r6, 8007a30 <__strtok_r+0x20>
 8007a28:	b965      	cbnz	r5, 8007a44 <__strtok_r+0x34>
 8007a2a:	6015      	str	r5, [r2, #0]
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	e005      	b.n	8007a3c <__strtok_r+0x2c>
 8007a30:	42b5      	cmp	r5, r6
 8007a32:	d1f6      	bne.n	8007a22 <__strtok_r+0x12>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f0      	bne.n	8007a1a <__strtok_r+0xa>
 8007a38:	6014      	str	r4, [r2, #0]
 8007a3a:	7003      	strb	r3, [r0, #0]
 8007a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a3e:	461c      	mov	r4, r3
 8007a40:	e00c      	b.n	8007a5c <__strtok_r+0x4c>
 8007a42:	b915      	cbnz	r5, 8007a4a <__strtok_r+0x3a>
 8007a44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a48:	460e      	mov	r6, r1
 8007a4a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007a4e:	42ab      	cmp	r3, r5
 8007a50:	d1f7      	bne.n	8007a42 <__strtok_r+0x32>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0f3      	beq.n	8007a3e <__strtok_r+0x2e>
 8007a56:	2300      	movs	r3, #0
 8007a58:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007a5c:	6014      	str	r4, [r2, #0]
 8007a5e:	e7ed      	b.n	8007a3c <__strtok_r+0x2c>

08007a60 <__assert_func>:
 8007a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a62:	4614      	mov	r4, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <__assert_func+0x2c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	68d8      	ldr	r0, [r3, #12]
 8007a6e:	b14c      	cbz	r4, 8007a84 <__assert_func+0x24>
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <__assert_func+0x30>)
 8007a72:	9100      	str	r1, [sp, #0]
 8007a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a78:	4906      	ldr	r1, [pc, #24]	; (8007a94 <__assert_func+0x34>)
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	f000 f9a6 	bl	8007dcc <fiprintf>
 8007a80:	f000 ffa6 	bl	80089d0 <abort>
 8007a84:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <__assert_func+0x38>)
 8007a86:	461c      	mov	r4, r3
 8007a88:	e7f3      	b.n	8007a72 <__assert_func+0x12>
 8007a8a:	bf00      	nop
 8007a8c:	20000298 	.word	0x20000298
 8007a90:	08008d47 	.word	0x08008d47
 8007a94:	08008d54 	.word	0x08008d54
 8007a98:	08008d82 	.word	0x08008d82

08007a9c <__sflush_r>:
 8007a9c:	898a      	ldrh	r2, [r1, #12]
 8007a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	0710      	lsls	r0, r2, #28
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	d458      	bmi.n	8007b5c <__sflush_r+0xc0>
 8007aaa:	684b      	ldr	r3, [r1, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc05      	bgt.n	8007abc <__sflush_r+0x20>
 8007ab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dc02      	bgt.n	8007abc <__sflush_r+0x20>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007abc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	d0f9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ac8:	682f      	ldr	r7, [r5, #0]
 8007aca:	602b      	str	r3, [r5, #0]
 8007acc:	d032      	beq.n	8007b34 <__sflush_r+0x98>
 8007ace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	075a      	lsls	r2, r3, #29
 8007ad4:	d505      	bpl.n	8007ae2 <__sflush_r+0x46>
 8007ad6:	6863      	ldr	r3, [r4, #4]
 8007ad8:	1ac0      	subs	r0, r0, r3
 8007ada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007adc:	b10b      	cbz	r3, 8007ae2 <__sflush_r+0x46>
 8007ade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ae0:	1ac0      	subs	r0, r0, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ae8:	6a21      	ldr	r1, [r4, #32]
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b0      	blx	r6
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	d106      	bne.n	8007b02 <__sflush_r+0x66>
 8007af4:	6829      	ldr	r1, [r5, #0]
 8007af6:	291d      	cmp	r1, #29
 8007af8:	d82c      	bhi.n	8007b54 <__sflush_r+0xb8>
 8007afa:	4a2a      	ldr	r2, [pc, #168]	; (8007ba4 <__sflush_r+0x108>)
 8007afc:	40ca      	lsrs	r2, r1
 8007afe:	07d6      	lsls	r6, r2, #31
 8007b00:	d528      	bpl.n	8007b54 <__sflush_r+0xb8>
 8007b02:	2200      	movs	r2, #0
 8007b04:	6062      	str	r2, [r4, #4]
 8007b06:	04d9      	lsls	r1, r3, #19
 8007b08:	6922      	ldr	r2, [r4, #16]
 8007b0a:	6022      	str	r2, [r4, #0]
 8007b0c:	d504      	bpl.n	8007b18 <__sflush_r+0x7c>
 8007b0e:	1c42      	adds	r2, r0, #1
 8007b10:	d101      	bne.n	8007b16 <__sflush_r+0x7a>
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	b903      	cbnz	r3, 8007b18 <__sflush_r+0x7c>
 8007b16:	6560      	str	r0, [r4, #84]	; 0x54
 8007b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1a:	602f      	str	r7, [r5, #0]
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	d0ca      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b24:	4299      	cmp	r1, r3
 8007b26:	d002      	beq.n	8007b2e <__sflush_r+0x92>
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f7ff fdef 	bl	800770c <_free_r>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	6360      	str	r0, [r4, #52]	; 0x34
 8007b32:	e7c1      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b34:	6a21      	ldr	r1, [r4, #32]
 8007b36:	2301      	movs	r3, #1
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b0      	blx	r6
 8007b3c:	1c41      	adds	r1, r0, #1
 8007b3e:	d1c7      	bne.n	8007ad0 <__sflush_r+0x34>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0c4      	beq.n	8007ad0 <__sflush_r+0x34>
 8007b46:	2b1d      	cmp	r3, #29
 8007b48:	d001      	beq.n	8007b4e <__sflush_r+0xb2>
 8007b4a:	2b16      	cmp	r3, #22
 8007b4c:	d101      	bne.n	8007b52 <__sflush_r+0xb6>
 8007b4e:	602f      	str	r7, [r5, #0]
 8007b50:	e7b1      	b.n	8007ab6 <__sflush_r+0x1a>
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	e7ad      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b5c:	690f      	ldr	r7, [r1, #16]
 8007b5e:	2f00      	cmp	r7, #0
 8007b60:	d0a9      	beq.n	8007ab6 <__sflush_r+0x1a>
 8007b62:	0793      	lsls	r3, r2, #30
 8007b64:	680e      	ldr	r6, [r1, #0]
 8007b66:	bf08      	it	eq
 8007b68:	694b      	ldreq	r3, [r1, #20]
 8007b6a:	600f      	str	r7, [r1, #0]
 8007b6c:	bf18      	it	ne
 8007b6e:	2300      	movne	r3, #0
 8007b70:	eba6 0807 	sub.w	r8, r6, r7
 8007b74:	608b      	str	r3, [r1, #8]
 8007b76:	f1b8 0f00 	cmp.w	r8, #0
 8007b7a:	dd9c      	ble.n	8007ab6 <__sflush_r+0x1a>
 8007b7c:	6a21      	ldr	r1, [r4, #32]
 8007b7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b80:	4643      	mov	r3, r8
 8007b82:	463a      	mov	r2, r7
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b0      	blx	r6
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dc06      	bgt.n	8007b9a <__sflush_r+0xfe>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e78e      	b.n	8007ab8 <__sflush_r+0x1c>
 8007b9a:	4407      	add	r7, r0
 8007b9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ba0:	e7e9      	b.n	8007b76 <__sflush_r+0xda>
 8007ba2:	bf00      	nop
 8007ba4:	20400001 	.word	0x20400001

08007ba8 <_fflush_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	690b      	ldr	r3, [r1, #16]
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	b913      	cbnz	r3, 8007bb8 <_fflush_r+0x10>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	b118      	cbz	r0, 8007bc2 <_fflush_r+0x1a>
 8007bba:	6983      	ldr	r3, [r0, #24]
 8007bbc:	b90b      	cbnz	r3, 8007bc2 <_fflush_r+0x1a>
 8007bbe:	f000 f887 	bl	8007cd0 <__sinit>
 8007bc2:	4b14      	ldr	r3, [pc, #80]	; (8007c14 <_fflush_r+0x6c>)
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	d11b      	bne.n	8007c00 <_fflush_r+0x58>
 8007bc8:	686c      	ldr	r4, [r5, #4]
 8007bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0ef      	beq.n	8007bb2 <_fflush_r+0xa>
 8007bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bd4:	07d0      	lsls	r0, r2, #31
 8007bd6:	d404      	bmi.n	8007be2 <_fflush_r+0x3a>
 8007bd8:	0599      	lsls	r1, r3, #22
 8007bda:	d402      	bmi.n	8007be2 <_fflush_r+0x3a>
 8007bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bde:	f7ff fd74 	bl	80076ca <__retarget_lock_acquire_recursive>
 8007be2:	4628      	mov	r0, r5
 8007be4:	4621      	mov	r1, r4
 8007be6:	f7ff ff59 	bl	8007a9c <__sflush_r>
 8007bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bec:	07da      	lsls	r2, r3, #31
 8007bee:	4605      	mov	r5, r0
 8007bf0:	d4e0      	bmi.n	8007bb4 <_fflush_r+0xc>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	059b      	lsls	r3, r3, #22
 8007bf6:	d4dd      	bmi.n	8007bb4 <_fflush_r+0xc>
 8007bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bfa:	f7ff fd67 	bl	80076cc <__retarget_lock_release_recursive>
 8007bfe:	e7d9      	b.n	8007bb4 <_fflush_r+0xc>
 8007c00:	4b05      	ldr	r3, [pc, #20]	; (8007c18 <_fflush_r+0x70>)
 8007c02:	429c      	cmp	r4, r3
 8007c04:	d101      	bne.n	8007c0a <_fflush_r+0x62>
 8007c06:	68ac      	ldr	r4, [r5, #8]
 8007c08:	e7df      	b.n	8007bca <_fflush_r+0x22>
 8007c0a:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <_fflush_r+0x74>)
 8007c0c:	429c      	cmp	r4, r3
 8007c0e:	bf08      	it	eq
 8007c10:	68ec      	ldreq	r4, [r5, #12]
 8007c12:	e7da      	b.n	8007bca <_fflush_r+0x22>
 8007c14:	08008da4 	.word	0x08008da4
 8007c18:	08008dc4 	.word	0x08008dc4
 8007c1c:	08008d84 	.word	0x08008d84

08007c20 <std>:
 8007c20:	2300      	movs	r3, #0
 8007c22:	b510      	push	{r4, lr}
 8007c24:	4604      	mov	r4, r0
 8007c26:	e9c0 3300 	strd	r3, r3, [r0]
 8007c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c2e:	6083      	str	r3, [r0, #8]
 8007c30:	8181      	strh	r1, [r0, #12]
 8007c32:	6643      	str	r3, [r0, #100]	; 0x64
 8007c34:	81c2      	strh	r2, [r0, #14]
 8007c36:	6183      	str	r3, [r0, #24]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	305c      	adds	r0, #92	; 0x5c
 8007c3e:	f7ff fd5d 	bl	80076fc <memset>
 8007c42:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <std+0x38>)
 8007c44:	6263      	str	r3, [r4, #36]	; 0x24
 8007c46:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <std+0x3c>)
 8007c48:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c4a:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <std+0x40>)
 8007c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <std+0x44>)
 8007c50:	6224      	str	r4, [r4, #32]
 8007c52:	6323      	str	r3, [r4, #48]	; 0x30
 8007c54:	bd10      	pop	{r4, pc}
 8007c56:	bf00      	nop
 8007c58:	080087a5 	.word	0x080087a5
 8007c5c:	080087c7 	.word	0x080087c7
 8007c60:	080087ff 	.word	0x080087ff
 8007c64:	08008823 	.word	0x08008823

08007c68 <_cleanup_r>:
 8007c68:	4901      	ldr	r1, [pc, #4]	; (8007c70 <_cleanup_r+0x8>)
 8007c6a:	f000 b8c1 	b.w	8007df0 <_fwalk_reent>
 8007c6e:	bf00      	nop
 8007c70:	08007ba9 	.word	0x08007ba9

08007c74 <__sfmoreglue>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	2268      	movs	r2, #104	; 0x68
 8007c78:	1e4d      	subs	r5, r1, #1
 8007c7a:	4355      	muls	r5, r2
 8007c7c:	460e      	mov	r6, r1
 8007c7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c82:	f7ff fdaf 	bl	80077e4 <_malloc_r>
 8007c86:	4604      	mov	r4, r0
 8007c88:	b140      	cbz	r0, 8007c9c <__sfmoreglue+0x28>
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c90:	300c      	adds	r0, #12
 8007c92:	60a0      	str	r0, [r4, #8]
 8007c94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c98:	f7ff fd30 	bl	80076fc <memset>
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}

08007ca0 <__sfp_lock_acquire>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	; (8007ca8 <__sfp_lock_acquire+0x8>)
 8007ca2:	f7ff bd12 	b.w	80076ca <__retarget_lock_acquire_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	200004e6 	.word	0x200004e6

08007cac <__sfp_lock_release>:
 8007cac:	4801      	ldr	r0, [pc, #4]	; (8007cb4 <__sfp_lock_release+0x8>)
 8007cae:	f7ff bd0d 	b.w	80076cc <__retarget_lock_release_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	200004e6 	.word	0x200004e6

08007cb8 <__sinit_lock_acquire>:
 8007cb8:	4801      	ldr	r0, [pc, #4]	; (8007cc0 <__sinit_lock_acquire+0x8>)
 8007cba:	f7ff bd06 	b.w	80076ca <__retarget_lock_acquire_recursive>
 8007cbe:	bf00      	nop
 8007cc0:	200004e7 	.word	0x200004e7

08007cc4 <__sinit_lock_release>:
 8007cc4:	4801      	ldr	r0, [pc, #4]	; (8007ccc <__sinit_lock_release+0x8>)
 8007cc6:	f7ff bd01 	b.w	80076cc <__retarget_lock_release_recursive>
 8007cca:	bf00      	nop
 8007ccc:	200004e7 	.word	0x200004e7

08007cd0 <__sinit>:
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	f7ff fff0 	bl	8007cb8 <__sinit_lock_acquire>
 8007cd8:	69a3      	ldr	r3, [r4, #24]
 8007cda:	b11b      	cbz	r3, 8007ce4 <__sinit+0x14>
 8007cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce0:	f7ff bff0 	b.w	8007cc4 <__sinit_lock_release>
 8007ce4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ce8:	6523      	str	r3, [r4, #80]	; 0x50
 8007cea:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <__sinit+0x68>)
 8007cec:	4a13      	ldr	r2, [pc, #76]	; (8007d3c <__sinit+0x6c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cf2:	42a3      	cmp	r3, r4
 8007cf4:	bf04      	itt	eq
 8007cf6:	2301      	moveq	r3, #1
 8007cf8:	61a3      	streq	r3, [r4, #24]
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 f820 	bl	8007d40 <__sfp>
 8007d00:	6060      	str	r0, [r4, #4]
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 f81c 	bl	8007d40 <__sfp>
 8007d08:	60a0      	str	r0, [r4, #8]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 f818 	bl	8007d40 <__sfp>
 8007d10:	2200      	movs	r2, #0
 8007d12:	60e0      	str	r0, [r4, #12]
 8007d14:	2104      	movs	r1, #4
 8007d16:	6860      	ldr	r0, [r4, #4]
 8007d18:	f7ff ff82 	bl	8007c20 <std>
 8007d1c:	68a0      	ldr	r0, [r4, #8]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	2109      	movs	r1, #9
 8007d22:	f7ff ff7d 	bl	8007c20 <std>
 8007d26:	68e0      	ldr	r0, [r4, #12]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	2112      	movs	r1, #18
 8007d2c:	f7ff ff78 	bl	8007c20 <std>
 8007d30:	2301      	movs	r3, #1
 8007d32:	61a3      	str	r3, [r4, #24]
 8007d34:	e7d2      	b.n	8007cdc <__sinit+0xc>
 8007d36:	bf00      	nop
 8007d38:	08008c74 	.word	0x08008c74
 8007d3c:	08007c69 	.word	0x08007c69

08007d40 <__sfp>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	4607      	mov	r7, r0
 8007d44:	f7ff ffac 	bl	8007ca0 <__sfp_lock_acquire>
 8007d48:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <__sfp+0x84>)
 8007d4a:	681e      	ldr	r6, [r3, #0]
 8007d4c:	69b3      	ldr	r3, [r6, #24]
 8007d4e:	b913      	cbnz	r3, 8007d56 <__sfp+0x16>
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ffbd 	bl	8007cd0 <__sinit>
 8007d56:	3648      	adds	r6, #72	; 0x48
 8007d58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	d503      	bpl.n	8007d68 <__sfp+0x28>
 8007d60:	6833      	ldr	r3, [r6, #0]
 8007d62:	b30b      	cbz	r3, 8007da8 <__sfp+0x68>
 8007d64:	6836      	ldr	r6, [r6, #0]
 8007d66:	e7f7      	b.n	8007d58 <__sfp+0x18>
 8007d68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d6c:	b9d5      	cbnz	r5, 8007da4 <__sfp+0x64>
 8007d6e:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <__sfp+0x88>)
 8007d70:	60e3      	str	r3, [r4, #12]
 8007d72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d76:	6665      	str	r5, [r4, #100]	; 0x64
 8007d78:	f7ff fca6 	bl	80076c8 <__retarget_lock_init_recursive>
 8007d7c:	f7ff ff96 	bl	8007cac <__sfp_lock_release>
 8007d80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d88:	6025      	str	r5, [r4, #0]
 8007d8a:	61a5      	str	r5, [r4, #24]
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d94:	f7ff fcb2 	bl	80076fc <memset>
 8007d98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007da0:	4620      	mov	r0, r4
 8007da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da4:	3468      	adds	r4, #104	; 0x68
 8007da6:	e7d9      	b.n	8007d5c <__sfp+0x1c>
 8007da8:	2104      	movs	r1, #4
 8007daa:	4638      	mov	r0, r7
 8007dac:	f7ff ff62 	bl	8007c74 <__sfmoreglue>
 8007db0:	4604      	mov	r4, r0
 8007db2:	6030      	str	r0, [r6, #0]
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d1d5      	bne.n	8007d64 <__sfp+0x24>
 8007db8:	f7ff ff78 	bl	8007cac <__sfp_lock_release>
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	e7ee      	b.n	8007da0 <__sfp+0x60>
 8007dc2:	bf00      	nop
 8007dc4:	08008c74 	.word	0x08008c74
 8007dc8:	ffff0001 	.word	0xffff0001

08007dcc <fiprintf>:
 8007dcc:	b40e      	push	{r1, r2, r3}
 8007dce:	b503      	push	{r0, r1, lr}
 8007dd0:	4601      	mov	r1, r0
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	4805      	ldr	r0, [pc, #20]	; (8007dec <fiprintf+0x20>)
 8007dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	f000 fa1d 	bl	800821c <_vfiprintf_r>
 8007de2:	b002      	add	sp, #8
 8007de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007de8:	b003      	add	sp, #12
 8007dea:	4770      	bx	lr
 8007dec:	20000298 	.word	0x20000298

08007df0 <_fwalk_reent>:
 8007df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df4:	4606      	mov	r6, r0
 8007df6:	4688      	mov	r8, r1
 8007df8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dfc:	2700      	movs	r7, #0
 8007dfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e02:	f1b9 0901 	subs.w	r9, r9, #1
 8007e06:	d505      	bpl.n	8007e14 <_fwalk_reent+0x24>
 8007e08:	6824      	ldr	r4, [r4, #0]
 8007e0a:	2c00      	cmp	r4, #0
 8007e0c:	d1f7      	bne.n	8007dfe <_fwalk_reent+0xe>
 8007e0e:	4638      	mov	r0, r7
 8007e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e14:	89ab      	ldrh	r3, [r5, #12]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d907      	bls.n	8007e2a <_fwalk_reent+0x3a>
 8007e1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	d003      	beq.n	8007e2a <_fwalk_reent+0x3a>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4630      	mov	r0, r6
 8007e26:	47c0      	blx	r8
 8007e28:	4307      	orrs	r7, r0
 8007e2a:	3568      	adds	r5, #104	; 0x68
 8007e2c:	e7e9      	b.n	8007e02 <_fwalk_reent+0x12>

08007e2e <__swhatbuf_r>:
 8007e2e:	b570      	push	{r4, r5, r6, lr}
 8007e30:	460e      	mov	r6, r1
 8007e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e36:	2900      	cmp	r1, #0
 8007e38:	b096      	sub	sp, #88	; 0x58
 8007e3a:	4614      	mov	r4, r2
 8007e3c:	461d      	mov	r5, r3
 8007e3e:	da08      	bge.n	8007e52 <__swhatbuf_r+0x24>
 8007e40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	602a      	str	r2, [r5, #0]
 8007e48:	061a      	lsls	r2, r3, #24
 8007e4a:	d410      	bmi.n	8007e6e <__swhatbuf_r+0x40>
 8007e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e50:	e00e      	b.n	8007e70 <__swhatbuf_r+0x42>
 8007e52:	466a      	mov	r2, sp
 8007e54:	f000 fdd4 	bl	8008a00 <_fstat_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	dbf1      	blt.n	8007e40 <__swhatbuf_r+0x12>
 8007e5c:	9a01      	ldr	r2, [sp, #4]
 8007e5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e66:	425a      	negs	r2, r3
 8007e68:	415a      	adcs	r2, r3
 8007e6a:	602a      	str	r2, [r5, #0]
 8007e6c:	e7ee      	b.n	8007e4c <__swhatbuf_r+0x1e>
 8007e6e:	2340      	movs	r3, #64	; 0x40
 8007e70:	2000      	movs	r0, #0
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	b016      	add	sp, #88	; 0x58
 8007e76:	bd70      	pop	{r4, r5, r6, pc}

08007e78 <__smakebuf_r>:
 8007e78:	898b      	ldrh	r3, [r1, #12]
 8007e7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e7c:	079d      	lsls	r5, r3, #30
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460c      	mov	r4, r1
 8007e82:	d507      	bpl.n	8007e94 <__smakebuf_r+0x1c>
 8007e84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	6123      	str	r3, [r4, #16]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	6163      	str	r3, [r4, #20]
 8007e90:	b002      	add	sp, #8
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	ab01      	add	r3, sp, #4
 8007e96:	466a      	mov	r2, sp
 8007e98:	f7ff ffc9 	bl	8007e2e <__swhatbuf_r>
 8007e9c:	9900      	ldr	r1, [sp, #0]
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff fc9f 	bl	80077e4 <_malloc_r>
 8007ea6:	b948      	cbnz	r0, 8007ebc <__smakebuf_r+0x44>
 8007ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eac:	059a      	lsls	r2, r3, #22
 8007eae:	d4ef      	bmi.n	8007e90 <__smakebuf_r+0x18>
 8007eb0:	f023 0303 	bic.w	r3, r3, #3
 8007eb4:	f043 0302 	orr.w	r3, r3, #2
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	e7e3      	b.n	8007e84 <__smakebuf_r+0xc>
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <__smakebuf_r+0x7c>)
 8007ebe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	6020      	str	r0, [r4, #0]
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	9b00      	ldr	r3, [sp, #0]
 8007ecc:	6163      	str	r3, [r4, #20]
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	6120      	str	r0, [r4, #16]
 8007ed2:	b15b      	cbz	r3, 8007eec <__smakebuf_r+0x74>
 8007ed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f000 fda3 	bl	8008a24 <_isatty_r>
 8007ede:	b128      	cbz	r0, 8007eec <__smakebuf_r+0x74>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	89a0      	ldrh	r0, [r4, #12]
 8007eee:	4305      	orrs	r5, r0
 8007ef0:	81a5      	strh	r5, [r4, #12]
 8007ef2:	e7cd      	b.n	8007e90 <__smakebuf_r+0x18>
 8007ef4:	08007c69 	.word	0x08007c69

08007ef8 <__malloc_lock>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__malloc_lock+0x8>)
 8007efa:	f7ff bbe6 	b.w	80076ca <__retarget_lock_acquire_recursive>
 8007efe:	bf00      	nop
 8007f00:	200004e5 	.word	0x200004e5

08007f04 <__malloc_unlock>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__malloc_unlock+0x8>)
 8007f06:	f7ff bbe1 	b.w	80076cc <__retarget_lock_release_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200004e5 	.word	0x200004e5

08007f10 <__ssputs_r>:
 8007f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f14:	688e      	ldr	r6, [r1, #8]
 8007f16:	429e      	cmp	r6, r3
 8007f18:	4682      	mov	sl, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	4690      	mov	r8, r2
 8007f1e:	461f      	mov	r7, r3
 8007f20:	d838      	bhi.n	8007f94 <__ssputs_r+0x84>
 8007f22:	898a      	ldrh	r2, [r1, #12]
 8007f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f28:	d032      	beq.n	8007f90 <__ssputs_r+0x80>
 8007f2a:	6825      	ldr	r5, [r4, #0]
 8007f2c:	6909      	ldr	r1, [r1, #16]
 8007f2e:	eba5 0901 	sub.w	r9, r5, r1
 8007f32:	6965      	ldr	r5, [r4, #20]
 8007f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	444b      	add	r3, r9
 8007f40:	106d      	asrs	r5, r5, #1
 8007f42:	429d      	cmp	r5, r3
 8007f44:	bf38      	it	cc
 8007f46:	461d      	movcc	r5, r3
 8007f48:	0553      	lsls	r3, r2, #21
 8007f4a:	d531      	bpl.n	8007fb0 <__ssputs_r+0xa0>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7ff fc49 	bl	80077e4 <_malloc_r>
 8007f52:	4606      	mov	r6, r0
 8007f54:	b950      	cbnz	r0, 8007f6c <__ssputs_r+0x5c>
 8007f56:	230c      	movs	r3, #12
 8007f58:	f8ca 3000 	str.w	r3, [sl]
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6c:	6921      	ldr	r1, [r4, #16]
 8007f6e:	464a      	mov	r2, r9
 8007f70:	f7ff fbb6 	bl	80076e0 <memcpy>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	6126      	str	r6, [r4, #16]
 8007f82:	6165      	str	r5, [r4, #20]
 8007f84:	444e      	add	r6, r9
 8007f86:	eba5 0509 	sub.w	r5, r5, r9
 8007f8a:	6026      	str	r6, [r4, #0]
 8007f8c:	60a5      	str	r5, [r4, #8]
 8007f8e:	463e      	mov	r6, r7
 8007f90:	42be      	cmp	r6, r7
 8007f92:	d900      	bls.n	8007f96 <__ssputs_r+0x86>
 8007f94:	463e      	mov	r6, r7
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	4632      	mov	r2, r6
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	f000 fd64 	bl	8008a68 <memmove>
 8007fa0:	68a3      	ldr	r3, [r4, #8]
 8007fa2:	1b9b      	subs	r3, r3, r6
 8007fa4:	60a3      	str	r3, [r4, #8]
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	4433      	add	r3, r6
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	2000      	movs	r0, #0
 8007fae:	e7db      	b.n	8007f68 <__ssputs_r+0x58>
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	f000 fd73 	bl	8008a9c <_realloc_r>
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d1e1      	bne.n	8007f80 <__ssputs_r+0x70>
 8007fbc:	6921      	ldr	r1, [r4, #16]
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	f7ff fba4 	bl	800770c <_free_r>
 8007fc4:	e7c7      	b.n	8007f56 <__ssputs_r+0x46>
	...

08007fc8 <_svfiprintf_r>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	4698      	mov	r8, r3
 8007fce:	898b      	ldrh	r3, [r1, #12]
 8007fd0:	061b      	lsls	r3, r3, #24
 8007fd2:	b09d      	sub	sp, #116	; 0x74
 8007fd4:	4607      	mov	r7, r0
 8007fd6:	460d      	mov	r5, r1
 8007fd8:	4614      	mov	r4, r2
 8007fda:	d50e      	bpl.n	8007ffa <_svfiprintf_r+0x32>
 8007fdc:	690b      	ldr	r3, [r1, #16]
 8007fde:	b963      	cbnz	r3, 8007ffa <_svfiprintf_r+0x32>
 8007fe0:	2140      	movs	r1, #64	; 0x40
 8007fe2:	f7ff fbff 	bl	80077e4 <_malloc_r>
 8007fe6:	6028      	str	r0, [r5, #0]
 8007fe8:	6128      	str	r0, [r5, #16]
 8007fea:	b920      	cbnz	r0, 8007ff6 <_svfiprintf_r+0x2e>
 8007fec:	230c      	movs	r3, #12
 8007fee:	603b      	str	r3, [r7, #0]
 8007ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff4:	e0d1      	b.n	800819a <_svfiprintf_r+0x1d2>
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	616b      	str	r3, [r5, #20]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ffe:	2320      	movs	r3, #32
 8008000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008004:	f8cd 800c 	str.w	r8, [sp, #12]
 8008008:	2330      	movs	r3, #48	; 0x30
 800800a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081b4 <_svfiprintf_r+0x1ec>
 800800e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008012:	f04f 0901 	mov.w	r9, #1
 8008016:	4623      	mov	r3, r4
 8008018:	469a      	mov	sl, r3
 800801a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800801e:	b10a      	cbz	r2, 8008024 <_svfiprintf_r+0x5c>
 8008020:	2a25      	cmp	r2, #37	; 0x25
 8008022:	d1f9      	bne.n	8008018 <_svfiprintf_r+0x50>
 8008024:	ebba 0b04 	subs.w	fp, sl, r4
 8008028:	d00b      	beq.n	8008042 <_svfiprintf_r+0x7a>
 800802a:	465b      	mov	r3, fp
 800802c:	4622      	mov	r2, r4
 800802e:	4629      	mov	r1, r5
 8008030:	4638      	mov	r0, r7
 8008032:	f7ff ff6d 	bl	8007f10 <__ssputs_r>
 8008036:	3001      	adds	r0, #1
 8008038:	f000 80aa 	beq.w	8008190 <_svfiprintf_r+0x1c8>
 800803c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800803e:	445a      	add	r2, fp
 8008040:	9209      	str	r2, [sp, #36]	; 0x24
 8008042:	f89a 3000 	ldrb.w	r3, [sl]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 80a2 	beq.w	8008190 <_svfiprintf_r+0x1c8>
 800804c:	2300      	movs	r3, #0
 800804e:	f04f 32ff 	mov.w	r2, #4294967295
 8008052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008056:	f10a 0a01 	add.w	sl, sl, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	9307      	str	r3, [sp, #28]
 800805e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008062:	931a      	str	r3, [sp, #104]	; 0x68
 8008064:	4654      	mov	r4, sl
 8008066:	2205      	movs	r2, #5
 8008068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806c:	4851      	ldr	r0, [pc, #324]	; (80081b4 <_svfiprintf_r+0x1ec>)
 800806e:	f7f8 f8bf 	bl	80001f0 <memchr>
 8008072:	9a04      	ldr	r2, [sp, #16]
 8008074:	b9d8      	cbnz	r0, 80080ae <_svfiprintf_r+0xe6>
 8008076:	06d0      	lsls	r0, r2, #27
 8008078:	bf44      	itt	mi
 800807a:	2320      	movmi	r3, #32
 800807c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008080:	0711      	lsls	r1, r2, #28
 8008082:	bf44      	itt	mi
 8008084:	232b      	movmi	r3, #43	; 0x2b
 8008086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800808a:	f89a 3000 	ldrb.w	r3, [sl]
 800808e:	2b2a      	cmp	r3, #42	; 0x2a
 8008090:	d015      	beq.n	80080be <_svfiprintf_r+0xf6>
 8008092:	9a07      	ldr	r2, [sp, #28]
 8008094:	4654      	mov	r4, sl
 8008096:	2000      	movs	r0, #0
 8008098:	f04f 0c0a 	mov.w	ip, #10
 800809c:	4621      	mov	r1, r4
 800809e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080a2:	3b30      	subs	r3, #48	; 0x30
 80080a4:	2b09      	cmp	r3, #9
 80080a6:	d94e      	bls.n	8008146 <_svfiprintf_r+0x17e>
 80080a8:	b1b0      	cbz	r0, 80080d8 <_svfiprintf_r+0x110>
 80080aa:	9207      	str	r2, [sp, #28]
 80080ac:	e014      	b.n	80080d8 <_svfiprintf_r+0x110>
 80080ae:	eba0 0308 	sub.w	r3, r0, r8
 80080b2:	fa09 f303 	lsl.w	r3, r9, r3
 80080b6:	4313      	orrs	r3, r2
 80080b8:	9304      	str	r3, [sp, #16]
 80080ba:	46a2      	mov	sl, r4
 80080bc:	e7d2      	b.n	8008064 <_svfiprintf_r+0x9c>
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	1d19      	adds	r1, r3, #4
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	9103      	str	r1, [sp, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfbb      	ittet	lt
 80080ca:	425b      	neglt	r3, r3
 80080cc:	f042 0202 	orrlt.w	r2, r2, #2
 80080d0:	9307      	strge	r3, [sp, #28]
 80080d2:	9307      	strlt	r3, [sp, #28]
 80080d4:	bfb8      	it	lt
 80080d6:	9204      	strlt	r2, [sp, #16]
 80080d8:	7823      	ldrb	r3, [r4, #0]
 80080da:	2b2e      	cmp	r3, #46	; 0x2e
 80080dc:	d10c      	bne.n	80080f8 <_svfiprintf_r+0x130>
 80080de:	7863      	ldrb	r3, [r4, #1]
 80080e0:	2b2a      	cmp	r3, #42	; 0x2a
 80080e2:	d135      	bne.n	8008150 <_svfiprintf_r+0x188>
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	1d1a      	adds	r2, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	9203      	str	r2, [sp, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bfb8      	it	lt
 80080f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f4:	3402      	adds	r4, #2
 80080f6:	9305      	str	r3, [sp, #20]
 80080f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081c4 <_svfiprintf_r+0x1fc>
 80080fc:	7821      	ldrb	r1, [r4, #0]
 80080fe:	2203      	movs	r2, #3
 8008100:	4650      	mov	r0, sl
 8008102:	f7f8 f875 	bl	80001f0 <memchr>
 8008106:	b140      	cbz	r0, 800811a <_svfiprintf_r+0x152>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	eba0 000a 	sub.w	r0, r0, sl
 800810e:	fa03 f000 	lsl.w	r0, r3, r0
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	4303      	orrs	r3, r0
 8008116:	3401      	adds	r4, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811e:	4826      	ldr	r0, [pc, #152]	; (80081b8 <_svfiprintf_r+0x1f0>)
 8008120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008124:	2206      	movs	r2, #6
 8008126:	f7f8 f863 	bl	80001f0 <memchr>
 800812a:	2800      	cmp	r0, #0
 800812c:	d038      	beq.n	80081a0 <_svfiprintf_r+0x1d8>
 800812e:	4b23      	ldr	r3, [pc, #140]	; (80081bc <_svfiprintf_r+0x1f4>)
 8008130:	bb1b      	cbnz	r3, 800817a <_svfiprintf_r+0x1b2>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	3307      	adds	r3, #7
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	3308      	adds	r3, #8
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	4433      	add	r3, r6
 8008142:	9309      	str	r3, [sp, #36]	; 0x24
 8008144:	e767      	b.n	8008016 <_svfiprintf_r+0x4e>
 8008146:	fb0c 3202 	mla	r2, ip, r2, r3
 800814a:	460c      	mov	r4, r1
 800814c:	2001      	movs	r0, #1
 800814e:	e7a5      	b.n	800809c <_svfiprintf_r+0xd4>
 8008150:	2300      	movs	r3, #0
 8008152:	3401      	adds	r4, #1
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	4619      	mov	r1, r3
 8008158:	f04f 0c0a 	mov.w	ip, #10
 800815c:	4620      	mov	r0, r4
 800815e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008162:	3a30      	subs	r2, #48	; 0x30
 8008164:	2a09      	cmp	r2, #9
 8008166:	d903      	bls.n	8008170 <_svfiprintf_r+0x1a8>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0c5      	beq.n	80080f8 <_svfiprintf_r+0x130>
 800816c:	9105      	str	r1, [sp, #20]
 800816e:	e7c3      	b.n	80080f8 <_svfiprintf_r+0x130>
 8008170:	fb0c 2101 	mla	r1, ip, r1, r2
 8008174:	4604      	mov	r4, r0
 8008176:	2301      	movs	r3, #1
 8008178:	e7f0      	b.n	800815c <_svfiprintf_r+0x194>
 800817a:	ab03      	add	r3, sp, #12
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	462a      	mov	r2, r5
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <_svfiprintf_r+0x1f8>)
 8008182:	a904      	add	r1, sp, #16
 8008184:	4638      	mov	r0, r7
 8008186:	f3af 8000 	nop.w
 800818a:	1c42      	adds	r2, r0, #1
 800818c:	4606      	mov	r6, r0
 800818e:	d1d6      	bne.n	800813e <_svfiprintf_r+0x176>
 8008190:	89ab      	ldrh	r3, [r5, #12]
 8008192:	065b      	lsls	r3, r3, #25
 8008194:	f53f af2c 	bmi.w	8007ff0 <_svfiprintf_r+0x28>
 8008198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800819a:	b01d      	add	sp, #116	; 0x74
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	ab03      	add	r3, sp, #12
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	462a      	mov	r2, r5
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <_svfiprintf_r+0x1f8>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	4638      	mov	r0, r7
 80081ac:	f000 f9d4 	bl	8008558 <_printf_i>
 80081b0:	e7eb      	b.n	800818a <_svfiprintf_r+0x1c2>
 80081b2:	bf00      	nop
 80081b4:	08008de4 	.word	0x08008de4
 80081b8:	08008dee 	.word	0x08008dee
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08007f11 	.word	0x08007f11
 80081c4:	08008dea 	.word	0x08008dea

080081c8 <__sfputc_r>:
 80081c8:	6893      	ldr	r3, [r2, #8]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	b410      	push	{r4}
 80081d0:	6093      	str	r3, [r2, #8]
 80081d2:	da08      	bge.n	80081e6 <__sfputc_r+0x1e>
 80081d4:	6994      	ldr	r4, [r2, #24]
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	db01      	blt.n	80081de <__sfputc_r+0x16>
 80081da:	290a      	cmp	r1, #10
 80081dc:	d103      	bne.n	80081e6 <__sfputc_r+0x1e>
 80081de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081e2:	f000 bb23 	b.w	800882c <__swbuf_r>
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	1c58      	adds	r0, r3, #1
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	7019      	strb	r1, [r3, #0]
 80081ee:	4608      	mov	r0, r1
 80081f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <__sfputs_r>:
 80081f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f8:	4606      	mov	r6, r0
 80081fa:	460f      	mov	r7, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	18d5      	adds	r5, r2, r3
 8008200:	42ac      	cmp	r4, r5
 8008202:	d101      	bne.n	8008208 <__sfputs_r+0x12>
 8008204:	2000      	movs	r0, #0
 8008206:	e007      	b.n	8008218 <__sfputs_r+0x22>
 8008208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820c:	463a      	mov	r2, r7
 800820e:	4630      	mov	r0, r6
 8008210:	f7ff ffda 	bl	80081c8 <__sfputc_r>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d1f3      	bne.n	8008200 <__sfputs_r+0xa>
 8008218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800821c <_vfiprintf_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	460d      	mov	r5, r1
 8008222:	b09d      	sub	sp, #116	; 0x74
 8008224:	4614      	mov	r4, r2
 8008226:	4698      	mov	r8, r3
 8008228:	4606      	mov	r6, r0
 800822a:	b118      	cbz	r0, 8008234 <_vfiprintf_r+0x18>
 800822c:	6983      	ldr	r3, [r0, #24]
 800822e:	b90b      	cbnz	r3, 8008234 <_vfiprintf_r+0x18>
 8008230:	f7ff fd4e 	bl	8007cd0 <__sinit>
 8008234:	4b89      	ldr	r3, [pc, #548]	; (800845c <_vfiprintf_r+0x240>)
 8008236:	429d      	cmp	r5, r3
 8008238:	d11b      	bne.n	8008272 <_vfiprintf_r+0x56>
 800823a:	6875      	ldr	r5, [r6, #4]
 800823c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800823e:	07d9      	lsls	r1, r3, #31
 8008240:	d405      	bmi.n	800824e <_vfiprintf_r+0x32>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	059a      	lsls	r2, r3, #22
 8008246:	d402      	bmi.n	800824e <_vfiprintf_r+0x32>
 8008248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824a:	f7ff fa3e 	bl	80076ca <__retarget_lock_acquire_recursive>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	071b      	lsls	r3, r3, #28
 8008252:	d501      	bpl.n	8008258 <_vfiprintf_r+0x3c>
 8008254:	692b      	ldr	r3, [r5, #16]
 8008256:	b9eb      	cbnz	r3, 8008294 <_vfiprintf_r+0x78>
 8008258:	4629      	mov	r1, r5
 800825a:	4630      	mov	r0, r6
 800825c:	f000 fb4a 	bl	80088f4 <__swsetup_r>
 8008260:	b1c0      	cbz	r0, 8008294 <_vfiprintf_r+0x78>
 8008262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008264:	07dc      	lsls	r4, r3, #31
 8008266:	d50e      	bpl.n	8008286 <_vfiprintf_r+0x6a>
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	b01d      	add	sp, #116	; 0x74
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	4b7b      	ldr	r3, [pc, #492]	; (8008460 <_vfiprintf_r+0x244>)
 8008274:	429d      	cmp	r5, r3
 8008276:	d101      	bne.n	800827c <_vfiprintf_r+0x60>
 8008278:	68b5      	ldr	r5, [r6, #8]
 800827a:	e7df      	b.n	800823c <_vfiprintf_r+0x20>
 800827c:	4b79      	ldr	r3, [pc, #484]	; (8008464 <_vfiprintf_r+0x248>)
 800827e:	429d      	cmp	r5, r3
 8008280:	bf08      	it	eq
 8008282:	68f5      	ldreq	r5, [r6, #12]
 8008284:	e7da      	b.n	800823c <_vfiprintf_r+0x20>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	0598      	lsls	r0, r3, #22
 800828a:	d4ed      	bmi.n	8008268 <_vfiprintf_r+0x4c>
 800828c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800828e:	f7ff fa1d 	bl	80076cc <__retarget_lock_release_recursive>
 8008292:	e7e9      	b.n	8008268 <_vfiprintf_r+0x4c>
 8008294:	2300      	movs	r3, #0
 8008296:	9309      	str	r3, [sp, #36]	; 0x24
 8008298:	2320      	movs	r3, #32
 800829a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800829e:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a2:	2330      	movs	r3, #48	; 0x30
 80082a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008468 <_vfiprintf_r+0x24c>
 80082a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082ac:	f04f 0901 	mov.w	r9, #1
 80082b0:	4623      	mov	r3, r4
 80082b2:	469a      	mov	sl, r3
 80082b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b8:	b10a      	cbz	r2, 80082be <_vfiprintf_r+0xa2>
 80082ba:	2a25      	cmp	r2, #37	; 0x25
 80082bc:	d1f9      	bne.n	80082b2 <_vfiprintf_r+0x96>
 80082be:	ebba 0b04 	subs.w	fp, sl, r4
 80082c2:	d00b      	beq.n	80082dc <_vfiprintf_r+0xc0>
 80082c4:	465b      	mov	r3, fp
 80082c6:	4622      	mov	r2, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff ff93 	bl	80081f6 <__sfputs_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	f000 80aa 	beq.w	800842a <_vfiprintf_r+0x20e>
 80082d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d8:	445a      	add	r2, fp
 80082da:	9209      	str	r2, [sp, #36]	; 0x24
 80082dc:	f89a 3000 	ldrb.w	r3, [sl]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80a2 	beq.w	800842a <_vfiprintf_r+0x20e>
 80082e6:	2300      	movs	r3, #0
 80082e8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f0:	f10a 0a01 	add.w	sl, sl, #1
 80082f4:	9304      	str	r3, [sp, #16]
 80082f6:	9307      	str	r3, [sp, #28]
 80082f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082fc:	931a      	str	r3, [sp, #104]	; 0x68
 80082fe:	4654      	mov	r4, sl
 8008300:	2205      	movs	r2, #5
 8008302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008306:	4858      	ldr	r0, [pc, #352]	; (8008468 <_vfiprintf_r+0x24c>)
 8008308:	f7f7 ff72 	bl	80001f0 <memchr>
 800830c:	9a04      	ldr	r2, [sp, #16]
 800830e:	b9d8      	cbnz	r0, 8008348 <_vfiprintf_r+0x12c>
 8008310:	06d1      	lsls	r1, r2, #27
 8008312:	bf44      	itt	mi
 8008314:	2320      	movmi	r3, #32
 8008316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831a:	0713      	lsls	r3, r2, #28
 800831c:	bf44      	itt	mi
 800831e:	232b      	movmi	r3, #43	; 0x2b
 8008320:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008324:	f89a 3000 	ldrb.w	r3, [sl]
 8008328:	2b2a      	cmp	r3, #42	; 0x2a
 800832a:	d015      	beq.n	8008358 <_vfiprintf_r+0x13c>
 800832c:	9a07      	ldr	r2, [sp, #28]
 800832e:	4654      	mov	r4, sl
 8008330:	2000      	movs	r0, #0
 8008332:	f04f 0c0a 	mov.w	ip, #10
 8008336:	4621      	mov	r1, r4
 8008338:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833c:	3b30      	subs	r3, #48	; 0x30
 800833e:	2b09      	cmp	r3, #9
 8008340:	d94e      	bls.n	80083e0 <_vfiprintf_r+0x1c4>
 8008342:	b1b0      	cbz	r0, 8008372 <_vfiprintf_r+0x156>
 8008344:	9207      	str	r2, [sp, #28]
 8008346:	e014      	b.n	8008372 <_vfiprintf_r+0x156>
 8008348:	eba0 0308 	sub.w	r3, r0, r8
 800834c:	fa09 f303 	lsl.w	r3, r9, r3
 8008350:	4313      	orrs	r3, r2
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	46a2      	mov	sl, r4
 8008356:	e7d2      	b.n	80082fe <_vfiprintf_r+0xe2>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	9103      	str	r1, [sp, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	bfbb      	ittet	lt
 8008364:	425b      	neglt	r3, r3
 8008366:	f042 0202 	orrlt.w	r2, r2, #2
 800836a:	9307      	strge	r3, [sp, #28]
 800836c:	9307      	strlt	r3, [sp, #28]
 800836e:	bfb8      	it	lt
 8008370:	9204      	strlt	r2, [sp, #16]
 8008372:	7823      	ldrb	r3, [r4, #0]
 8008374:	2b2e      	cmp	r3, #46	; 0x2e
 8008376:	d10c      	bne.n	8008392 <_vfiprintf_r+0x176>
 8008378:	7863      	ldrb	r3, [r4, #1]
 800837a:	2b2a      	cmp	r3, #42	; 0x2a
 800837c:	d135      	bne.n	80083ea <_vfiprintf_r+0x1ce>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	9203      	str	r2, [sp, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfb8      	it	lt
 800838a:	f04f 33ff 	movlt.w	r3, #4294967295
 800838e:	3402      	adds	r4, #2
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008478 <_vfiprintf_r+0x25c>
 8008396:	7821      	ldrb	r1, [r4, #0]
 8008398:	2203      	movs	r2, #3
 800839a:	4650      	mov	r0, sl
 800839c:	f7f7 ff28 	bl	80001f0 <memchr>
 80083a0:	b140      	cbz	r0, 80083b4 <_vfiprintf_r+0x198>
 80083a2:	2340      	movs	r3, #64	; 0x40
 80083a4:	eba0 000a 	sub.w	r0, r0, sl
 80083a8:	fa03 f000 	lsl.w	r0, r3, r0
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	4303      	orrs	r3, r0
 80083b0:	3401      	adds	r4, #1
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	482c      	ldr	r0, [pc, #176]	; (800846c <_vfiprintf_r+0x250>)
 80083ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083be:	2206      	movs	r2, #6
 80083c0:	f7f7 ff16 	bl	80001f0 <memchr>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d03f      	beq.n	8008448 <_vfiprintf_r+0x22c>
 80083c8:	4b29      	ldr	r3, [pc, #164]	; (8008470 <_vfiprintf_r+0x254>)
 80083ca:	bb1b      	cbnz	r3, 8008414 <_vfiprintf_r+0x1f8>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	3307      	adds	r3, #7
 80083d0:	f023 0307 	bic.w	r3, r3, #7
 80083d4:	3308      	adds	r3, #8
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083da:	443b      	add	r3, r7
 80083dc:	9309      	str	r3, [sp, #36]	; 0x24
 80083de:	e767      	b.n	80082b0 <_vfiprintf_r+0x94>
 80083e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e4:	460c      	mov	r4, r1
 80083e6:	2001      	movs	r0, #1
 80083e8:	e7a5      	b.n	8008336 <_vfiprintf_r+0x11a>
 80083ea:	2300      	movs	r3, #0
 80083ec:	3401      	adds	r4, #1
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	4619      	mov	r1, r3
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4620      	mov	r0, r4
 80083f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083fc:	3a30      	subs	r2, #48	; 0x30
 80083fe:	2a09      	cmp	r2, #9
 8008400:	d903      	bls.n	800840a <_vfiprintf_r+0x1ee>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0c5      	beq.n	8008392 <_vfiprintf_r+0x176>
 8008406:	9105      	str	r1, [sp, #20]
 8008408:	e7c3      	b.n	8008392 <_vfiprintf_r+0x176>
 800840a:	fb0c 2101 	mla	r1, ip, r1, r2
 800840e:	4604      	mov	r4, r0
 8008410:	2301      	movs	r3, #1
 8008412:	e7f0      	b.n	80083f6 <_vfiprintf_r+0x1da>
 8008414:	ab03      	add	r3, sp, #12
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	462a      	mov	r2, r5
 800841a:	4b16      	ldr	r3, [pc, #88]	; (8008474 <_vfiprintf_r+0x258>)
 800841c:	a904      	add	r1, sp, #16
 800841e:	4630      	mov	r0, r6
 8008420:	f3af 8000 	nop.w
 8008424:	4607      	mov	r7, r0
 8008426:	1c78      	adds	r0, r7, #1
 8008428:	d1d6      	bne.n	80083d8 <_vfiprintf_r+0x1bc>
 800842a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800842c:	07d9      	lsls	r1, r3, #31
 800842e:	d405      	bmi.n	800843c <_vfiprintf_r+0x220>
 8008430:	89ab      	ldrh	r3, [r5, #12]
 8008432:	059a      	lsls	r2, r3, #22
 8008434:	d402      	bmi.n	800843c <_vfiprintf_r+0x220>
 8008436:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008438:	f7ff f948 	bl	80076cc <__retarget_lock_release_recursive>
 800843c:	89ab      	ldrh	r3, [r5, #12]
 800843e:	065b      	lsls	r3, r3, #25
 8008440:	f53f af12 	bmi.w	8008268 <_vfiprintf_r+0x4c>
 8008444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008446:	e711      	b.n	800826c <_vfiprintf_r+0x50>
 8008448:	ab03      	add	r3, sp, #12
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	462a      	mov	r2, r5
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <_vfiprintf_r+0x258>)
 8008450:	a904      	add	r1, sp, #16
 8008452:	4630      	mov	r0, r6
 8008454:	f000 f880 	bl	8008558 <_printf_i>
 8008458:	e7e4      	b.n	8008424 <_vfiprintf_r+0x208>
 800845a:	bf00      	nop
 800845c:	08008da4 	.word	0x08008da4
 8008460:	08008dc4 	.word	0x08008dc4
 8008464:	08008d84 	.word	0x08008d84
 8008468:	08008de4 	.word	0x08008de4
 800846c:	08008dee 	.word	0x08008dee
 8008470:	00000000 	.word	0x00000000
 8008474:	080081f7 	.word	0x080081f7
 8008478:	08008dea 	.word	0x08008dea

0800847c <_printf_common>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	4616      	mov	r6, r2
 8008482:	4699      	mov	r9, r3
 8008484:	688a      	ldr	r2, [r1, #8]
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800848c:	4293      	cmp	r3, r2
 800848e:	bfb8      	it	lt
 8008490:	4613      	movlt	r3, r2
 8008492:	6033      	str	r3, [r6, #0]
 8008494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008498:	4607      	mov	r7, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b10a      	cbz	r2, 80084a2 <_printf_common+0x26>
 800849e:	3301      	adds	r3, #1
 80084a0:	6033      	str	r3, [r6, #0]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	0699      	lsls	r1, r3, #26
 80084a6:	bf42      	ittt	mi
 80084a8:	6833      	ldrmi	r3, [r6, #0]
 80084aa:	3302      	addmi	r3, #2
 80084ac:	6033      	strmi	r3, [r6, #0]
 80084ae:	6825      	ldr	r5, [r4, #0]
 80084b0:	f015 0506 	ands.w	r5, r5, #6
 80084b4:	d106      	bne.n	80084c4 <_printf_common+0x48>
 80084b6:	f104 0a19 	add.w	sl, r4, #25
 80084ba:	68e3      	ldr	r3, [r4, #12]
 80084bc:	6832      	ldr	r2, [r6, #0]
 80084be:	1a9b      	subs	r3, r3, r2
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dc26      	bgt.n	8008512 <_printf_common+0x96>
 80084c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084c8:	1e13      	subs	r3, r2, #0
 80084ca:	6822      	ldr	r2, [r4, #0]
 80084cc:	bf18      	it	ne
 80084ce:	2301      	movne	r3, #1
 80084d0:	0692      	lsls	r2, r2, #26
 80084d2:	d42b      	bmi.n	800852c <_printf_common+0xb0>
 80084d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084d8:	4649      	mov	r1, r9
 80084da:	4638      	mov	r0, r7
 80084dc:	47c0      	blx	r8
 80084de:	3001      	adds	r0, #1
 80084e0:	d01e      	beq.n	8008520 <_printf_common+0xa4>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	68e5      	ldr	r5, [r4, #12]
 80084e6:	6832      	ldr	r2, [r6, #0]
 80084e8:	f003 0306 	and.w	r3, r3, #6
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	bf08      	it	eq
 80084f0:	1aad      	subeq	r5, r5, r2
 80084f2:	68a3      	ldr	r3, [r4, #8]
 80084f4:	6922      	ldr	r2, [r4, #16]
 80084f6:	bf0c      	ite	eq
 80084f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084fc:	2500      	movne	r5, #0
 80084fe:	4293      	cmp	r3, r2
 8008500:	bfc4      	itt	gt
 8008502:	1a9b      	subgt	r3, r3, r2
 8008504:	18ed      	addgt	r5, r5, r3
 8008506:	2600      	movs	r6, #0
 8008508:	341a      	adds	r4, #26
 800850a:	42b5      	cmp	r5, r6
 800850c:	d11a      	bne.n	8008544 <_printf_common+0xc8>
 800850e:	2000      	movs	r0, #0
 8008510:	e008      	b.n	8008524 <_printf_common+0xa8>
 8008512:	2301      	movs	r3, #1
 8008514:	4652      	mov	r2, sl
 8008516:	4649      	mov	r1, r9
 8008518:	4638      	mov	r0, r7
 800851a:	47c0      	blx	r8
 800851c:	3001      	adds	r0, #1
 800851e:	d103      	bne.n	8008528 <_printf_common+0xac>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008528:	3501      	adds	r5, #1
 800852a:	e7c6      	b.n	80084ba <_printf_common+0x3e>
 800852c:	18e1      	adds	r1, r4, r3
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	2030      	movs	r0, #48	; 0x30
 8008532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008536:	4422      	add	r2, r4
 8008538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800853c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008540:	3302      	adds	r3, #2
 8008542:	e7c7      	b.n	80084d4 <_printf_common+0x58>
 8008544:	2301      	movs	r3, #1
 8008546:	4622      	mov	r2, r4
 8008548:	4649      	mov	r1, r9
 800854a:	4638      	mov	r0, r7
 800854c:	47c0      	blx	r8
 800854e:	3001      	adds	r0, #1
 8008550:	d0e6      	beq.n	8008520 <_printf_common+0xa4>
 8008552:	3601      	adds	r6, #1
 8008554:	e7d9      	b.n	800850a <_printf_common+0x8e>
	...

08008558 <_printf_i>:
 8008558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	7e0f      	ldrb	r7, [r1, #24]
 800855e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008560:	2f78      	cmp	r7, #120	; 0x78
 8008562:	4691      	mov	r9, r2
 8008564:	4680      	mov	r8, r0
 8008566:	460c      	mov	r4, r1
 8008568:	469a      	mov	sl, r3
 800856a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800856e:	d807      	bhi.n	8008580 <_printf_i+0x28>
 8008570:	2f62      	cmp	r7, #98	; 0x62
 8008572:	d80a      	bhi.n	800858a <_printf_i+0x32>
 8008574:	2f00      	cmp	r7, #0
 8008576:	f000 80d8 	beq.w	800872a <_printf_i+0x1d2>
 800857a:	2f58      	cmp	r7, #88	; 0x58
 800857c:	f000 80a3 	beq.w	80086c6 <_printf_i+0x16e>
 8008580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008588:	e03a      	b.n	8008600 <_printf_i+0xa8>
 800858a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800858e:	2b15      	cmp	r3, #21
 8008590:	d8f6      	bhi.n	8008580 <_printf_i+0x28>
 8008592:	a101      	add	r1, pc, #4	; (adr r1, 8008598 <_printf_i+0x40>)
 8008594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008598:	080085f1 	.word	0x080085f1
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008581 	.word	0x08008581
 80085a4:	08008581 	.word	0x08008581
 80085a8:	08008581 	.word	0x08008581
 80085ac:	08008581 	.word	0x08008581
 80085b0:	08008605 	.word	0x08008605
 80085b4:	08008581 	.word	0x08008581
 80085b8:	08008581 	.word	0x08008581
 80085bc:	08008581 	.word	0x08008581
 80085c0:	08008581 	.word	0x08008581
 80085c4:	08008711 	.word	0x08008711
 80085c8:	08008635 	.word	0x08008635
 80085cc:	080086f3 	.word	0x080086f3
 80085d0:	08008581 	.word	0x08008581
 80085d4:	08008581 	.word	0x08008581
 80085d8:	08008733 	.word	0x08008733
 80085dc:	08008581 	.word	0x08008581
 80085e0:	08008635 	.word	0x08008635
 80085e4:	08008581 	.word	0x08008581
 80085e8:	08008581 	.word	0x08008581
 80085ec:	080086fb 	.word	0x080086fb
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	1d1a      	adds	r2, r3, #4
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	602a      	str	r2, [r5, #0]
 80085f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008600:	2301      	movs	r3, #1
 8008602:	e0a3      	b.n	800874c <_printf_i+0x1f4>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	6829      	ldr	r1, [r5, #0]
 8008608:	0606      	lsls	r6, r0, #24
 800860a:	f101 0304 	add.w	r3, r1, #4
 800860e:	d50a      	bpl.n	8008626 <_printf_i+0xce>
 8008610:	680e      	ldr	r6, [r1, #0]
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	2e00      	cmp	r6, #0
 8008616:	da03      	bge.n	8008620 <_printf_i+0xc8>
 8008618:	232d      	movs	r3, #45	; 0x2d
 800861a:	4276      	negs	r6, r6
 800861c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008620:	485e      	ldr	r0, [pc, #376]	; (800879c <_printf_i+0x244>)
 8008622:	230a      	movs	r3, #10
 8008624:	e019      	b.n	800865a <_printf_i+0x102>
 8008626:	680e      	ldr	r6, [r1, #0]
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800862e:	bf18      	it	ne
 8008630:	b236      	sxthne	r6, r6
 8008632:	e7ef      	b.n	8008614 <_printf_i+0xbc>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	6820      	ldr	r0, [r4, #0]
 8008638:	1d19      	adds	r1, r3, #4
 800863a:	6029      	str	r1, [r5, #0]
 800863c:	0601      	lsls	r1, r0, #24
 800863e:	d501      	bpl.n	8008644 <_printf_i+0xec>
 8008640:	681e      	ldr	r6, [r3, #0]
 8008642:	e002      	b.n	800864a <_printf_i+0xf2>
 8008644:	0646      	lsls	r6, r0, #25
 8008646:	d5fb      	bpl.n	8008640 <_printf_i+0xe8>
 8008648:	881e      	ldrh	r6, [r3, #0]
 800864a:	4854      	ldr	r0, [pc, #336]	; (800879c <_printf_i+0x244>)
 800864c:	2f6f      	cmp	r7, #111	; 0x6f
 800864e:	bf0c      	ite	eq
 8008650:	2308      	moveq	r3, #8
 8008652:	230a      	movne	r3, #10
 8008654:	2100      	movs	r1, #0
 8008656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800865a:	6865      	ldr	r5, [r4, #4]
 800865c:	60a5      	str	r5, [r4, #8]
 800865e:	2d00      	cmp	r5, #0
 8008660:	bfa2      	ittt	ge
 8008662:	6821      	ldrge	r1, [r4, #0]
 8008664:	f021 0104 	bicge.w	r1, r1, #4
 8008668:	6021      	strge	r1, [r4, #0]
 800866a:	b90e      	cbnz	r6, 8008670 <_printf_i+0x118>
 800866c:	2d00      	cmp	r5, #0
 800866e:	d04d      	beq.n	800870c <_printf_i+0x1b4>
 8008670:	4615      	mov	r5, r2
 8008672:	fbb6 f1f3 	udiv	r1, r6, r3
 8008676:	fb03 6711 	mls	r7, r3, r1, r6
 800867a:	5dc7      	ldrb	r7, [r0, r7]
 800867c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008680:	4637      	mov	r7, r6
 8008682:	42bb      	cmp	r3, r7
 8008684:	460e      	mov	r6, r1
 8008686:	d9f4      	bls.n	8008672 <_printf_i+0x11a>
 8008688:	2b08      	cmp	r3, #8
 800868a:	d10b      	bne.n	80086a4 <_printf_i+0x14c>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	07de      	lsls	r6, r3, #31
 8008690:	d508      	bpl.n	80086a4 <_printf_i+0x14c>
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	6861      	ldr	r1, [r4, #4]
 8008696:	4299      	cmp	r1, r3
 8008698:	bfde      	ittt	le
 800869a:	2330      	movle	r3, #48	; 0x30
 800869c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086a4:	1b52      	subs	r2, r2, r5
 80086a6:	6122      	str	r2, [r4, #16]
 80086a8:	f8cd a000 	str.w	sl, [sp]
 80086ac:	464b      	mov	r3, r9
 80086ae:	aa03      	add	r2, sp, #12
 80086b0:	4621      	mov	r1, r4
 80086b2:	4640      	mov	r0, r8
 80086b4:	f7ff fee2 	bl	800847c <_printf_common>
 80086b8:	3001      	adds	r0, #1
 80086ba:	d14c      	bne.n	8008756 <_printf_i+0x1fe>
 80086bc:	f04f 30ff 	mov.w	r0, #4294967295
 80086c0:	b004      	add	sp, #16
 80086c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c6:	4835      	ldr	r0, [pc, #212]	; (800879c <_printf_i+0x244>)
 80086c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086cc:	6829      	ldr	r1, [r5, #0]
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d4:	6029      	str	r1, [r5, #0]
 80086d6:	061d      	lsls	r5, r3, #24
 80086d8:	d514      	bpl.n	8008704 <_printf_i+0x1ac>
 80086da:	07df      	lsls	r7, r3, #31
 80086dc:	bf44      	itt	mi
 80086de:	f043 0320 	orrmi.w	r3, r3, #32
 80086e2:	6023      	strmi	r3, [r4, #0]
 80086e4:	b91e      	cbnz	r6, 80086ee <_printf_i+0x196>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	f023 0320 	bic.w	r3, r3, #32
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	2310      	movs	r3, #16
 80086f0:	e7b0      	b.n	8008654 <_printf_i+0xfc>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	f043 0320 	orr.w	r3, r3, #32
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	2378      	movs	r3, #120	; 0x78
 80086fc:	4828      	ldr	r0, [pc, #160]	; (80087a0 <_printf_i+0x248>)
 80086fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008702:	e7e3      	b.n	80086cc <_printf_i+0x174>
 8008704:	0659      	lsls	r1, r3, #25
 8008706:	bf48      	it	mi
 8008708:	b2b6      	uxthmi	r6, r6
 800870a:	e7e6      	b.n	80086da <_printf_i+0x182>
 800870c:	4615      	mov	r5, r2
 800870e:	e7bb      	b.n	8008688 <_printf_i+0x130>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	6826      	ldr	r6, [r4, #0]
 8008714:	6961      	ldr	r1, [r4, #20]
 8008716:	1d18      	adds	r0, r3, #4
 8008718:	6028      	str	r0, [r5, #0]
 800871a:	0635      	lsls	r5, r6, #24
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	d501      	bpl.n	8008724 <_printf_i+0x1cc>
 8008720:	6019      	str	r1, [r3, #0]
 8008722:	e002      	b.n	800872a <_printf_i+0x1d2>
 8008724:	0670      	lsls	r0, r6, #25
 8008726:	d5fb      	bpl.n	8008720 <_printf_i+0x1c8>
 8008728:	8019      	strh	r1, [r3, #0]
 800872a:	2300      	movs	r3, #0
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	4615      	mov	r5, r2
 8008730:	e7ba      	b.n	80086a8 <_printf_i+0x150>
 8008732:	682b      	ldr	r3, [r5, #0]
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	602a      	str	r2, [r5, #0]
 8008738:	681d      	ldr	r5, [r3, #0]
 800873a:	6862      	ldr	r2, [r4, #4]
 800873c:	2100      	movs	r1, #0
 800873e:	4628      	mov	r0, r5
 8008740:	f7f7 fd56 	bl	80001f0 <memchr>
 8008744:	b108      	cbz	r0, 800874a <_printf_i+0x1f2>
 8008746:	1b40      	subs	r0, r0, r5
 8008748:	6060      	str	r0, [r4, #4]
 800874a:	6863      	ldr	r3, [r4, #4]
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	2300      	movs	r3, #0
 8008750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008754:	e7a8      	b.n	80086a8 <_printf_i+0x150>
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	462a      	mov	r2, r5
 800875a:	4649      	mov	r1, r9
 800875c:	4640      	mov	r0, r8
 800875e:	47d0      	blx	sl
 8008760:	3001      	adds	r0, #1
 8008762:	d0ab      	beq.n	80086bc <_printf_i+0x164>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	079b      	lsls	r3, r3, #30
 8008768:	d413      	bmi.n	8008792 <_printf_i+0x23a>
 800876a:	68e0      	ldr	r0, [r4, #12]
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	4298      	cmp	r0, r3
 8008770:	bfb8      	it	lt
 8008772:	4618      	movlt	r0, r3
 8008774:	e7a4      	b.n	80086c0 <_printf_i+0x168>
 8008776:	2301      	movs	r3, #1
 8008778:	4632      	mov	r2, r6
 800877a:	4649      	mov	r1, r9
 800877c:	4640      	mov	r0, r8
 800877e:	47d0      	blx	sl
 8008780:	3001      	adds	r0, #1
 8008782:	d09b      	beq.n	80086bc <_printf_i+0x164>
 8008784:	3501      	adds	r5, #1
 8008786:	68e3      	ldr	r3, [r4, #12]
 8008788:	9903      	ldr	r1, [sp, #12]
 800878a:	1a5b      	subs	r3, r3, r1
 800878c:	42ab      	cmp	r3, r5
 800878e:	dcf2      	bgt.n	8008776 <_printf_i+0x21e>
 8008790:	e7eb      	b.n	800876a <_printf_i+0x212>
 8008792:	2500      	movs	r5, #0
 8008794:	f104 0619 	add.w	r6, r4, #25
 8008798:	e7f5      	b.n	8008786 <_printf_i+0x22e>
 800879a:	bf00      	nop
 800879c:	08008df5 	.word	0x08008df5
 80087a0:	08008e06 	.word	0x08008e06

080087a4 <__sread>:
 80087a4:	b510      	push	{r4, lr}
 80087a6:	460c      	mov	r4, r1
 80087a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ac:	f000 f9a6 	bl	8008afc <_read_r>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	bfab      	itete	ge
 80087b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087b6:	89a3      	ldrhlt	r3, [r4, #12]
 80087b8:	181b      	addge	r3, r3, r0
 80087ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087be:	bfac      	ite	ge
 80087c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087c2:	81a3      	strhlt	r3, [r4, #12]
 80087c4:	bd10      	pop	{r4, pc}

080087c6 <__swrite>:
 80087c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ca:	461f      	mov	r7, r3
 80087cc:	898b      	ldrh	r3, [r1, #12]
 80087ce:	05db      	lsls	r3, r3, #23
 80087d0:	4605      	mov	r5, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4616      	mov	r6, r2
 80087d6:	d505      	bpl.n	80087e4 <__swrite+0x1e>
 80087d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087dc:	2302      	movs	r3, #2
 80087de:	2200      	movs	r2, #0
 80087e0:	f000 f930 	bl	8008a44 <_lseek_r>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	4632      	mov	r2, r6
 80087f2:	463b      	mov	r3, r7
 80087f4:	4628      	mov	r0, r5
 80087f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087fa:	f000 b869 	b.w	80088d0 <_write_r>

080087fe <__sseek>:
 80087fe:	b510      	push	{r4, lr}
 8008800:	460c      	mov	r4, r1
 8008802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008806:	f000 f91d 	bl	8008a44 <_lseek_r>
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	bf15      	itete	ne
 8008810:	6560      	strne	r0, [r4, #84]	; 0x54
 8008812:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008816:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800881a:	81a3      	strheq	r3, [r4, #12]
 800881c:	bf18      	it	ne
 800881e:	81a3      	strhne	r3, [r4, #12]
 8008820:	bd10      	pop	{r4, pc}

08008822 <__sclose>:
 8008822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008826:	f000 b8db 	b.w	80089e0 <_close_r>
	...

0800882c <__swbuf_r>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	460e      	mov	r6, r1
 8008830:	4614      	mov	r4, r2
 8008832:	4605      	mov	r5, r0
 8008834:	b118      	cbz	r0, 800883e <__swbuf_r+0x12>
 8008836:	6983      	ldr	r3, [r0, #24]
 8008838:	b90b      	cbnz	r3, 800883e <__swbuf_r+0x12>
 800883a:	f7ff fa49 	bl	8007cd0 <__sinit>
 800883e:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <__swbuf_r+0x98>)
 8008840:	429c      	cmp	r4, r3
 8008842:	d12b      	bne.n	800889c <__swbuf_r+0x70>
 8008844:	686c      	ldr	r4, [r5, #4]
 8008846:	69a3      	ldr	r3, [r4, #24]
 8008848:	60a3      	str	r3, [r4, #8]
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	071a      	lsls	r2, r3, #28
 800884e:	d52f      	bpl.n	80088b0 <__swbuf_r+0x84>
 8008850:	6923      	ldr	r3, [r4, #16]
 8008852:	b36b      	cbz	r3, 80088b0 <__swbuf_r+0x84>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	6820      	ldr	r0, [r4, #0]
 8008858:	1ac0      	subs	r0, r0, r3
 800885a:	6963      	ldr	r3, [r4, #20]
 800885c:	b2f6      	uxtb	r6, r6
 800885e:	4283      	cmp	r3, r0
 8008860:	4637      	mov	r7, r6
 8008862:	dc04      	bgt.n	800886e <__swbuf_r+0x42>
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	f7ff f99e 	bl	8007ba8 <_fflush_r>
 800886c:	bb30      	cbnz	r0, 80088bc <__swbuf_r+0x90>
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	3b01      	subs	r3, #1
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	6022      	str	r2, [r4, #0]
 800887a:	701e      	strb	r6, [r3, #0]
 800887c:	6963      	ldr	r3, [r4, #20]
 800887e:	3001      	adds	r0, #1
 8008880:	4283      	cmp	r3, r0
 8008882:	d004      	beq.n	800888e <__swbuf_r+0x62>
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	07db      	lsls	r3, r3, #31
 8008888:	d506      	bpl.n	8008898 <__swbuf_r+0x6c>
 800888a:	2e0a      	cmp	r6, #10
 800888c:	d104      	bne.n	8008898 <__swbuf_r+0x6c>
 800888e:	4621      	mov	r1, r4
 8008890:	4628      	mov	r0, r5
 8008892:	f7ff f989 	bl	8007ba8 <_fflush_r>
 8008896:	b988      	cbnz	r0, 80088bc <__swbuf_r+0x90>
 8008898:	4638      	mov	r0, r7
 800889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <__swbuf_r+0x9c>)
 800889e:	429c      	cmp	r4, r3
 80088a0:	d101      	bne.n	80088a6 <__swbuf_r+0x7a>
 80088a2:	68ac      	ldr	r4, [r5, #8]
 80088a4:	e7cf      	b.n	8008846 <__swbuf_r+0x1a>
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <__swbuf_r+0xa0>)
 80088a8:	429c      	cmp	r4, r3
 80088aa:	bf08      	it	eq
 80088ac:	68ec      	ldreq	r4, [r5, #12]
 80088ae:	e7ca      	b.n	8008846 <__swbuf_r+0x1a>
 80088b0:	4621      	mov	r1, r4
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 f81e 	bl	80088f4 <__swsetup_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d0cb      	beq.n	8008854 <__swbuf_r+0x28>
 80088bc:	f04f 37ff 	mov.w	r7, #4294967295
 80088c0:	e7ea      	b.n	8008898 <__swbuf_r+0x6c>
 80088c2:	bf00      	nop
 80088c4:	08008da4 	.word	0x08008da4
 80088c8:	08008dc4 	.word	0x08008dc4
 80088cc:	08008d84 	.word	0x08008d84

080088d0 <_write_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d07      	ldr	r5, [pc, #28]	; (80088f0 <_write_r+0x20>)
 80088d4:	4604      	mov	r4, r0
 80088d6:	4608      	mov	r0, r1
 80088d8:	4611      	mov	r1, r2
 80088da:	2200      	movs	r2, #0
 80088dc:	602a      	str	r2, [r5, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f7f8 ffe5 	bl	80018ae <_write>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_write_r+0x1e>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_write_r+0x1e>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	200004f0 	.word	0x200004f0

080088f4 <__swsetup_r>:
 80088f4:	4b32      	ldr	r3, [pc, #200]	; (80089c0 <__swsetup_r+0xcc>)
 80088f6:	b570      	push	{r4, r5, r6, lr}
 80088f8:	681d      	ldr	r5, [r3, #0]
 80088fa:	4606      	mov	r6, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	b125      	cbz	r5, 800890a <__swsetup_r+0x16>
 8008900:	69ab      	ldr	r3, [r5, #24]
 8008902:	b913      	cbnz	r3, 800890a <__swsetup_r+0x16>
 8008904:	4628      	mov	r0, r5
 8008906:	f7ff f9e3 	bl	8007cd0 <__sinit>
 800890a:	4b2e      	ldr	r3, [pc, #184]	; (80089c4 <__swsetup_r+0xd0>)
 800890c:	429c      	cmp	r4, r3
 800890e:	d10f      	bne.n	8008930 <__swsetup_r+0x3c>
 8008910:	686c      	ldr	r4, [r5, #4]
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008918:	0719      	lsls	r1, r3, #28
 800891a:	d42c      	bmi.n	8008976 <__swsetup_r+0x82>
 800891c:	06dd      	lsls	r5, r3, #27
 800891e:	d411      	bmi.n	8008944 <__swsetup_r+0x50>
 8008920:	2309      	movs	r3, #9
 8008922:	6033      	str	r3, [r6, #0]
 8008924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	e03e      	b.n	80089ae <__swsetup_r+0xba>
 8008930:	4b25      	ldr	r3, [pc, #148]	; (80089c8 <__swsetup_r+0xd4>)
 8008932:	429c      	cmp	r4, r3
 8008934:	d101      	bne.n	800893a <__swsetup_r+0x46>
 8008936:	68ac      	ldr	r4, [r5, #8]
 8008938:	e7eb      	b.n	8008912 <__swsetup_r+0x1e>
 800893a:	4b24      	ldr	r3, [pc, #144]	; (80089cc <__swsetup_r+0xd8>)
 800893c:	429c      	cmp	r4, r3
 800893e:	bf08      	it	eq
 8008940:	68ec      	ldreq	r4, [r5, #12]
 8008942:	e7e6      	b.n	8008912 <__swsetup_r+0x1e>
 8008944:	0758      	lsls	r0, r3, #29
 8008946:	d512      	bpl.n	800896e <__swsetup_r+0x7a>
 8008948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800894a:	b141      	cbz	r1, 800895e <__swsetup_r+0x6a>
 800894c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008950:	4299      	cmp	r1, r3
 8008952:	d002      	beq.n	800895a <__swsetup_r+0x66>
 8008954:	4630      	mov	r0, r6
 8008956:	f7fe fed9 	bl	800770c <_free_r>
 800895a:	2300      	movs	r3, #0
 800895c:	6363      	str	r3, [r4, #52]	; 0x34
 800895e:	89a3      	ldrh	r3, [r4, #12]
 8008960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008964:	81a3      	strh	r3, [r4, #12]
 8008966:	2300      	movs	r3, #0
 8008968:	6063      	str	r3, [r4, #4]
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f043 0308 	orr.w	r3, r3, #8
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	b94b      	cbnz	r3, 800898e <__swsetup_r+0x9a>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008984:	d003      	beq.n	800898e <__swsetup_r+0x9a>
 8008986:	4621      	mov	r1, r4
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff fa75 	bl	8007e78 <__smakebuf_r>
 800898e:	89a0      	ldrh	r0, [r4, #12]
 8008990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008994:	f010 0301 	ands.w	r3, r0, #1
 8008998:	d00a      	beq.n	80089b0 <__swsetup_r+0xbc>
 800899a:	2300      	movs	r3, #0
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	6963      	ldr	r3, [r4, #20]
 80089a0:	425b      	negs	r3, r3
 80089a2:	61a3      	str	r3, [r4, #24]
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	b943      	cbnz	r3, 80089ba <__swsetup_r+0xc6>
 80089a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089ac:	d1ba      	bne.n	8008924 <__swsetup_r+0x30>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	0781      	lsls	r1, r0, #30
 80089b2:	bf58      	it	pl
 80089b4:	6963      	ldrpl	r3, [r4, #20]
 80089b6:	60a3      	str	r3, [r4, #8]
 80089b8:	e7f4      	b.n	80089a4 <__swsetup_r+0xb0>
 80089ba:	2000      	movs	r0, #0
 80089bc:	e7f7      	b.n	80089ae <__swsetup_r+0xba>
 80089be:	bf00      	nop
 80089c0:	20000298 	.word	0x20000298
 80089c4:	08008da4 	.word	0x08008da4
 80089c8:	08008dc4 	.word	0x08008dc4
 80089cc:	08008d84 	.word	0x08008d84

080089d0 <abort>:
 80089d0:	b508      	push	{r3, lr}
 80089d2:	2006      	movs	r0, #6
 80089d4:	f000 f8cc 	bl	8008b70 <raise>
 80089d8:	2001      	movs	r0, #1
 80089da:	f7f8 ff41 	bl	8001860 <_exit>
	...

080089e0 <_close_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d06      	ldr	r5, [pc, #24]	; (80089fc <_close_r+0x1c>)
 80089e4:	2300      	movs	r3, #0
 80089e6:	4604      	mov	r4, r0
 80089e8:	4608      	mov	r0, r1
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	f7f8 ff7b 	bl	80018e6 <_close>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d102      	bne.n	80089fa <_close_r+0x1a>
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	b103      	cbz	r3, 80089fa <_close_r+0x1a>
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	200004f0 	.word	0x200004f0

08008a00 <_fstat_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d07      	ldr	r5, [pc, #28]	; (8008a20 <_fstat_r+0x20>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	f7f8 ff76 	bl	80018fe <_fstat>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d102      	bne.n	8008a1c <_fstat_r+0x1c>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	b103      	cbz	r3, 8008a1c <_fstat_r+0x1c>
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	bd38      	pop	{r3, r4, r5, pc}
 8008a1e:	bf00      	nop
 8008a20:	200004f0 	.word	0x200004f0

08008a24 <_isatty_r>:
 8008a24:	b538      	push	{r3, r4, r5, lr}
 8008a26:	4d06      	ldr	r5, [pc, #24]	; (8008a40 <_isatty_r+0x1c>)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	602b      	str	r3, [r5, #0]
 8008a30:	f7f8 ff75 	bl	800191e <_isatty>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	d102      	bne.n	8008a3e <_isatty_r+0x1a>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	b103      	cbz	r3, 8008a3e <_isatty_r+0x1a>
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	bd38      	pop	{r3, r4, r5, pc}
 8008a40:	200004f0 	.word	0x200004f0

08008a44 <_lseek_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d07      	ldr	r5, [pc, #28]	; (8008a64 <_lseek_r+0x20>)
 8008a48:	4604      	mov	r4, r0
 8008a4a:	4608      	mov	r0, r1
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	602a      	str	r2, [r5, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f7f8 ff6e 	bl	8001934 <_lseek>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_lseek_r+0x1e>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_lseek_r+0x1e>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	200004f0 	.word	0x200004f0

08008a68 <memmove>:
 8008a68:	4288      	cmp	r0, r1
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	eb01 0402 	add.w	r4, r1, r2
 8008a70:	d902      	bls.n	8008a78 <memmove+0x10>
 8008a72:	4284      	cmp	r4, r0
 8008a74:	4623      	mov	r3, r4
 8008a76:	d807      	bhi.n	8008a88 <memmove+0x20>
 8008a78:	1e43      	subs	r3, r0, #1
 8008a7a:	42a1      	cmp	r1, r4
 8008a7c:	d008      	beq.n	8008a90 <memmove+0x28>
 8008a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a86:	e7f8      	b.n	8008a7a <memmove+0x12>
 8008a88:	4402      	add	r2, r0
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	428a      	cmp	r2, r1
 8008a8e:	d100      	bne.n	8008a92 <memmove+0x2a>
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a9a:	e7f7      	b.n	8008a8c <memmove+0x24>

08008a9c <_realloc_r>:
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	4614      	mov	r4, r2
 8008aa4:	460e      	mov	r6, r1
 8008aa6:	b921      	cbnz	r1, 8008ab2 <_realloc_r+0x16>
 8008aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aac:	4611      	mov	r1, r2
 8008aae:	f7fe be99 	b.w	80077e4 <_malloc_r>
 8008ab2:	b92a      	cbnz	r2, 8008ac0 <_realloc_r+0x24>
 8008ab4:	f7fe fe2a 	bl	800770c <_free_r>
 8008ab8:	4625      	mov	r5, r4
 8008aba:	4628      	mov	r0, r5
 8008abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac0:	f000 f872 	bl	8008ba8 <_malloc_usable_size_r>
 8008ac4:	4284      	cmp	r4, r0
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	d802      	bhi.n	8008ad0 <_realloc_r+0x34>
 8008aca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ace:	d812      	bhi.n	8008af6 <_realloc_r+0x5a>
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f7fe fe86 	bl	80077e4 <_malloc_r>
 8008ad8:	4605      	mov	r5, r0
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d0ed      	beq.n	8008aba <_realloc_r+0x1e>
 8008ade:	42bc      	cmp	r4, r7
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	bf28      	it	cs
 8008ae6:	463a      	movcs	r2, r7
 8008ae8:	f7fe fdfa 	bl	80076e0 <memcpy>
 8008aec:	4631      	mov	r1, r6
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7fe fe0c 	bl	800770c <_free_r>
 8008af4:	e7e1      	b.n	8008aba <_realloc_r+0x1e>
 8008af6:	4635      	mov	r5, r6
 8008af8:	e7df      	b.n	8008aba <_realloc_r+0x1e>
	...

08008afc <_read_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4d07      	ldr	r5, [pc, #28]	; (8008b1c <_read_r+0x20>)
 8008b00:	4604      	mov	r4, r0
 8008b02:	4608      	mov	r0, r1
 8008b04:	4611      	mov	r1, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	602a      	str	r2, [r5, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f7f8 feb2 	bl	8001874 <_read>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_read_r+0x1e>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_read_r+0x1e>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	200004f0 	.word	0x200004f0

08008b20 <_raise_r>:
 8008b20:	291f      	cmp	r1, #31
 8008b22:	b538      	push	{r3, r4, r5, lr}
 8008b24:	4604      	mov	r4, r0
 8008b26:	460d      	mov	r5, r1
 8008b28:	d904      	bls.n	8008b34 <_raise_r+0x14>
 8008b2a:	2316      	movs	r3, #22
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b36:	b112      	cbz	r2, 8008b3e <_raise_r+0x1e>
 8008b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b3c:	b94b      	cbnz	r3, 8008b52 <_raise_r+0x32>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f830 	bl	8008ba4 <_getpid_r>
 8008b44:	462a      	mov	r2, r5
 8008b46:	4601      	mov	r1, r0
 8008b48:	4620      	mov	r0, r4
 8008b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b4e:	f000 b817 	b.w	8008b80 <_kill_r>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d00a      	beq.n	8008b6c <_raise_r+0x4c>
 8008b56:	1c59      	adds	r1, r3, #1
 8008b58:	d103      	bne.n	8008b62 <_raise_r+0x42>
 8008b5a:	2316      	movs	r3, #22
 8008b5c:	6003      	str	r3, [r0, #0]
 8008b5e:	2001      	movs	r0, #1
 8008b60:	e7e7      	b.n	8008b32 <_raise_r+0x12>
 8008b62:	2400      	movs	r4, #0
 8008b64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b68:	4628      	mov	r0, r5
 8008b6a:	4798      	blx	r3
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7e0      	b.n	8008b32 <_raise_r+0x12>

08008b70 <raise>:
 8008b70:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <raise+0xc>)
 8008b72:	4601      	mov	r1, r0
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f7ff bfd3 	b.w	8008b20 <_raise_r>
 8008b7a:	bf00      	nop
 8008b7c:	20000298 	.word	0x20000298

08008b80 <_kill_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	; (8008ba0 <_kill_r+0x20>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	602b      	str	r3, [r5, #0]
 8008b8e:	f7f8 fe57 	bl	8001840 <_kill>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d102      	bne.n	8008b9c <_kill_r+0x1c>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	b103      	cbz	r3, 8008b9c <_kill_r+0x1c>
 8008b9a:	6023      	str	r3, [r4, #0]
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200004f0 	.word	0x200004f0

08008ba4 <_getpid_r>:
 8008ba4:	f7f8 be44 	b.w	8001830 <_getpid>

08008ba8 <_malloc_usable_size_r>:
 8008ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bac:	1f18      	subs	r0, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bfbc      	itt	lt
 8008bb2:	580b      	ldrlt	r3, [r1, r0]
 8008bb4:	18c0      	addlt	r0, r0, r3
 8008bb6:	4770      	bx	lr

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
